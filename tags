!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/7492b90e/
$(EXE)	imgui/examples/example_emscripten/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	imgui/examples/example_glfw_metal/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	imgui/examples/example_glfw_opengl2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	imgui/examples/example_glfw_opengl3/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	imgui/examples/example_glut_opengl2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	imgui/examples/example_null/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	imgui/examples/example_sdl_opengl2/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	imgui/examples/example_sdl_opengl3/Makefile	/^$(EXE): $(OBJS)$/;"	t
$(EXE)	makefile	/^$(EXE): $(OBJS)$/;"	t
%.o	imgui/examples/example_emscripten/Makefile	/^%.o:%.cpp$/;"	t
%.o	imgui/examples/example_emscripten/Makefile	/^%.o:..\/%.cpp$/;"	t
%.o	imgui/examples/example_emscripten/Makefile	/^%.o:..\/..\/%.cpp$/;"	t
%.o	imgui/examples/example_emscripten/Makefile	/^%.o:..\/libs\/gl3w\/GL\/%.c$/;"	t
%.o	imgui/examples/example_glfw_metal/Makefile	/^%.o:%.cpp$/;"	t
%.o	imgui/examples/example_glfw_metal/Makefile	/^%.o:%.mm$/;"	t
%.o	imgui/examples/example_glfw_metal/Makefile	/^%.o:..\/%.cpp$/;"	t
%.o	imgui/examples/example_glfw_metal/Makefile	/^%.o:..\/%.mm$/;"	t
%.o	imgui/examples/example_glfw_metal/Makefile	/^%.o:..\/..\/%.cpp$/;"	t
%.o	imgui/examples/example_glfw_opengl2/Makefile	/^%.o:%.cpp$/;"	t
%.o	imgui/examples/example_glfw_opengl2/Makefile	/^%.o:..\/%.cpp$/;"	t
%.o	imgui/examples/example_glfw_opengl2/Makefile	/^%.o:..\/..\/%.cpp$/;"	t
%.o	imgui/examples/example_glfw_opengl3/Makefile	/^%.o:%.cpp$/;"	t
%.o	imgui/examples/example_glfw_opengl3/Makefile	/^%.o:..\/%.cpp$/;"	t
%.o	imgui/examples/example_glfw_opengl3/Makefile	/^%.o:..\/..\/%.cpp$/;"	t
%.o	imgui/examples/example_glfw_opengl3/Makefile	/^%.o:..\/libs\/gl3w\/GL\/%.c$/;"	t
%.o	imgui/examples/example_glfw_opengl3/Makefile	/^%.o:..\/libs\/glad\/src\/%.c$/;"	t
%.o	imgui/examples/example_glut_opengl2/Makefile	/^%.o:%.cpp$/;"	t
%.o	imgui/examples/example_glut_opengl2/Makefile	/^%.o:..\/%.cpp$/;"	t
%.o	imgui/examples/example_glut_opengl2/Makefile	/^%.o:..\/..\/%.cpp$/;"	t
%.o	imgui/examples/example_null/Makefile	/^%.o:%.cpp$/;"	t
%.o	imgui/examples/example_null/Makefile	/^%.o:..\/%.cpp$/;"	t
%.o	imgui/examples/example_null/Makefile	/^%.o:..\/..\/%.cpp$/;"	t
%.o	imgui/examples/example_sdl_opengl2/Makefile	/^%.o:%.cpp$/;"	t
%.o	imgui/examples/example_sdl_opengl2/Makefile	/^%.o:..\/%.cpp$/;"	t
%.o	imgui/examples/example_sdl_opengl2/Makefile	/^%.o:..\/..\/%.cpp$/;"	t
%.o	imgui/examples/example_sdl_opengl3/Makefile	/^%.o:%.cpp$/;"	t
%.o	imgui/examples/example_sdl_opengl3/Makefile	/^%.o:..\/%.cpp$/;"	t
%.o	imgui/examples/example_sdl_opengl3/Makefile	/^%.o:..\/..\/%.cpp$/;"	t
%.o	imgui/examples/example_sdl_opengl3/Makefile	/^%.o:..\/libs\/gl3w\/GL\/%.c$/;"	t
%.o	imgui/examples/example_sdl_opengl3/Makefile	/^%.o:..\/libs\/glad\/src\/%.c$/;"	t
%.o	makefile	/^%.o:%.cpp$/;"	t
%.o	makefile	/^%.o:imgui\/%.cpp$/;"	t
%.o	makefile	/^%.o:imgui\/examples\/%.cpp$/;"	t
%.o	makefile	/^%.o:imgui\/examples\/libs\/gl3w\/GL\/%.c$/;"	t
%.o	makefile	/^%.o:imgui\/examples\/libs\/glad\/src\/%.c$/;"	t
ALLEGRO_HAS_CLIPBOARD	imgui/examples/imgui_impl_allegro5.cpp	/^#define ALLEGRO_HAS_CLIPBOARD /;"	d	file:
APIENTRY	imgui/examples/imgui_impl_opengl2.cpp	/^#define APIENTRY /;"	d	file:
APIENTRY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define APIENTRY$/;"	d
APIENTRY	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^  #define APIENTRY /;"	d
APIENTRYP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define APIENTRYP /;"	d
AcceptDragDropPayload	imgui/imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
ActivateItem	imgui/imgui.cpp	/^void ImGui::ActivateItem(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Active	imgui/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unl/;"	m	struct:ImGuiWindow	typeref:typename:bool
ActiveId	imgui/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdAllowOverlap	imgui/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows anothe/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdClickOffset	imgui/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
ActiveIdHasBeenEditedBefore	imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedBefore;        \/\/ Was the value associated to/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedThisFrame	imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedThisFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenPressedBefore	imgui/imgui_internal.h	/^    bool                    ActiveIdHasBeenPressedBefore;       \/\/ Track whether the active id/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdIsAlive	imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdIsJustActivated	imgui/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activati/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdMouseButton	imgui/imgui_internal.h	/^    int                     ActiveIdMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
ActiveIdPreviousFrame	imgui/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdPreviousFrameHasBeenEditedBefore	imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameIsAlive	imgui/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveIdSource	imgui/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating with mouse or na/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
ActiveIdTimer	imgui/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
ActiveIdUsingKeyInputMask	imgui/imgui_internal.h	/^    ImU64                   ActiveIdUsingKeyInputMask;          \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU64
ActiveIdUsingNavDirMask	imgui/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavDirMask;            \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdUsingNavInputMask	imgui/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavInputMask;          \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
Add	imgui/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Buf.Size) { /;"	f	struct:ImPool	typeref:typename:T *
Add	imgui/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (/;"	f	struct:ImRect	typeref:typename:void
Add	imgui/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (/;"	f	struct:ImRect	typeref:typename:void
AddBezierCurve	imgui/imgui_draw.cpp	/^void ImDrawList::AddBezierCurve(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVe/;"	f	class:ImDrawList	typeref:typename:void
AddCallback	imgui/imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList	typeref:typename:void
AddChar	imgui/imgui.h	/^    inline void     AddChar(ImWchar c)  { SetBit(c); }                          \/\/ Add charact/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
AddCircle	imgui/imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments, floa/;"	f	class:ImDrawList	typeref:typename:void
AddCircleFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
AddConvexPolyFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddCustomRectFontGlyph	imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float a/;"	f	class:ImFontAtlas	typeref:typename:int
AddCustomRectRegular	imgui/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(unsigned int id, int width, int height)$/;"	f	class:ImFontAtlas	typeref:typename:int
AddDrawCmd	imgui/imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
AddDrawListToDrawData	imgui/imgui.cpp	/^static void AddDrawListToDrawData(ImVector<ImDrawList*>* out_list, ImDrawList* draw_list)$/;"	f	typeref:typename:void	file:
AddFont	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontDefault	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromFileTTF	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontCon/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedBase85TTF	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedTTF	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compres/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryTTF	imgui/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* ttf_data, int ttf_size, float size_pixels, const/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddGlyph	imgui/imgui_draw.cpp	/^void ImFont::AddGlyph(ImWchar codepoint, float x0, float y0, float x1, float y1, float u0, float/;"	f	class:ImFont	typeref:typename:void
AddImage	imgui/imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max,/;"	f	class:ImDrawList	typeref:typename:void
AddImageQuad	imgui/imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, c/;"	f	class:ImDrawList	typeref:typename:void
AddImageRounded	imgui/imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2&/;"	f	class:ImDrawList	typeref:typename:void
AddInputCharacter	imgui/imgui.cpp	/^void ImGuiIO::AddInputCharacter(unsigned int c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharactersUTF8	imgui/imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO	typeref:typename:void
AddLine	imgui/imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness)$/;"	f	class:ImDrawList	typeref:typename:void
AddLog	imgui/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
AddLog	imgui/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
AddNgon	imgui/imgui_draw.cpp	/^void ImDrawList::AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float /;"	f	class:ImDrawList	typeref:typename:void
AddNgonFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList	typeref:typename:void
AddPolyline	imgui/imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, bool close/;"	f	class:ImDrawList	typeref:typename:void
AddQuad	imgui/imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	class:ImDrawList	typeref:typename:void
AddQuadFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec/;"	f	class:ImDrawList	typeref:typename:void
AddRanges	imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddRect	imgui/imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, Im/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float roundi/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilledMultiColor	imgui/imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr/;"	f	class:ImDrawList	typeref:typename:void
AddRemapChar	imgui/imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont	typeref:typename:void
AddRootWindowToDrawData	imgui/imgui.cpp	/^static void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddText	imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, cons/;"	f	class:ImDrawList	typeref:typename:void
AddText	imgui/imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_/;"	f	class:ImDrawList	typeref:typename:void
AddText	imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddTriangle	imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, fl/;"	f	class:ImDrawList	typeref:typename:void
AddTriangleFilled	imgui/imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 c/;"	f	class:ImDrawList	typeref:typename:void
AddWindowToDrawData	imgui/imgui.cpp	/^static void AddWindowToDrawData(ImVector<ImDrawList*>* out_render_list, ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddWindowToSortBuffer	imgui/imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* windo/;"	f	typeref:typename:void	file:
AdvanceX	imgui/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFo/;"	m	struct:ImFontGlyph	typeref:typename:float
AdvanceX	imgui/misc/freetype/imgui_freetype.cpp	/^        float       AdvanceX;           \/\/ The distance from the origin to the origin of the n/;"	m	struct:__anon76bbacac0111::GlyphInfo	typeref:typename:float	file:
AlignTextToFramePadding	imgui/imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui	typeref:typename:void
Allocator	imgui/examples/imgui_impl_vulkan.h	/^    const VkAllocationCallbacks* Allocator;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:const VkAllocationCallbacks *
Alpha	imgui/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in Dear ImGu/;"	m	struct:ImGuiStyle	typeref:typename:float
AngleMax12	imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngleMin12	imgui/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AntiAliasedFill	imgui/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliasing on filled shapes (rounded /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLines	imgui/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliasing on lines\/borders. Disable/;"	m	struct:ImGuiStyle	typeref:typename:bool
AppDelegate	imgui/examples/example_apple_metal/Shared/AppDelegate.h	/^@interface AppDelegate : NSObject <NSApplicationDelegate>$/;"	i	protocols:NSApplicationDelegate
AppDelegate	imgui/examples/example_apple_metal/Shared/AppDelegate.h	/^@interface AppDelegate : UIResponder <UIApplicationDelegate>$/;"	i	protocols:UIApplicationDelegate
AppDelegate	imgui/examples/example_apple_metal/Shared/AppDelegate.m	/^@implementation AppDelegate$/;"	I
Appearing	imgui/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where /;"	m	struct:ImGuiWindow	typeref:typename:bool
ArrowButton	imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:bool
ArrowButtonEx	imgui/imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Ascender	imgui/misc/freetype/imgui_freetype.cpp	/^        float       Ascender;           \/\/ The pixel extents above the baseline in pixels (typ/;"	m	struct:__anon76bbacac0111::FontInfo	typeref:typename:float	file:
Ascent	imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
AutoFitChildAxises	imgui/imgui_internal.h	/^    ImS8                    AutoFitChildAxises;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesX	imgui/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesY	imgui/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitOnlyGrows	imgui/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
AutoPosLastDirection	imgui/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDir
AutoScroll	imgui/imgui_demo.cpp	/^    bool                  AutoScroll;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
AutoScroll	imgui/imgui_demo.cpp	/^    bool                AutoScroll;     \/\/ Keep scrolling if already at the bottom$/;"	m	struct:ExampleAppLog	typeref:typename:bool	file:
BACKUP_DX10_STATE	imgui/examples/imgui_impl_dx10.cpp	/^    struct BACKUP_DX10_STATE$/;"	s	function:ImGui_ImplDX10_RenderDrawData	file:
BACKUP_DX11_STATE	imgui/examples/imgui_impl_dx11.cpp	/^    struct BACKUP_DX11_STATE$/;"	s	function:ImGui_ImplDX11_RenderDrawData	file:
Backbuffer	imgui/examples/imgui_impl_vulkan.h	/^    VkImage             Backbuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkImage
BackbufferView	imgui/examples/imgui_impl_vulkan.h	/^    VkImageView         BackbufferView;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkImageView
BackendFlags	imgui/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags/;"	m	struct:ImGuiIO	typeref:typename:ImGuiBackendFlags
BackendLanguageUserData	imgui/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL           \/\/ User data for non C++/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendPlatformName	imgui/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendPlatformUserData	imgui/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL           \/\/ User data for platfor/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendRendererName	imgui/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendRendererUserData	imgui/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL           \/\/ User data for rendere/;"	m	struct:ImGuiIO	typeref:typename:void *
BackgroundDrawList	imgui/imgui_internal.h	/^    ImDrawList              BackgroundDrawList;                 \/\/ First draw list to be rende/;"	m	struct:ImGuiContext	typeref:typename:ImDrawList
Backup	imgui/imgui_internal.h	/^    void Backup()           { ImGuiWindow* window = GImGui->CurrentWindow; LastItemId = window->/;"	f	struct:ImGuiItemHoveredDataBackup	typeref:typename:void
BackupActiveIdIsAlive	imgui/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
BackupActiveIdPreviousFrameIsAlive	imgui/imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupCurrLineSize	imgui/imgui_internal.h	/^    ImVec2      BackupCurrLineSize;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCurrLineTextBaseOffset	imgui/imgui_internal.h	/^    float       BackupCurrLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:float
BackupCursorMaxPos	imgui/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPos	imgui/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupFloat	imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anond8e796fc010a	typeref:typename:float[2]
BackupGroupOffset	imgui/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupIndent	imgui/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupInt	imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anond8e796fc010a	typeref:typename:int[2]
BackupValue	imgui/imgui_internal.h	/^    ImVec4      BackupValue;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImVec4
BarRect	imgui/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImRect
Begin	imgui/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Begin	imgui/imgui.cpp	/^void ImGuiListClipper::Begin(int count, float items_height)$/;"	f	class:ImGuiListClipper	typeref:typename:void
BeginChild	imgui/imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, bool border, ImGuiWindowFlags extra_f/;"	f	class:ImGui	typeref:typename:bool
BeginChild	imgui/imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, bool border, ImGuiWindowFlags/;"	f	class:ImGui	typeref:typename:bool
BeginChildEx	imgui/imgui.cpp	/^bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, bool border, ImGu/;"	f	class:ImGui	typeref:typename:bool
BeginChildFrame	imgui/imgui.cpp	/^bool ImGui::BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags extra_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginColumns	imgui/imgui_widgets.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiColumnsFlags flags)$/;"	f	class:ImGui	typeref:typename:void
BeginCombo	imgui/imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginCount	imgui/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginDragDropSource	imgui/imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTarget	imgui/imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTargetCustom	imgui/imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
BeginGroup	imgui/imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui	typeref:typename:void
BeginMainMenuBar	imgui/imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenu	imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuBar	imgui/imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginOrderWithinContext	imgui/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Order within entire imgui c/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginOrderWithinParent	imgui/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Order within immediate pare/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginPopup	imgui/imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextItem	imgui/imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextVoid	imgui/imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	imgui/imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, ImGuiMouseButton mouse_button, bool also/;"	f	class:ImGui	typeref:typename:bool
BeginPopupEx	imgui/imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupModal	imgui/imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupStack	imgui/imgui_internal.h	/^    ImVector<ImGuiPopupData>BeginPopupStack;                    \/\/ Which level of BeginPopup()/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
BeginTabBar	imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTabBarEx	imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags fl/;"	f	class:ImGui	typeref:typename:bool
BeginTabItem	imgui/imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltip	imgui/imgui.cpp	/^void ImGui::BeginTooltip()$/;"	f	class:ImGui	typeref:typename:void
BeginTooltipEx	imgui/imgui.cpp	/^void ImGui::BeginTooltipEx(ImGuiWindowFlags extra_flags, ImGuiTooltipFlags tooltip_flags)$/;"	f	class:ImGui	typeref:typename:void
BezierClosestPointCasteljauStep	imgui/imgui.cpp	/^static void BezierClosestPointCasteljauStep(const ImVec2& p, ImVec2& p_closest, ImVec2& p_last, /;"	f	typeref:typename:void	file:
BgAlphaVal	imgui/imgui_internal.h	/^    float                       BgAlphaVal;             \/\/ Override background alpha$/;"	m	struct:ImGuiNextWindowData	typeref:typename:float
BitmapData	imgui/misc/freetype/imgui_freetype.cpp	/^    unsigned char*      BitmapData;         \/\/ Point within one of the dst_tmp_bitmap_buffers[/;"	m	struct:ImFontBuildSrcGlyphFT	typeref:typename:unsigned char *	file:
BlendFactor	imgui/examples/imgui_impl_dx10.cpp	/^        FLOAT                       BlendFactor[4];$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:FLOAT[4]	file:
BlendFactor	imgui/examples/imgui_impl_dx11.cpp	/^        FLOAT                       BlendFactor[4];$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:FLOAT[4]	file:
BlendState	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10BlendState*           BlendState;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10BlendState *	file:
BlendState	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11BlendState*           BlendState;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11BlendState *	file:
BlitGlyph	imgui/misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::BlitGlyph(const FT_Bitmap* ft_bitmap, uint8_t* dst, uint32_t dst_pitch, u/;"	f	class:__anon76bbacac0111::FreeTypeFont	typeref:typename:void
Bold	imgui/misc/freetype/imgui_freetype.h	/^        Bold            = 1 << 5,   \/\/ Styling: Should we artificially embolden the font?$/;"	e	enum:ImGuiFreeType::RasterizerFlags
BringWindowToDisplayBack	imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayFront	imgui/imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToFocusFront	imgui/imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Buf	imgui/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer	typeref:typename:ImVector<char>
Buf	imgui/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:char *
Buf	imgui/imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextBuffer	file:
Buf	imgui/imgui_internal.h	/^    ImVector<T>     Buf;        \/\/ Contiguous data$/;"	m	struct:ImPool	typeref:typename:ImVector<T>
Buf	imgui/imgui_internal.h	/^    ImVector<char>  Buf;$/;"	m	struct:ImChunkStream	typeref:typename:ImVector<char>
BufCapacityA	imgui/imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
BufDirty	imgui/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write   /;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:bool
BufSize	imgui/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufTextLen	imgui/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
Build	imgui/imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter	typeref:typename:void
Build	imgui/imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas	typeref:typename:bool
BuildFontAtlas	imgui/misc/freetype/imgui_freetype.cpp	/^bool ImGuiFreeType::BuildFontAtlas(ImFontAtlas* atlas, unsigned int extra_flags)$/;"	f	class:ImGuiFreeType	typeref:typename:bool
BuildLookupTable	imgui/imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont	typeref:typename:void
BuildRanges	imgui/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
BuildSortByKey	imgui/imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage	typeref:typename:void
Bullet	imgui/imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui	typeref:typename:void
BulletText	imgui/imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
BulletTextV	imgui/imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Button	imgui/imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ButtonBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGu/;"	f	class:ImGui	typeref:typename:bool
ButtonEx	imgui/imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ButtonTextAlign	imgui/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CALLBACK	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define CALLBACK /;"	d
CC	imgui/examples/example_emscripten/Makefile	/^CC = emcc$/;"	m
CFBundleDevelopmentRegion	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleDevelopmentRegion	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleDevelopmentRegion<\/key>$/;"	k
CFBundleExecutable	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleExecutable	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleExecutable<\/key>$/;"	k
CFBundleIconFile	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleIconFile<\/key>$/;"	k
CFBundleIdentifier	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleIdentifier	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleIdentifier<\/key>$/;"	k
CFBundleInfoDictionaryVersion	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundleInfoDictionaryVersion	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleInfoDictionaryVersion<\/key>$/;"	k
CFBundleName	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleName<\/key>$/;"	k
CFBundleName	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleName<\/key>$/;"	k
CFBundlePackageType	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundlePackageType	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundlePackageType<\/key>$/;"	k
CFBundleShortVersionString	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleShortVersionString<\/key>$/;"	k
CFBundleShortVersionString	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleShortVersionString<\/key>$/;"	k
CFBundleVersion	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CFBundleVersion	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>CFBundleVersion<\/key>$/;"	k
CFLAGS	imgui/examples/example_glfw_metal/Makefile	/^CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui/examples/example_glfw_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui/examples/example_glfw_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui/examples/example_glut_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui/examples/example_null/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui/examples/example_sdl_opengl2/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui/examples/example_sdl_opengl3/Makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	imgui/examples/example_sdl_opengl3/Makefile	/^   CFLAGS = $(CXXFLAGS)$/;"	m
CFLAGS	makefile	/^	CFLAGS = $(CXXFLAGS)$/;"	m
CMAKE_BUILD_TYPE	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^  set(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE)$/;"	v
CMAKE_CXX_FLAGS	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DVK_PROTOTYPES")$/;"	v
CMAKE_C_FLAGS	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DVK_PROTOTYPES")$/;"	v
COLUMNS_HIT_RECT_HALF_WIDTH	imgui/imgui_widgets.cpp	/^static const float COLUMNS_HIT_RECT_HALF_WIDTH = 4.0f;$/;"	v	typeref:typename:const float	file:
CUSTOMVERTEX	imgui/examples/imgui_impl_dx9.cpp	/^struct CUSTOMVERTEX$/;"	s	file:
CXX	imgui/examples/example_emscripten/Makefile	/^CXX = em++$/;"	m
CXX	makefile	/^CXX = g++$/;"	m
CXXFLAGS	imgui/examples/example_glfw_metal/Makefile	/^CXXFLAGS = -I..\/ -I..\/..\/ -I\/usr\/local\/include$/;"	m
CXXFLAGS	imgui/examples/example_glfw_opengl2/Makefile	/^CXXFLAGS = -I..\/ -I..\/..\/$/;"	m
CXXFLAGS	imgui/examples/example_glfw_opengl3/Makefile	/^CXXFLAGS = -I..\/ -I..\/..\/$/;"	m
CXXFLAGS	imgui/examples/example_glut_opengl2/Makefile	/^CXXFLAGS = -I..\/ -I..\/..\/$/;"	m
CXXFLAGS	imgui/examples/example_sdl_opengl2/Makefile	/^CXXFLAGS = -I..\/ -I..\/..\/$/;"	m
CXXFLAGS	imgui/examples/example_sdl_opengl3/Makefile	/^CXXFLAGS = -I..\/ -I..\/..\/$/;"	m
CXXFLAGS	makefile	/^CXXFLAGS = -Iimgui\/ -Iimgui\/examples -Iimgui\/examples\/libs\/gl3w -Invwa\/nvwa\/$/;"	m
CalcCustomRectUV	imgui/imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:void
CalcExtraSpace	imgui/imgui_widgets.cpp	/^float ImGuiMenuColumns::CalcExtraSpace(float avail_w) const$/;"	f	class:ImGuiMenuColumns	typeref:typename:float
CalcFontSize	imgui/imgui_internal.h	/^    float       CalcFontSize() const        { ImGuiContext& g = *GImGui; float scale = g.FontBas/;"	f	struct:ImGuiWindow	typeref:typename:float
CalcItemRectClosestPoint	imgui/imgui.h	/^    static inline ImVec2 CalcItemRectClosestPoint(const ImVec2& pos, bool on_edge = false, float/;"	f	namespace:ImGui	typeref:typename:ImVec2
CalcItemSize	imgui/imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcItemWidth	imgui/imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui	typeref:typename:float
CalcListClipping	imgui/imgui.cpp	/^void ImGui::CalcListClipping(int items_count, float items_height, int* out_items_display_start, /;"	f	class:ImGui	typeref:typename:void
CalcMaxPopupHeightFromItemCount	imgui/imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	typeref:typename:float	file:
CalcNextScrollFromScrollTargetAndClamp	imgui/imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window, bool snap_on_edges)$/;"	f	typeref:typename:ImVec2	file:
CalcResizePosSizeFromAnyCorner	imgui/imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, con/;"	f	typeref:typename:void	file:
CalcTextSize	imgui/imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_h/;"	f	class:ImGui	typeref:typename:ImVec2
CalcTextSizeA	imgui/imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_beg/;"	f	class:ImFont	typeref:typename:ImVec2
CalcTypematicRepeatAmount	imgui/imgui.cpp	/^int ImGui::CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
CalcWindowAutoFitSize	imgui/imgui.cpp	/^static ImVec2 CalcWindowAutoFitSize(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowContentSize	imgui/imgui.cpp	/^static ImVec2 CalcWindowContentSize(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowExpectedSize	imgui/imgui.cpp	/^ImVec2 ImGui::CalcWindowExpectedSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcWindowSizeAfterConstraint	imgui/imgui.cpp	/^static ImVec2 CalcWindowSizeAfterConstraint(ImGuiWindow* window, ImVec2 new_size)$/;"	f	typeref:typename:ImVec2	file:
CalcWordWrapPositionA	imgui/imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, f/;"	f	class:ImFont	typeref:typename:const char *
CalcWrapWidthForPos	imgui/imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:float
CanMergeDrawCommands	imgui/imgui_draw.cpp	/^static inline bool CanMergeDrawCommands(ImDrawCmd* a, ImDrawCmd* b)$/;"	f	typeref:typename:bool	file:
Capacity	imgui/imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector	typeref:typename:int
CaptureKeyboardFromApp	imgui/imgui.cpp	/^void ImGui::CaptureKeyboardFromApp(bool capture)$/;"	f	class:ImGui	typeref:typename:void
CaptureMouseFromApp	imgui/imgui.cpp	/^void ImGui::CaptureMouseFromApp(bool capture)$/;"	f	class:ImGui	typeref:typename:void
ChainCallback	imgui/misc/cpp/imgui_stdlib.cpp	/^    ImGuiInputTextCallback  ChainCallback;$/;"	m	struct:InputTextCallback_UserData	typeref:typename:ImGuiInputTextCallback	file:
ChainCallbackUserData	imgui/misc/cpp/imgui_stdlib.cpp	/^    void*                   ChainCallbackUserData;$/;"	m	struct:InputTextCallback_UserData	typeref:typename:void *	file:
ChannelsMerge	imgui/imgui.h	/^    inline void     ChannelsMerge()             { _Splitter.Merge(this); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSetCurrent	imgui/imgui.h	/^    inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSplit	imgui/imgui.h	/^    inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }$/;"	f	struct:ImDrawList	typeref:typename:void
CheckProgram	imgui/examples/imgui_impl_opengl3.cpp	/^static bool CheckProgram(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckShader	imgui/examples/imgui_impl_opengl3.cpp	/^static bool CheckShader(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckVkResultFn	imgui/examples/imgui_impl_vulkan.h	/^    void                (*CheckVkResultFn)(VkResult err);$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:void (*)(VkResult err)
Checkbox	imgui/imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	imgui/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
ChildBorderSize	imgui/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Gener/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildId	imgui/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ChildRounding	imgui/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildWindowComparer	imgui/imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ChildWindows	imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiWindow * >
CircleSegmentCounts	imgui/imgui_internal.h	/^    ImU8            CircleSegmentCounts[64];    \/\/ Precomputed segment count for given radius /;"	m	struct:ImDrawListSharedData	typeref:typename:ImU8[64]
CircleSegmentMaxError	imgui/imgui.h	/^    float       CircleSegmentMaxError;      \/\/ Maximum error (in pixels) allowed when using Ad/;"	m	struct:ImGuiStyle	typeref:typename:float
CircleSegmentMaxError	imgui/imgui_internal.h	/^    float           CircleSegmentMaxError;      \/\/ Number of circle segments to use per pixel /;"	m	struct:ImDrawListSharedData	typeref:typename:float
CircleVtx12	imgui/imgui_internal.h	/^    ImVec2          CircleVtx12[12];            \/\/ FIXME: Bake rounded corners fill\/borders i/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2[12]
ClampWindowRect	imgui/imgui.cpp	/^static inline void ClampWindowRect(ImGuiWindow* window, const ImRect& rect, const ImVec2& paddin/;"	f	typeref:typename:void	file:
CleanupDeviceD3D	imgui/examples/example_sdl_directx11/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	imgui/examples/example_win32_directx10/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	imgui/examples/example_win32_directx11/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	imgui/examples/example_win32_directx12/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupDeviceD3D	imgui/examples/example_win32_directx9/main.cpp	/^void CleanupDeviceD3D()$/;"	f	typeref:typename:void
CleanupRenderTarget	imgui/examples/example_sdl_directx11/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupRenderTarget	imgui/examples/example_win32_directx10/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupRenderTarget	imgui/examples/example_win32_directx11/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupRenderTarget	imgui/examples/example_win32_directx12/main.cpp	/^void CleanupRenderTarget()$/;"	f	typeref:typename:void
CleanupVulkan	imgui/examples/example_glfw_vulkan/main.cpp	/^static void CleanupVulkan()$/;"	f	typeref:typename:void	file:
CleanupVulkan	imgui/examples/example_sdl_vulkan/main.cpp	/^static void CleanupVulkan()$/;"	f	typeref:typename:void	file:
CleanupVulkanWindow	imgui/examples/example_glfw_vulkan/main.cpp	/^static void CleanupVulkanWindow()$/;"	f	typeref:typename:void	file:
CleanupVulkanWindow	imgui/examples/example_sdl_vulkan/main.cpp	/^static void CleanupVulkanWindow()$/;"	f	typeref:typename:void	file:
Clear	imgui/imgui.h	/^    inline void                 Clear() { _Current = 0; _Count = 1; } \/\/ Do not clear Channels/;"	f	struct:ImDrawListSplitter	typeref:typename:void
Clear	imgui/imgui.h	/^    inline void     Clear()             { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX+1) \/ 8;/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
Clear	imgui/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:void
Clear	imgui/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage	typeref:typename:void
Clear	imgui/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType,/;"	f	struct:ImGuiPayload	typeref:typename:void
Clear	imgui/imgui.h	/^    void Clear()    { Valid = false; CmdLists = NULL; CmdListsCount = TotalVtxCount = TotalIdxCo/;"	f	struct:ImDrawData	typeref:typename:void
Clear	imgui/imgui_demo.cpp	/^    void    Clear()$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Clear	imgui/imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas	typeref:typename:void
Clear	imgui/imgui_draw.cpp	/^void ImDrawList::Clear()$/;"	f	class:ImDrawList	typeref:typename:void
Clear	imgui/imgui_internal.h	/^    void            Clear()                 { Storage.clear(); }$/;"	f	struct:ImBoolVector	typeref:typename:void
Clear	imgui/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { /;"	f	struct:ImPool	typeref:typename:void
Clear	imgui/imgui_internal.h	/^    void Clear()            { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].resize(0)/;"	f	struct:ImDrawDataBuilder	typeref:typename:void
Clear	imgui/imgui_internal.h	/^    void Clear()         { Window = NULL; ID = FocusScopeId = 0; DistBox = DistCenter = DistAxia/;"	f	struct:ImGuiNavMoveResult	typeref:typename:void
Clear	imgui/imgui_internal.h	/^    void Clear()$/;"	f	struct:ImGuiColumns	typeref:typename:void
ClearActiveID	imgui/imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui	typeref:typename:void
ClearDragDrop	imgui/imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui	typeref:typename:void
ClearEnable	imgui/examples/imgui_impl_vulkan.h	/^    bool                ClearEnable;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:bool
ClearFlags	imgui/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; } \/\/ Also cleared manua/;"	f	struct:ImGuiNextItemData	typeref:typename:void
ClearFlags	imgui/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextWindowDataFlags_None; }$/;"	f	struct:ImGuiNextWindowData	typeref:typename:void
ClearFonts	imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearFreeMemory	imgui/imgui_draw.cpp	/^void ImDrawList::ClearFreeMemory()$/;"	f	class:ImDrawList	typeref:typename:void
ClearFreeMemory	imgui/imgui_draw.cpp	/^void ImDrawListSplitter::ClearFreeMemory()$/;"	f	class:ImDrawListSplitter	typeref:typename:void
ClearFreeMemory	imgui/imgui_internal.h	/^    void        ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear()/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearFreeMemory	imgui/imgui_internal.h	/^    void ClearFreeMemory()  { for (int n = 0; n < IM_ARRAYSIZE(Layers); n++) Layers[n].clear(); /;"	f	struct:ImDrawDataBuilder	typeref:typename:void
ClearInputCharacters	imgui/imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputData	imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearLog	imgui/imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
ClearOutputData	imgui/imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont	typeref:typename:void
ClearSelection	imgui/imgui_internal.h	/^    void        ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearTexData	imgui/imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearText	imgui/imgui_internal.h	/^    void        ClearText()                 { CurLenW = CurLenA = 0; TextW[0] = 0; TextA[0] = 0;/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearValue	imgui/examples/imgui_impl_vulkan.h	/^    VkClearValue        ClearValue;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkClearValue
ClipRect	imgui/imgui.h	/^    ImVec4          ClipRect;               \/\/ Clipping rectangle (x1, y1, x2, y2). Subtract I/;"	m	struct:ImDrawCmd	typeref:typename:ImVec4
ClipRect	imgui/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping\/scissorin/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ClipRect	imgui/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiColumnData	typeref:typename:ImRect
ClipRectFullscreen	imgui/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec4
ClipWith	imgui/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, /;"	f	struct:ImRect	typeref:typename:void
ClipWithFull	imgui/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = Im/;"	f	struct:ImRect	typeref:typename:void
ClipboardUserData	imgui/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO	typeref:typename:void *
CloneOutput	imgui/imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList	typeref:typename:ImDrawList *
CloseButton	imgui/imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)\/\/, float size)$/;"	f	class:ImGui	typeref:typename:bool
CloseCurrentPopup	imgui/imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui	typeref:typename:void
CloseFont	imgui/misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::CloseFont()$/;"	f	class:__anon76bbacac0111::FreeTypeFont	typeref:typename:void
ClosePopupToLevel	imgui/imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsOverWindow	imgui/imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_po/;"	f	class:ImGui	typeref:typename:void
CmdBuffer	imgui/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU /;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawCmd>
CmdLists	imgui/imgui.h	/^    ImDrawList**    CmdLists;               \/\/ Array of ImDrawList* to render. The ImDrawList /;"	m	struct:ImDrawData	typeref:typename:ImDrawList **
CmdListsCount	imgui/imgui.h	/^    int             CmdListsCount;          \/\/ Number of ImDrawList* to render$/;"	m	struct:ImDrawData	typeref:typename:int
Codepoint	imgui/imgui.h	/^    ImWchar         Codepoint;          \/\/ 0x0000..0xFFFF$/;"	m	struct:ImFontGlyph	typeref:typename:ImWchar
Codepoint	imgui/misc/freetype/imgui_freetype.cpp	/^    uint32_t            Codepoint;$/;"	m	struct:ImFontBuildSrcGlyphFT	typeref:typename:uint32_t	file:
Col	imgui/imgui_internal.h	/^    ImGuiCol    Col;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImGuiCol
CollapseButton	imgui/imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
Collapsed	imgui.ini	/^Collapsed=0$/;"	k	section:Window
Collapsed	imgui.ini	/^Collapsed=1$/;"	k	section:Window
Collapsed	imgui/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window /;"	m	struct:ImGuiWindow	typeref:typename:bool
Collapsed	imgui/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
CollapsedCond	imgui/imgui_internal.h	/^    ImGuiCond                   CollapsedCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
CollapsedVal	imgui/imgui_internal.h	/^    bool                        CollapsedVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
CollapsingHeader	imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
CollapsingHeader	imgui/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_open, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Color	imgui/imgui_demo.cpp	/^    ImVec4      Color;          \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	typeref:typename:ImVec4	file:
ColorButton	imgui/imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, ImVec/;"	f	class:ImGui	typeref:typename:bool
ColorButtonPosition	imgui/imgui.h	/^    ImGuiDir    ColorButtonPosition;        \/\/ Side of the color button in the ColorEdit4 widg/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
ColorConvertFloat4ToU32	imgui/imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui	typeref:typename:ImU32
ColorConvertHSVtoRGB	imgui/imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertRGBtoHSV	imgui/imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertU32ToFloat4	imgui/imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui	typeref:typename:ImVec4
ColorEdit3	imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEdit4	imgui/imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEditLastColor	imgui/imgui_internal.h	/^    float                   ColorEditLastColor[3];$/;"	m	struct:ImGuiContext	typeref:typename:float[3]
ColorEditLastHue	imgui/imgui_internal.h	/^    float                   ColorEditLastHue;                   \/\/ Backup of last Hue associat/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditLastSat	imgui/imgui_internal.h	/^    float                   ColorEditLastSat;                   \/\/ Backup of last Saturation a/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditOptions	imgui/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for colo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiColorEditFlags
ColorEditOptionsPopup	imgui/imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorModifiers	imgui/imgui_internal.h	/^    ImVector<ImGuiColorMod> ColorModifiers;                     \/\/ Stack for PushStyleColor()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiColorMod>
ColorPicker3	imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorPicker4	imgui/imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float/;"	f	class:ImGui	typeref:typename:bool
ColorPickerOptionsPopup	imgui/imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorPickerRef	imgui/imgui_internal.h	/^    ImVec4                  ColorPickerRef;                     \/\/ Initial\/reference color at/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
ColorTooltip	imgui/imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Colors	imgui/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec4[]
Columns	imgui/imgui_internal.h	/^    ImVector<ImGuiColumnData> Columns;$/;"	m	struct:ImGuiColumns	typeref:typename:ImVector<ImGuiColumnData>
Columns	imgui/imgui_widgets.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui	typeref:typename:void
ColumnsMinSpacing	imgui/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns./;"	m	struct:ImGuiStyle	typeref:typename:float
ColumnsOffset	imgui/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if Column/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
ColumnsStorage	imgui/imgui_internal.h	/^    ImVector<ImGuiColumns>  ColumnsStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiColumns>
Combo	imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*items_getter)(void*, int, const c/;"	f	class:ImGui	typeref:typename:bool
Combo	imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_cou/;"	f	class:ImGui	typeref:typename:bool
Combo	imgui/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, in/;"	f	class:ImGui	typeref:typename:bool
CommandAllocator	imgui/examples/example_win32_directx12/main.cpp	/^    ID3D12CommandAllocator* CommandAllocator;$/;"	m	struct:FrameContext	typeref:typename:ID3D12CommandAllocator *	file:
CommandBuffer	imgui/examples/imgui_impl_vulkan.h	/^    VkCommandBuffer     CommandBuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkCommandBuffer
CommandPool	imgui/examples/imgui_impl_vulkan.h	/^    VkCommandPool       CommandPool;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkCommandPool
Commands	imgui/imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<const char * >	file:
ConfigData	imgui/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Internal data$/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontConfig>
ConfigData	imgui/imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Poi/;"	m	struct:ImFont	typeref:typename:const ImFontConfig *
ConfigDataCount	imgui/imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Num/;"	m	struct:ImFont	typeref:typename:short
ConfigFlags	imgui/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_/;"	m	struct:ImGuiIO	typeref:typename:ImGuiConfigFlags
ConfigInputTextCursorBlink	imgui/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Set to false to disab/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMacOSXBehaviors	imgui/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ OS X style: Text /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsMemoryCompactTimer	imgui/imgui.h	/^    float       ConfigWindowsMemoryCompactTimer;\/\/ = 60.0f          \/\/ [BETA] Compact window/;"	m	struct:ImGuiIO	typeref:typename:float
ConfigWindowsMoveFromTitleBarOnly	imgui/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly; \/\/ = false       \/\/ [BETA] Set to true to/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsResizeFromEdges	imgui/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of wi/;"	m	struct:ImGuiIO	typeref:typename:bool
Configuration	imgui/examples/example_allegro5/README.md	/^# Configuration$/;"	c
ContainerAtlas	imgui/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ Wha/;"	m	struct:ImFont	typeref:typename:ImFontAtlas *
Contains	imgui/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	imgui/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	imgui/imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Buf.Data && p < Buf.Data + Bu/;"	f	struct:ImPool	typeref:typename:bool
ContentRegionRect	imgui/imgui_internal.h	/^    ImRect                  ContentRegionRect;                  \/\/ FIXME: This is currently co/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ContentSize	imgui/imgui_internal.h	/^    ImVec2                  ContentSize;                        \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeExplicit	imgui/imgui_internal.h	/^    ImVec2                  ContentSizeExplicit;                \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeVal	imgui/imgui_internal.h	/^    ImVec2                      ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ContentWidth	imgui/imgui_internal.h	/^    float               ContentWidth;           \/\/ Width of actual contents, stored during Beg/;"	m	struct:ImGuiTabItem	typeref:typename:float
CornerPosN	imgui/imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
CornerPosN1	imgui/imgui.cpp	/^            ImVec2 CornerPosN1, CornerPosN2;$/;"	m	struct:ImGui::RenderWindowOuterBorders::ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
CornerPosN2	imgui/imgui.cpp	/^            ImVec2 CornerPosN1, CornerPosN2;$/;"	m	struct:ImGui::RenderWindowOuterBorders::ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
Count	imgui/examples/imgui_impl_vulkan.cpp	/^    uint32_t            Count;$/;"	m	struct:ImGui_ImplVulkanH_WindowRenderBuffers	typeref:typename:uint32_t	file:
Count	imgui/imgui.cpp	/^    ImU32           Count;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImU32	file:
Count	imgui/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiColumns	typeref:typename:int
CountGrep	imgui/imgui.h	/^    int                     CountGrep;$/;"	m	struct:ImGuiTextFilter	typeref:typename:int
CreateContext	imgui/imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
CreateDeviceD3D	imgui/examples/example_sdl_directx11/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	imgui/examples/example_win32_directx10/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	imgui/examples/example_win32_directx11/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	imgui/examples/example_win32_directx12/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateDeviceD3D	imgui/examples/example_win32_directx9/main.cpp	/^bool CreateDeviceD3D(HWND hWnd)$/;"	f	typeref:typename:bool
CreateNewWindow	imgui/imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImVec2 size, ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiWindow *	file:
CreateNewWindowSettings	imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
CreateOrResizeBuffer	imgui/examples/imgui_impl_vulkan.cpp	/^static void CreateOrResizeBuffer(VkBuffer& buffer, VkDeviceMemory& buffer_memory, VkDeviceSize& /;"	f	typeref:typename:void	file:
CreateRenderTarget	imgui/examples/example_sdl_directx11/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateRenderTarget	imgui/examples/example_win32_directx10/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateRenderTarget	imgui/examples/example_win32_directx11/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
CreateRenderTarget	imgui/examples/example_win32_directx12/main.cpp	/^void CreateRenderTarget()$/;"	f	typeref:typename:void
Credits	imgui/docs/README.md	/^Credits$/;"	s
CurLenA	imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurLenW	imgui/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurrFrameVisible	imgui/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
CurrLineSize	imgui/imgui_internal.h	/^    ImVec2                  CurrLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurrLineTextBaseOffset	imgui/imgui_internal.h	/^    float                   CurrLineTextBaseOffset; \/\/ Baseline offset (0.0f by default on a n/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
Current	imgui/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiColumns	typeref:typename:int
CurrentColumns	imgui/imgui_internal.h	/^    ImGuiColumns*           CurrentColumns;         \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiColumns *
CurrentSize	imgui/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
CurrentTabBar	imgui/imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTabBar *
CurrentTabBarStack	imgui/imgui_internal.h	/^    ImVector<ImGuiPtrOrIndex>       CurrentTabBarStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPtrOrIndex>
CurrentWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Window being drawn into$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
CurrentWindowStack	imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  CurrentWindowStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
CursorAnim	imgui/imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every /;"	m	struct:ImGuiInputTextState	typeref:typename:float
CursorAnimReset	imgui/imgui_internal.h	/^    void        CursorAnimReset()           { CursorAnim = -0.30f; }                            /;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorClamp	imgui/imgui_internal.h	/^    void        CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.selec/;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorFollow	imgui/imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow th/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
CursorMaxPos	imgui/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate the size o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPos	imgui/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
CursorPos	imgui/imgui_internal.h	/^    ImVec2                  CursorPos;              \/\/ Current emitting position, in absolute /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPosPrevLine	imgui/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPos	imgui/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position after Begin(), general/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurveTessellationTol	imgui/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCur/;"	m	struct:ImGuiStyle	typeref:typename:float
CurveTessellationTol	imgui/imgui_internal.h	/^    float           CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezie/;"	m	struct:ImDrawListSharedData	typeref:typename:float
CustomConstraints	imgui/imgui_demo.cpp	/^    struct CustomConstraints \/\/ Helper functions to demonstrate programmatic constraints$/;"	s	function:ShowExampleAppConstrainedResize	file:
CustomRect	imgui/imgui.h	/^    typedef ImFontAtlasCustomRect    CustomRect;         \/\/ OBSOLETED in 1.72+$/;"	t	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect
CustomRectIds	imgui/imgui.h	/^    int                         CustomRectIds[1];   \/\/ Identifiers of custom texture rectangle/;"	m	struct:ImFontAtlas	typeref:typename:int[1]
CustomRects	imgui/imgui.h	/^    ImVector<ImFontAtlasCustomRect> CustomRects;    \/\/ Rectangles for packing custom texture d/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontAtlasCustomRect>
D3DFVF_CUSTOMVERTEX	imgui/examples/imgui_impl_dx9.cpp	/^#define D3DFVF_CUSTOMVERTEX /;"	d	file:
DBT_DEVNODES_CHANGED	imgui/examples/imgui_impl_win32.cpp	/^#define DBT_DEVNODES_CHANGED /;"	d	file:
DC	imgui/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowTempData
DIRECTINPUT_VERSION	imgui/examples/example_win32_directx10/main.cpp	/^#define DIRECTINPUT_VERSION /;"	d	file:
DIRECTINPUT_VERSION	imgui/examples/example_win32_directx11/main.cpp	/^#define DIRECTINPUT_VERSION /;"	d	file:
DIRECTINPUT_VERSION	imgui/examples/example_win32_directx9/main.cpp	/^#define DIRECTINPUT_VERSION /;"	d	file:
DIRECTINPUT_VERSION	imgui/examples/imgui_impl_dx9.cpp	/^#define DIRECTINPUT_VERSION /;"	d	file:
Data	imgui/imgui.h	/^    ImVector<ImGuiStoragePair>      Data;$/;"	m	struct:ImGuiStorage	typeref:typename:ImVector<ImGuiStoragePair>
Data	imgui/imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector	typeref:typename:T *
Data	imgui/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload	typeref:typename:void *
DataFrameCount	imgui/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataSize	imgui/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataType	imgui/imgui.h	/^    char            DataType[32+1];     \/\/ Data type tag (short user-supplied string, 32 chara/;"	m	struct:ImGuiPayload	typeref:typename:char[]
DataTypeApplyOp	imgui/imgui_widgets.cpp	/^void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, void* arg1, const voi/;"	f	class:ImGui	typeref:typename:void
DataTypeApplyOpFromText	imgui/imgui_widgets.cpp	/^bool ImGui::DataTypeApplyOpFromText(const char* buf, const char* initial_value_buf, ImGuiDataTyp/;"	f	class:ImGui	typeref:typename:bool
DataTypeFormatString	imgui/imgui_widgets.cpp	/^int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_/;"	f	class:ImGui	typeref:typename:int
DataTypeGetInfo	imgui/imgui_widgets.cpp	/^const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataTypeInfo *
DeIndexAllBuffers	imgui/imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData	typeref:typename:void
DebugCheckVersionAndDataLayout	imgui/imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, s/;"	f	class:ImGui	typeref:typename:bool
DebugDrawItemRect	imgui/imgui_internal.h	/^    inline void             DebugDrawItemRect(ImU32 col = IM_COL32(255,0,0,255))    { ImGuiConte/;"	f	namespace:ImGui	typeref:typename:void
DebugItemPickerActive	imgui/imgui_internal.h	/^    bool                    DebugItemPickerActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugItemPickerBreakId	imgui/imgui_internal.h	/^    ImGuiID                 DebugItemPickerBreakId;             \/\/ Will call IM_DEBUG_BREAK() /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugStartItemPicker	imgui/imgui_internal.h	/^    inline void             DebugStartItemPicker()                                  { ImGuiConte/;"	f	namespace:ImGui	typeref:typename:void
DeclColumns	imgui/imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w0, float w1, float w2) \/\/ not using va_arg because /;"	f	class:ImGuiMenuColumns	typeref:typename:float
Decode85	imgui/imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	typeref:typename:void	file:
Decode85Byte	imgui/imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\'/;"	f	typeref:typename:unsigned int	file:
DeleteChars	imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
Delivery	imgui/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
DeltaTime	imgui/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since l/;"	m	struct:ImGuiIO	typeref:typename:float
Demo	imgui/docs/README.md	/^### Demo$/;"	S
DepthStencilState	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10DepthStencilState*    DepthStencilState;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10DepthStencilState *	file:
DepthStencilState	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11DepthStencilState*    DepthStencilState;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11DepthStencilState *	file:
Descender	imgui/misc/freetype/imgui_freetype.cpp	/^        float       Descender;          \/\/ The extents below the baseline in pixels (typically/;"	m	struct:__anon76bbacac0111::FontInfo	typeref:typename:float	file:
Descent	imgui/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
DescriptorPool	imgui/examples/imgui_impl_vulkan.h	/^    VkDescriptorPool    DescriptorPool;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDescriptorPool
DesiredSize	imgui/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Writ/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
DestroyContext	imgui/imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
Device	imgui/examples/imgui_impl_vulkan.h	/^    VkDevice            Device;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkDevice
DimBgRatio	imgui/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fad/;"	m	struct:ImGuiContext	typeref:typename:float
Dirty	imgui/imgui_demo.cpp	/^    bool        Dirty;          \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	typeref:typename:bool	file:
DirtyLookupTables	imgui/imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont	typeref:typename:bool
DisplayContents	imgui/imgui_demo.cpp	/^    static void DisplayContents(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayContextMenu	imgui/imgui_demo.cpp	/^    static void DisplayContextMenu(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayEnd	imgui/imgui.h	/^    int     DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayFramebufferScale	imgui/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayOffset	imgui/imgui.h	/^    ImVec2                      DisplayOffset;      \/\/ 8     \/\/ in  \/\/ = (0,0)    \/\/ Off/;"	m	struct:ImFont	typeref:typename:ImVec2
DisplayPos	imgui/imgui.h	/^    ImVec2          DisplayPos;             \/\/ Upper-left position of the viewport to render (/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySafeAreaPadding	imgui/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ If you cannot see the edges of your screen (e.g/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DisplaySize	imgui/imgui.h	/^    ImVec2          DisplaySize;            \/\/ Size of the viewport to render (== io.DisplaySi/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySize	imgui/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayStart	imgui/imgui.h	/^    int     DisplayStart, DisplayEnd;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayWindowPadding	imgui/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Window position are clamped to be visible withi/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DistAxial	imgui/imgui_internal.h	/^    float           DistAxial;$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:float
DistBox	imgui/imgui_internal.h	/^    float           DistBox;            \/\/ Best candidate box distance to current NavId$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:float
DistCenter	imgui/imgui_internal.h	/^    float           DistCenter;         \/\/ Best candidate center distance to current NavId$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:float
DoForceClose	imgui/imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoOpen	imgui/imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoQueueClose	imgui/imgui_demo.cpp	/^    void DoQueueClose() { WantClose = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoSave	imgui/imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
Documents	imgui/imgui_demo.cpp	/^    ImVector<MyDocument> Documents;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument>	file:
DragBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const vo/;"	f	class:ImGui	typeref:typename:bool
DragBehaviorT	imgui/imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, con/;"	f	class:ImGui	typeref:typename:bool
DragCurrentAccum	imgui/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging mo/;"	m	struct:ImGuiContext	typeref:typename:float
DragCurrentAccumDirty	imgui/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropAcceptFlags	imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropAcceptFrameCount	imgui/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expresse/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropAcceptIdCurr	imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropAcceptIdCurrRectSurface	imgui/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we res/;"	m	struct:ImGuiContext	typeref:typename:float
DragDropAcceptIdPrev	imgui/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previou/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropActive	imgui/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropMouseButton	imgui/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropPayload	imgui/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPayload
DragDropPayloadBufHeap	imgui/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVecto/;"	m	struct:ImGuiContext	typeref:typename:ImVector<unsigned char>
DragDropPayloadBufLocal	imgui/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[16];        \/\/ Local buffer for small payl/;"	m	struct:ImGuiContext	typeref:typename:unsigned char[16]
DragDropSourceFlags	imgui/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropSourceFrameCount	imgui/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropTargetId	imgui/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropTargetRect	imgui/imgui_internal.h	/^    ImRect                  DragDropTargetRect;                 \/\/ Store rectangle of current /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropWithinSourceOrTarget	imgui/imgui_internal.h	/^    bool                    DragDropWithinSourceOrTarget;       \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragFloat	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, cons/;"	f	class:ImGui	typeref:typename:bool
DragFloat2	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat3	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat4	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloatRange2	imgui/imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float/;"	f	class:ImGui	typeref:typename:bool
DragInt	imgui/imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* /;"	f	class:ImGui	typeref:typename:bool
DragInt2	imgui/imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt3	imgui/imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt4	imgui/imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragIntRange2	imgui/imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_spe/;"	f	class:ImGui	typeref:typename:bool
DragScalar	imgui/imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, /;"	f	class:ImGui	typeref:typename:bool
DragScalarN	imgui/imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components/;"	f	class:ImGui	typeref:typename:bool
DragSpeedDefaultRatio	imgui/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max/;"	m	struct:ImGuiContext	typeref:typename:float
Draw	imgui/imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
Draw	imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Draw	imgui/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
DrawData	imgui/imgui_internal.h	/^    ImDrawData              DrawData;                           \/\/ Main ImDrawData instance to/;"	m	struct:ImGuiContext	typeref:typename:ImDrawData
DrawDataBuilder	imgui/imgui_internal.h	/^    ImDrawDataBuilder       DrawDataBuilder;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawDataBuilder
DrawList	imgui/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backw/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList *
DrawListInst	imgui/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList
DrawListSharedData	imgui/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawListSharedData
DstFont	imgui/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig	typeref:typename:ImFont *
DstIndex	imgui/imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
DstIndex	imgui/misc/freetype/imgui_freetype.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:int	file:
Dummy	imgui/imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
ECHO_MESSAGE	imgui/examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui/examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui/examples/example_glfw_opengl2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	imgui/examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui/examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui/examples/example_glfw_opengl3/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	imgui/examples/example_glut_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui/examples/example_glut_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui/examples/example_glut_opengl2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	imgui/examples/example_null/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui/examples/example_null/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui/examples/example_null/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	imgui/examples/example_sdl_opengl2/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui/examples/example_sdl_opengl2/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui/examples/example_sdl_opengl2/Makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	imgui/examples/example_sdl_opengl3/Makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	imgui/examples/example_sdl_opengl3/Makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	imgui/examples/example_sdl_opengl3/Makefile	/^   ECHO_MESSAGE = "MinGW"$/;"	m
ECHO_MESSAGE	makefile	/^	ECHO_MESSAGE = "Linux"$/;"	m
ECHO_MESSAGE	makefile	/^	ECHO_MESSAGE = "Mac OS X"$/;"	m
ECHO_MESSAGE	makefile	/^	ECHO_MESSAGE = "MinGW"$/;"	m
EXE	imgui/examples/example_glfw_metal/Makefile	/^EXE = example_glfw_metal$/;"	m
EXE	imgui/examples/example_glfw_opengl2/Makefile	/^EXE = example_glfw_opengl2$/;"	m
EXE	imgui/examples/example_glfw_opengl3/Makefile	/^EXE = example_glfw_opengl3$/;"	m
EXE	imgui/examples/example_glut_opengl2/Makefile	/^EXE = example_glut_opengl2$/;"	m
EXE	imgui/examples/example_null/Makefile	/^EXE = example_null$/;"	m
EXE	imgui/examples/example_sdl_opengl2/Makefile	/^EXE = example_sdl_opengl2$/;"	m
EXE	imgui/examples/example_sdl_opengl3/Makefile	/^EXE = example_sdl_opengl3$/;"	m
EXE	makefile	/^EXE =  main.exe$/;"	m
EXTRA_WARNINGS	imgui/examples/example_null/Makefile	/^EXTRA_WARNINGS ?= 0$/;"	m
ElemCount	imgui/imgui.h	/^    unsigned int    ElemCount;              \/\/ Number of indices (multiple of 3) to be rendere/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
Element	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	g	function:ShowDemoWindowWidgets	file:
Element_Air	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_COUNT	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Earth	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Fire	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Water	imgui/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
EllipsisChar	imgui/imgui.h	/^    ImWchar                     EllipsisChar;       \/\/ 2     \/\/ out \/\/ = -1       \/\/ Cha/;"	m	struct:ImFont	typeref:typename:ImWchar
EllipsisChar	imgui/imgui.h	/^    ImWchar         EllipsisChar;           \/\/ -1       \/\/ Explicitly specify unicode codepo/;"	m	struct:ImFontConfig	typeref:typename:ImWchar
EmitItem	imgui/imgui_internal.h	/^    bool        EmitItem;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
EmptyString	imgui/imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	typeref:typename:char[1]
EmptyString	imgui/imgui.h	/^    IMGUI_API static char EmptyString[1];$/;"	m	struct:ImGuiTextBuffer	typeref:typename:IMGUI_API char[1]
Encode85Byte	imgui/misc/fonts/binary_to_compressed_c.cpp	/^char Encode85Byte(unsigned int x)$/;"	f	typeref:typename:char
End	imgui/imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui	typeref:typename:void
End	imgui/imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper	typeref:typename:void
EndChild	imgui/imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui	typeref:typename:void
EndChildFrame	imgui/imgui.cpp	/^void ImGui::EndChildFrame()$/;"	f	class:ImGui	typeref:typename:void
EndColumns	imgui/imgui_widgets.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui	typeref:typename:void
EndCombo	imgui/imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropSource	imgui/imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropTarget	imgui/imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui	typeref:typename:void
EndFrame	imgui/imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui	typeref:typename:void
EndGroup	imgui/imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui	typeref:typename:void
EndMainMenuBar	imgui/imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMenu	imgui/imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui	typeref:typename:void
EndMenuBar	imgui/imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndPopup	imgui/imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui	typeref:typename:void
EndTabBar	imgui/imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui	typeref:typename:void
EndTabItem	imgui/imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui	typeref:typename:void
EndTooltip	imgui/imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckBeginEndCompareStacksSize	imgui/imgui.cpp	/^static void ImGui::ErrorCheckBeginEndCompareStacksSize(ImGuiWindow* window, bool write)$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckEndFrame	imgui/imgui.cpp	/^static void ImGui::ErrorCheckEndFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
EventChar	imgui/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImWchar
EventFlag	imgui/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
EventKey	imgui/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-on/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiKey
ExampleAppConsole	imgui/imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
ExampleAppConsole	imgui/imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	imgui/imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments	file:
ExampleAppDocuments	imgui/imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	imgui/imgui_demo.cpp	/^    ExampleAppLog()$/;"	f	struct:ExampleAppLog	file:
ExampleAppLog	imgui/imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
ExecCommand	imgui/imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Expand	imgui/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max./;"	f	struct:ImRect	typeref:typename:void
Expand	imgui/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max./;"	f	struct:ImRect	typeref:typename:void
FAQ (Frequenty Asked Questions)	imgui/docs/FAQ.md	/^# FAQ (Frequenty Asked Questions)$/;"	c
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	imgui/imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	typeref:typename:const ImVec2[][3]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H      = 27;$/;"	v	typeref:typename:const int
FONT_ATLAS_DEFAULT_TEX_DATA_ID	imgui/imgui_draw.cpp	/^const unsigned int FONT_ATLAS_DEFAULT_TEX_DATA_ID = 0x80000000;$/;"	v	typeref:typename:const unsigned int
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	imgui/imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF * FONT_A/;"	v	typeref:typename:const char[]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF	imgui/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF = 108;$/;"	v	typeref:typename:const int
FT_CEIL	imgui/misc/freetype/imgui_freetype.cpp	/^    #define FT_CEIL(/;"	d	file:
Face	imgui/misc/freetype/imgui_freetype.cpp	/^        FT_Face         Face;$/;"	m	struct:__anon76bbacac0111::FreeTypeFont	typeref:typename:FT_Face	file:
FallbackAdvanceX	imgui/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->Ad/;"	m	struct:ImFont	typeref:typename:float
FallbackChar	imgui/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2     \/\/ in  \/\/ = '?'      \/\/ Rep/;"	m	struct:ImFont	typeref:typename:ImWchar
FallbackGlyph	imgui/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFal/;"	m	struct:ImFont	typeref:typename:const ImFontGlyph *
Fence	imgui/examples/imgui_impl_vulkan.h	/^    VkFence             Fence;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkFence
FenceValue	imgui/examples/example_win32_directx12/main.cpp	/^    UINT64                  FenceValue;$/;"	m	struct:FrameContext	typeref:typename:UINT64	file:
Filter	imgui/imgui_demo.cpp	/^    ImGuiTextFilter       Filter;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImGuiTextFilter	file:
Filter	imgui/imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextFilter	file:
FilterImGuiLetters	imgui/imgui_demo.cpp	/^            struct TextFilters { static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
Filters	imgui/imgui.h	/^    ImVector<ImGuiTextRange>Filters;$/;"	m	struct:ImGuiTextFilter	typeref:typename:ImVector<ImGuiTextRange>
FindBestWindowPosForPopup	imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
FindBestWindowPosForPopupEx	imgui/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* l/;"	f	class:ImGui	typeref:typename:ImVec2
FindGlyph	imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindGlyphNoFallback	imgui/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindHoveredWindow	imgui/imgui.cpp	/^static void FindHoveredWindow()$/;"	f	typeref:typename:void	file:
FindOrCreateColumns	imgui/imgui_widgets.cpp	/^ImGuiColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiColumns *
FindOrCreateWindowSettings	imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindOrCreateWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FindRenderedTextEnd	imgui/imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:const char *
FindSettingsHandler	imgui/imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:ImGuiSettingsHandler *
FindWindowByID	imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowByName	imgui/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowFocusIndex	imgui/imgui.cpp	/^static int ImGui::FindWindowFocusIndex(ImGuiWindow* window) \/\/ FIXME-OPT O(N)$/;"	f	class:ImGui	typeref:typename:int	file:
FindWindowNavFocusable	imgui/imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindWindowSettings	imgui/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettings(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
Flags	imgui/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust an/;"	m	struct:ImDrawList	typeref:typename:ImDrawListFlags
Flags	imgui/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas	typeref:typename:ImFontAtlasFlags
Flags	imgui/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
Flags	imgui/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;              \/\/ Not exposed$/;"	m	struct:ImGuiColumnData	typeref:typename:ImGuiColumnsFlags
Flags	imgui/imgui_internal.h	/^    ImGuiColumnsFlags   Flags;$/;"	m	struct:ImGuiColumns	typeref:typename:ImGuiColumnsFlags
Flags	imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags      Flags;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiNextItemDataFlags
Flags	imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags    Flags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiNextWindowDataFlags
Flags	imgui/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTabBarFlags
Flags	imgui/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiTabItemFlags
Flags	imgui/imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlattenIntoSingleLayer	imgui/imgui.cpp	/^void ImDrawDataBuilder::FlattenIntoSingleLayer()$/;"	f	class:ImDrawDataBuilder	typeref:typename:void
Floor	imgui/imgui_internal.h	/^    void        Floor()                             { Min.x = IM_FLOOR(Min.x); Min.y = IM_FLOOR(/;"	f	struct:ImRect	typeref:typename:void
FocusCounterRegular	imgui/imgui_internal.h	/^    int                     FocusCounterRegular;    \/\/ (Legacy Focus\/Tabbing system) Sequenti/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
FocusCounterTabStop	imgui/imgui_internal.h	/^    int                     FocusCounterTabStop;    \/\/ (Legacy Focus\/Tabbing system) Same, bu/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
FocusRequestCurrCounterRegular	imgui/imgui_internal.h	/^    int                     FocusRequestCurrCounterRegular;     \/\/ Any item being requested fo/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestCurrCounterTabStop	imgui/imgui_internal.h	/^    int                     FocusRequestCurrCounterTabStop;     \/\/ Tab item being requested fo/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestCurrWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            FocusRequestCurrWindow;             \/\/$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
FocusRequestNextCounterRegular	imgui/imgui_internal.h	/^    int                     FocusRequestNextCounterRegular;     \/\/ Stored for next frame$/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestNextCounterTabStop	imgui/imgui_internal.h	/^    int                     FocusRequestNextCounterTabStop;     \/\/ "$/;"	m	struct:ImGuiContext	typeref:typename:int
FocusRequestNextWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            FocusRequestNextWindow;             \/\/$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
FocusScopeId	imgui/imgui_internal.h	/^    ImGuiID                     FocusScopeId;   \/\/ Set by SetNextItemMultiSelectData() (!= 0 s/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiID
FocusScopeId	imgui/imgui_internal.h	/^    ImGuiID         FocusScopeId;       \/\/ Best candidate focus scope ID$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImGuiID
FocusTabPressed	imgui/imgui_internal.h	/^    bool                    FocusTabPressed;                    \/\/$/;"	m	struct:ImGuiContext	typeref:typename:bool
FocusTopMostWindowUnderOne	imgui/imgui.cpp	/^void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_windo/;"	f	class:ImGui	typeref:typename:void
FocusWindow	imgui/imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
FocusableItemRegister	imgui/imgui.cpp	/^bool ImGui::FocusableItemRegister(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
FocusableItemUnregister	imgui/imgui.cpp	/^void ImGui::FocusableItemUnregister(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Font	imgui/imgui.h	/^    ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImFont *
Font	imgui/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.emp/;"	m	struct:ImGuiContext	typeref:typename:ImFont *
Font	imgui/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simpli/;"	m	struct:ImDrawListSharedData	typeref:typename:ImFont *
Font	imgui/misc/freetype/imgui_freetype.cpp	/^    FreeTypeFont        Font;$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:FreeTypeFont	file:
FontAllowUserScaling	imgui/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling te/;"	m	struct:ImGuiIO	typeref:typename:bool
FontAtlasOwnedByContext	imgui/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ IO.Fonts-> is owned by the /;"	m	struct:ImGuiContext	typeref:typename:bool
FontBaseSize	imgui/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobal/;"	m	struct:ImGuiContext	typeref:typename:float
FontData	imgui/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig	typeref:typename:void *
FontDataOwnedByAtlas	imgui/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by /;"	m	struct:ImFontConfig	typeref:typename:bool
FontDataSize	imgui/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig	typeref:typename:int
FontDefault	imgui/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFra/;"	m	struct:ImGuiIO	typeref:typename:ImFont *
FontGlobalScale	imgui/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all font/;"	m	struct:ImGuiIO	typeref:typename:float
FontInfo	imgui/imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_fontinfo	file:
FontInfo	imgui/misc/freetype/imgui_freetype.cpp	/^    struct FontInfo$/;"	s	namespace:__anon76bbacac0111	file:
FontNo	imgui/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF fil/;"	m	struct:ImFontConfig	typeref:typename:int
FontSize	imgui/imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Hei/;"	m	struct:ImFont	typeref:typename:float
FontSize	imgui/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize /;"	m	struct:ImGuiContext	typeref:typename:float
FontSize	imgui/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for s/;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontStack	imgui/imgui_internal.h	/^    ImVector<ImFont*>       FontStack;                          \/\/ Stack for PushFont()\/PopFo/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImFont * >
FontWindowScale	imgui/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-w/;"	m	struct:ImGuiWindow	typeref:typename:float
Fonts	imgui/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Font atlas: load, ras/;"	m	struct:ImGuiIO	typeref:typename:ImFontAtlas *
Fonts	imgui/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFont * >
ForceAutoHint	imgui/misc/freetype/imgui_freetype.h	/^        ForceAutoHint   = 1 << 2,   \/\/ Indicates that the auto-hinter is preferred over the fo/;"	e	enum:ImGuiFreeType::RasterizerFlags
ForegroundDrawList	imgui/imgui_internal.h	/^    ImDrawList              ForegroundDrawList;                 \/\/ Last draw list to be render/;"	m	struct:ImGuiContext	typeref:typename:ImDrawList
FrameBorderSize	imgui/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally se/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameContext	imgui/examples/example_win32_directx12/main.cpp	/^struct FrameContext$/;"	s	file:
FrameCount	imgui/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountEnded	imgui/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountRendered	imgui/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameIndex	imgui/examples/imgui_impl_vulkan.h	/^    uint32_t            FrameIndex;             \/\/ Current frame being rendered to (0 <= Frame/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
FramePadding	imgui/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
FramePadding	imgui/imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of Be/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
FramePresent	imgui/examples/example_glfw_vulkan/main.cpp	/^static void FramePresent(ImGui_ImplVulkanH_Window* wd)$/;"	f	typeref:typename:void	file:
FramePresent	imgui/examples/example_sdl_vulkan/main.cpp	/^static void FramePresent(ImGui_ImplVulkanH_Window* wd)$/;"	f	typeref:typename:void	file:
FrameRender	imgui/examples/example_glfw_vulkan/main.cpp	/^static void FrameRender(ImGui_ImplVulkanH_Window* wd)$/;"	f	typeref:typename:void	file:
FrameRender	imgui/examples/example_sdl_vulkan/main.cpp	/^static void FrameRender(ImGui_ImplVulkanH_Window* wd)$/;"	f	typeref:typename:void	file:
FrameRenderBuffers	imgui/examples/imgui_impl_vulkan.cpp	/^    ImGui_ImplVulkanH_FrameRenderBuffers*   FrameRenderBuffers;$/;"	m	struct:ImGui_ImplVulkanH_WindowRenderBuffers	typeref:typename:ImGui_ImplVulkanH_FrameRenderBuffers *	file:
FrameResources	imgui/examples/imgui_impl_dx12.cpp	/^struct FrameResources$/;"	s	file:
FrameRounding	imgui/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameSemaphores	imgui/examples/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_FrameSemaphores*  FrameSemaphores;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:ImGui_ImplVulkanH_FrameSemaphores *
Framebuffer	imgui/examples/imgui_impl_vulkan.h	/^    VkFramebuffer       Framebuffer;$/;"	m	struct:ImGui_ImplVulkanH_Frame	typeref:typename:VkFramebuffer
FramebufferDescriptor	imgui/examples/imgui_impl_metal.mm	/^@implementation FramebufferDescriptor$/;"	I
FramebufferDescriptor	imgui/examples/imgui_impl_metal.mm	/^@interface FramebufferDescriptor : NSObject<NSCopying>$/;"	i	protocols:NSCopying
FramebufferScale	imgui/imgui.h	/^    ImVec2          FramebufferScale;       \/\/ Amount of pixels for each unit of DisplaySize. /;"	m	struct:ImDrawData	typeref:typename:ImVec2
Framerate	imgui/imgui.h	/^    float       Framerate;                      \/\/ Application framerate estimation, in frame /;"	m	struct:ImGuiIO	typeref:typename:float
FramerateSecPerFrame	imgui/imgui_internal.h	/^    float                   FramerateSecPerFrame[120];          \/\/ Calculate estimate of frame/;"	m	struct:ImGuiContext	typeref:typename:float[120]
FramerateSecPerFrameAccum	imgui/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext	typeref:typename:float
FramerateSecPerFrameIdx	imgui/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext	typeref:typename:int
Frames	imgui/examples/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_Frame*            Frames;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:ImGui_ImplVulkanH_Frame *
FreeIdx	imgui/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
FreeTypeFont	imgui/misc/freetype/imgui_freetype.cpp	/^    struct FreeTypeFont$/;"	s	namespace:__anon76bbacac0111	file:
FreeType_Alloc	imgui/misc/freetype/imgui_freetype.cpp	/^static void* FreeType_Alloc(FT_Memory \/*memory*\/, long size)$/;"	f	typeref:typename:void *	file:
FreeType_Free	imgui/misc/freetype/imgui_freetype.cpp	/^static void FreeType_Free(FT_Memory \/*memory*\/, void* block)$/;"	f	typeref:typename:void	file:
FreeType_Realloc	imgui/misc/freetype/imgui_freetype.cpp	/^static void* FreeType_Realloc(FT_Memory \/*memory*\/, long cur_size, long new_size, void* block)$/;"	f	typeref:typename:void *	file:
FreeWrapper	imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void	file:
FreeWrapper	imgui/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr);/;"	f	typeref:typename:void	file:
FuncHolder	imgui/imgui_demo.cpp	/^        struct FuncHolder { static bool ItemGetter(void* data, int idx, const char** out_str) { /;"	s	function:ShowDemoWindowWidgets	file:
Funcs	imgui/imgui.cpp	/^    struct Funcs$/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	imgui/imgui_demo.cpp	/^            struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	imgui/imgui_demo.cpp	/^        struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
GCrc32LookupTable	imgui/imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] =$/;"	v	typeref:typename:const ImU32[256]	file:
GDataTypeInfo	imgui/imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	typeref:typename:const ImGuiDataTypeInfo[]	file:
GImAllocatorAllocFunc	imgui/imgui.cpp	/^static void*  (*GImAllocatorAllocFunc)(size_t size, void* user_data) = MallocWrapper;$/;"	v	typeref:typename:void * (*)(size_t size,void * user_data)	file:
GImAllocatorFreeFunc	imgui/imgui.cpp	/^static void   (*GImAllocatorFreeFunc)(void* ptr, void* user_data) = FreeWrapper;$/;"	v	typeref:typename:void (*)(void * ptr,void * user_data)	file:
GImAllocatorUserData	imgui/imgui.cpp	/^static void*    GImAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImFreeTypeAllocFunc	imgui/misc/freetype/imgui_freetype.cpp	/^static void* (*GImFreeTypeAllocFunc)(size_t size, void* user_data) = ImFreeTypeDefaultAllocFunc;$/;"	v	typeref:typename:void * (*)(size_t size,void * user_data)	file:
GImFreeTypeAllocatorUserData	imgui/misc/freetype/imgui_freetype.cpp	/^static void* GImFreeTypeAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImFreeTypeFreeFunc	imgui/misc/freetype/imgui_freetype.cpp	/^static void  (*GImFreeTypeFreeFunc)(void* ptr, void* user_data) = ImFreeTypeDefaultFreeFunc;$/;"	v	typeref:typename:void (*)(void * ptr,void * user_data)	file:
GImGui	imgui/imgui.cpp	/^ImGuiContext*   GImGui = NULL;$/;"	v	typeref:typename:ImGuiContext *
GLAPI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GLAPI /;"	d
GLDEBUGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,GLvoid * userParam)
GLDEBUGPROCAMD	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length/;"	t	typeref:typename:void (APIENTRY *)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar * message,GLvoid * userParam)
GLDEBUGPROCARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsi/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,GLvoid * userParam)
GLEXT_64_TYPES_DEFINED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GLEXT_64_TYPES_DEFINED$/;"	d
GLFWAPI	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFWAPI /;"	d
GLFW_ACCUM_ALPHA_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_ALPHA_BITS /;"	d
GLFW_ACCUM_BLUE_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_BLUE_BITS /;"	d
GLFW_ACCUM_GREEN_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_GREEN_BITS /;"	d
GLFW_ACCUM_RED_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ACCUM_RED_BITS /;"	d
GLFW_ALPHA_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ALPHA_BITS /;"	d
GLFW_ANY_RELEASE_BEHAVIOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ANY_RELEASE_BEHAVIOR /;"	d
GLFW_API_UNAVAILABLE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_API_UNAVAILABLE /;"	d
GLFW_ARROW_CURSOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ARROW_CURSOR /;"	d
GLFW_AUTO_ICONIFY	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_AUTO_ICONIFY /;"	d
GLFW_AUX_BUFFERS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_AUX_BUFFERS /;"	d
GLFW_BLUE_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_BLUE_BITS /;"	d
GLFW_BUILD_DOCS	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_BUILD_DOCS "Build the GLFW documentation" OFF)$/;"	D
GLFW_BUILD_EXAMPLES	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_BUILD_EXAMPLES "Build the GLFW example programs" OFF)$/;"	D
GLFW_BUILD_TESTS	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_BUILD_TESTS "Build the GLFW test programs" OFF)$/;"	D
GLFW_CALLBACK_DEFINED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFW_CALLBACK_DEFINED$/;"	d
GLFW_CLIENT_API	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CLIENT_API /;"	d
GLFW_CONNECTED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONNECTED /;"	d
GLFW_CONTEXT_NO_ERROR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_NO_ERROR /;"	d
GLFW_CONTEXT_RELEASE_BEHAVIOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_RELEASE_BEHAVIOR /;"	d
GLFW_CONTEXT_REVISION	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_REVISION /;"	d
GLFW_CONTEXT_ROBUSTNESS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_ROBUSTNESS /;"	d
GLFW_CONTEXT_VERSION_MAJOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_VERSION_MAJOR /;"	d
GLFW_CONTEXT_VERSION_MINOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CONTEXT_VERSION_MINOR /;"	d
GLFW_CROSSHAIR_CURSOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CROSSHAIR_CURSOR /;"	d
GLFW_CURSOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR /;"	d
GLFW_CURSOR_DISABLED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_DISABLED /;"	d
GLFW_CURSOR_HIDDEN	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_HIDDEN /;"	d
GLFW_CURSOR_NORMAL	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_CURSOR_NORMAL /;"	d
GLFW_DECORATED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DECORATED /;"	d
GLFW_DEPTH_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DEPTH_BITS /;"	d
GLFW_DIR	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^set(GLFW_DIR ..\/..\/..\/glfw) # Set this to point to an up-to-date GLFW repo$/;"	v
GLFW_DISCONNECTED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DISCONNECTED /;"	d
GLFW_DOCUMENT_INTERNALS	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_DOCUMENT_INTERNALS "Include internals in documentation" OFF)$/;"	D
GLFW_DONT_CARE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DONT_CARE /;"	d
GLFW_DOUBLEBUFFER	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_DOUBLEBUFFER /;"	d
GLFW_EXPOSE_NATIVE_COCOA	imgui/examples/example_glfw_metal/main.mm	/^#define GLFW_EXPOSE_NATIVE_COCOA$/;"	M
GLFW_EXPOSE_NATIVE_WIN32	imgui/examples/imgui_impl_glfw.cpp	/^#define GLFW_EXPOSE_NATIVE_WIN32$/;"	d	file:
GLFW_FALSE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FALSE /;"	d
GLFW_FLOATING	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FLOATING /;"	d
GLFW_FOCUSED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FOCUSED /;"	d
GLFW_FORMAT_UNAVAILABLE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_FORMAT_UNAVAILABLE /;"	d
GLFW_GREEN_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_GREEN_BITS /;"	d
GLFW_HAND_CURSOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_HAND_CURSOR /;"	d
GLFW_HAS_NEW_CURSORS	imgui/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_NEW_CURSORS /;"	d	file:
GLFW_HAS_PER_MONITOR_DPI	imgui/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_PER_MONITOR_DPI /;"	d	file:
GLFW_HAS_VULKAN	imgui/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_VULKAN /;"	d	file:
GLFW_HAS_WINDOW_ALPHA	imgui/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_ALPHA /;"	d	file:
GLFW_HAS_WINDOW_HOVERED	imgui/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_HOVERED /;"	d	file:
GLFW_HAS_WINDOW_TOPMOST	imgui/examples/imgui_impl_glfw.cpp	/^#define GLFW_HAS_WINDOW_TOPMOST /;"	d	file:
GLFW_HRESIZE_CURSOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_HRESIZE_CURSOR /;"	d
GLFW_IBEAM_CURSOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_IBEAM_CURSOR /;"	d
GLFW_ICONIFIED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_ICONIFIED /;"	d
GLFW_INCLUDE_NONE	imGLsetup.h	/^#define GLFW_INCLUDE_NONE /;"	d
GLFW_INCLUDE_NONE	imgui/examples/example_glfw_metal/main.mm	/^#define GLFW_INCLUDE_NONE$/;"	M
GLFW_INCLUDE_NONE	imgui/examples/example_glfw_opengl3/main.cpp	/^#define GLFW_INCLUDE_NONE /;"	d	file:
GLFW_INCLUDE_NONE	imgui/examples/example_glfw_vulkan/main.cpp	/^#define GLFW_INCLUDE_NONE$/;"	d	file:
GLFW_INCLUDE_VULKAN	imgui/examples/example_glfw_vulkan/main.cpp	/^#define GLFW_INCLUDE_VULKAN$/;"	d	file:
GLFW_INSTALL	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^option(GLFW_INSTALL "Generate installation target" OFF)$/;"	D
GLFW_INVALID_ENUM	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_INVALID_ENUM /;"	d
GLFW_INVALID_VALUE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_INVALID_VALUE /;"	d
GLFW_JOYSTICK_1	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_1 /;"	d
GLFW_JOYSTICK_10	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_10 /;"	d
GLFW_JOYSTICK_11	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_11 /;"	d
GLFW_JOYSTICK_12	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_12 /;"	d
GLFW_JOYSTICK_13	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_13 /;"	d
GLFW_JOYSTICK_14	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_14 /;"	d
GLFW_JOYSTICK_15	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_15 /;"	d
GLFW_JOYSTICK_16	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_16 /;"	d
GLFW_JOYSTICK_2	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_2 /;"	d
GLFW_JOYSTICK_3	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_3 /;"	d
GLFW_JOYSTICK_4	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_4 /;"	d
GLFW_JOYSTICK_5	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_5 /;"	d
GLFW_JOYSTICK_6	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_6 /;"	d
GLFW_JOYSTICK_7	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_7 /;"	d
GLFW_JOYSTICK_8	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_8 /;"	d
GLFW_JOYSTICK_9	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_9 /;"	d
GLFW_JOYSTICK_LAST	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_JOYSTICK_LAST /;"	d
GLFW_KEY_0	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_0 /;"	d
GLFW_KEY_1	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_1 /;"	d
GLFW_KEY_2	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_2 /;"	d
GLFW_KEY_3	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_3 /;"	d
GLFW_KEY_4	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_4 /;"	d
GLFW_KEY_5	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_5 /;"	d
GLFW_KEY_6	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_6 /;"	d
GLFW_KEY_7	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_7 /;"	d
GLFW_KEY_8	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_8 /;"	d
GLFW_KEY_9	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_9 /;"	d
GLFW_KEY_A	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_A /;"	d
GLFW_KEY_APOSTROPHE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_APOSTROPHE /;"	d
GLFW_KEY_B	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_B /;"	d
GLFW_KEY_BACKSLASH	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_BACKSLASH /;"	d
GLFW_KEY_BACKSPACE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_BACKSPACE /;"	d
GLFW_KEY_C	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_C /;"	d
GLFW_KEY_CAPS_LOCK	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_CAPS_LOCK /;"	d
GLFW_KEY_COMMA	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_COMMA /;"	d
GLFW_KEY_D	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_D /;"	d
GLFW_KEY_DELETE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_DELETE /;"	d
GLFW_KEY_DOWN	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_DOWN /;"	d
GLFW_KEY_E	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_E /;"	d
GLFW_KEY_END	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_END /;"	d
GLFW_KEY_ENTER	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_ENTER /;"	d
GLFW_KEY_EQUAL	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_EQUAL /;"	d
GLFW_KEY_ESCAPE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_ESCAPE /;"	d
GLFW_KEY_F	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F /;"	d
GLFW_KEY_F1	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F1 /;"	d
GLFW_KEY_F10	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F10 /;"	d
GLFW_KEY_F11	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F11 /;"	d
GLFW_KEY_F12	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F12 /;"	d
GLFW_KEY_F13	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F13 /;"	d
GLFW_KEY_F14	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F14 /;"	d
GLFW_KEY_F15	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F15 /;"	d
GLFW_KEY_F16	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F16 /;"	d
GLFW_KEY_F17	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F17 /;"	d
GLFW_KEY_F18	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F18 /;"	d
GLFW_KEY_F19	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F19 /;"	d
GLFW_KEY_F2	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F2 /;"	d
GLFW_KEY_F20	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F20 /;"	d
GLFW_KEY_F21	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F21 /;"	d
GLFW_KEY_F22	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F22 /;"	d
GLFW_KEY_F23	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F23 /;"	d
GLFW_KEY_F24	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F24 /;"	d
GLFW_KEY_F25	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F25 /;"	d
GLFW_KEY_F3	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F3 /;"	d
GLFW_KEY_F4	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F4 /;"	d
GLFW_KEY_F5	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F5 /;"	d
GLFW_KEY_F6	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F6 /;"	d
GLFW_KEY_F7	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F7 /;"	d
GLFW_KEY_F8	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F8 /;"	d
GLFW_KEY_F9	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_F9 /;"	d
GLFW_KEY_G	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_G /;"	d
GLFW_KEY_GRAVE_ACCENT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_GRAVE_ACCENT /;"	d
GLFW_KEY_H	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_H /;"	d
GLFW_KEY_HOME	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_HOME /;"	d
GLFW_KEY_I	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_I /;"	d
GLFW_KEY_INSERT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_INSERT /;"	d
GLFW_KEY_J	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_J /;"	d
GLFW_KEY_K	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_K /;"	d
GLFW_KEY_KP_0	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_0 /;"	d
GLFW_KEY_KP_1	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_1 /;"	d
GLFW_KEY_KP_2	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_2 /;"	d
GLFW_KEY_KP_3	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_3 /;"	d
GLFW_KEY_KP_4	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_4 /;"	d
GLFW_KEY_KP_5	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_5 /;"	d
GLFW_KEY_KP_6	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_6 /;"	d
GLFW_KEY_KP_7	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_7 /;"	d
GLFW_KEY_KP_8	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_8 /;"	d
GLFW_KEY_KP_9	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_9 /;"	d
GLFW_KEY_KP_ADD	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_ADD /;"	d
GLFW_KEY_KP_DECIMAL	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_DECIMAL /;"	d
GLFW_KEY_KP_DIVIDE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_DIVIDE /;"	d
GLFW_KEY_KP_ENTER	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_ENTER /;"	d
GLFW_KEY_KP_EQUAL	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_EQUAL /;"	d
GLFW_KEY_KP_MULTIPLY	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_MULTIPLY /;"	d
GLFW_KEY_KP_SUBTRACT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_KP_SUBTRACT /;"	d
GLFW_KEY_L	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_L /;"	d
GLFW_KEY_LAST	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LAST /;"	d
GLFW_KEY_LEFT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT /;"	d
GLFW_KEY_LEFT_ALT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_ALT /;"	d
GLFW_KEY_LEFT_BRACKET	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_BRACKET /;"	d
GLFW_KEY_LEFT_CONTROL	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_CONTROL /;"	d
GLFW_KEY_LEFT_SHIFT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_SHIFT /;"	d
GLFW_KEY_LEFT_SUPER	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_LEFT_SUPER /;"	d
GLFW_KEY_M	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_M /;"	d
GLFW_KEY_MENU	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_MENU /;"	d
GLFW_KEY_MINUS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_MINUS /;"	d
GLFW_KEY_N	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_N /;"	d
GLFW_KEY_NUM_LOCK	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_NUM_LOCK /;"	d
GLFW_KEY_O	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_O /;"	d
GLFW_KEY_P	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_P /;"	d
GLFW_KEY_PAGE_DOWN	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAGE_DOWN /;"	d
GLFW_KEY_PAGE_UP	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAGE_UP /;"	d
GLFW_KEY_PAUSE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PAUSE /;"	d
GLFW_KEY_PERIOD	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PERIOD /;"	d
GLFW_KEY_PRINT_SCREEN	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_PRINT_SCREEN /;"	d
GLFW_KEY_Q	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Q /;"	d
GLFW_KEY_R	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_R /;"	d
GLFW_KEY_RIGHT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT /;"	d
GLFW_KEY_RIGHT_ALT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_ALT /;"	d
GLFW_KEY_RIGHT_BRACKET	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_BRACKET /;"	d
GLFW_KEY_RIGHT_CONTROL	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_CONTROL /;"	d
GLFW_KEY_RIGHT_SHIFT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_SHIFT /;"	d
GLFW_KEY_RIGHT_SUPER	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_RIGHT_SUPER /;"	d
GLFW_KEY_S	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_S /;"	d
GLFW_KEY_SCROLL_LOCK	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SCROLL_LOCK /;"	d
GLFW_KEY_SEMICOLON	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SEMICOLON /;"	d
GLFW_KEY_SLASH	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SLASH /;"	d
GLFW_KEY_SPACE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_SPACE /;"	d
GLFW_KEY_T	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_T /;"	d
GLFW_KEY_TAB	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_TAB /;"	d
GLFW_KEY_U	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_U /;"	d
GLFW_KEY_UNKNOWN	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_UNKNOWN /;"	d
GLFW_KEY_UP	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_UP /;"	d
GLFW_KEY_V	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_V /;"	d
GLFW_KEY_W	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_W /;"	d
GLFW_KEY_WORLD_1	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_WORLD_1 /;"	d
GLFW_KEY_WORLD_2	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_WORLD_2 /;"	d
GLFW_KEY_X	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_X /;"	d
GLFW_KEY_Y	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Y /;"	d
GLFW_KEY_Z	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_KEY_Z /;"	d
GLFW_LOSE_CONTEXT_ON_RESET	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_LOSE_CONTEXT_ON_RESET /;"	d
GLFW_MAXIMIZED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MAXIMIZED /;"	d
GLFW_MOD_ALT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_ALT /;"	d
GLFW_MOD_CONTROL	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_CONTROL /;"	d
GLFW_MOD_SHIFT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_SHIFT /;"	d
GLFW_MOD_SUPER	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOD_SUPER /;"	d
GLFW_MOUSE_BUTTON_1	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_1 /;"	d
GLFW_MOUSE_BUTTON_2	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_2 /;"	d
GLFW_MOUSE_BUTTON_3	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_3 /;"	d
GLFW_MOUSE_BUTTON_4	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_4 /;"	d
GLFW_MOUSE_BUTTON_5	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_5 /;"	d
GLFW_MOUSE_BUTTON_6	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_6 /;"	d
GLFW_MOUSE_BUTTON_7	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_7 /;"	d
GLFW_MOUSE_BUTTON_8	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_8 /;"	d
GLFW_MOUSE_BUTTON_LAST	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_LAST /;"	d
GLFW_MOUSE_BUTTON_LEFT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_LEFT /;"	d
GLFW_MOUSE_BUTTON_MIDDLE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_MIDDLE /;"	d
GLFW_MOUSE_BUTTON_RIGHT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_MOUSE_BUTTON_RIGHT /;"	d
GLFW_NOT_INITIALIZED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NOT_INITIALIZED /;"	d
GLFW_NO_API	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_API /;"	d
GLFW_NO_CURRENT_CONTEXT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_CURRENT_CONTEXT /;"	d
GLFW_NO_RESET_NOTIFICATION	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_RESET_NOTIFICATION /;"	d
GLFW_NO_ROBUSTNESS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_ROBUSTNESS /;"	d
GLFW_NO_WINDOW_CONTEXT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_NO_WINDOW_CONTEXT /;"	d
GLFW_OPENGL_ANY_PROFILE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_ANY_PROFILE /;"	d
GLFW_OPENGL_API	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_API /;"	d
GLFW_OPENGL_COMPAT_PROFILE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_COMPAT_PROFILE /;"	d
GLFW_OPENGL_CORE_PROFILE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_CORE_PROFILE /;"	d
GLFW_OPENGL_DEBUG_CONTEXT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_DEBUG_CONTEXT /;"	d
GLFW_OPENGL_ES_API	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_ES_API /;"	d
GLFW_OPENGL_FORWARD_COMPAT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_FORWARD_COMPAT /;"	d
GLFW_OPENGL_PROFILE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OPENGL_PROFILE /;"	d
GLFW_OUT_OF_MEMORY	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_OUT_OF_MEMORY /;"	d
GLFW_PLATFORM_ERROR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_PLATFORM_ERROR /;"	d
GLFW_PRESS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_PRESS /;"	d
GLFW_RED_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RED_BITS /;"	d
GLFW_REFRESH_RATE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_REFRESH_RATE /;"	d
GLFW_RELEASE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE /;"	d
GLFW_RELEASE_BEHAVIOR_FLUSH	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE_BEHAVIOR_FLUSH /;"	d
GLFW_RELEASE_BEHAVIOR_NONE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RELEASE_BEHAVIOR_NONE /;"	d
GLFW_REPEAT	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_REPEAT /;"	d
GLFW_RESIZABLE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_RESIZABLE /;"	d
GLFW_SAMPLES	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_SAMPLES /;"	d
GLFW_SRGB_CAPABLE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_SRGB_CAPABLE /;"	d
GLFW_STENCIL_BITS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STENCIL_BITS /;"	d
GLFW_STEREO	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STEREO /;"	d
GLFW_STICKY_KEYS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STICKY_KEYS /;"	d
GLFW_STICKY_MOUSE_BUTTONS	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_STICKY_MOUSE_BUTTONS /;"	d
GLFW_TRUE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_TRUE /;"	d
GLFW_VERSION_MAJOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_MAJOR /;"	d
GLFW_VERSION_MINOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_MINOR /;"	d
GLFW_VERSION_REVISION	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_REVISION /;"	d
GLFW_VERSION_UNAVAILABLE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VERSION_UNAVAILABLE /;"	d
GLFW_VISIBLE	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VISIBLE /;"	d
GLFW_VRESIZE_CURSOR	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define GLFW_VRESIZE_CURSOR /;"	d
GLFW_WINGDIAPI_DEFINED	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define GLFW_WINGDIAPI_DEFINED$/;"	d
GLFWcharfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,unsigned int)
GLFWcharmodsfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,unsigned int,int)
GLFWcursor	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWcursor GLFWcursor;$/;"	t	typeref:struct:GLFWcursor
GLFWcursorenterfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorenterfun)(GLFWwindow*,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int)
GLFWcursorposfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double);$/;"	t	typeref:typename:void (*)(GLFWwindow *,double,double)
GLFWdropfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWdropfun)(GLFWwindow*,int,const char**);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,const char **)
GLFWerrorfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWerrorfun)(int,const char*);$/;"	t	typeref:typename:void (*)(int,const char *)
GLFWframebuffersizefun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int)
GLFWgammaramp	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWgammaramp$/;"	s
GLFWgammaramp	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWgammaramp;$/;"	t	typeref:struct:GLFWgammaramp
GLFWglproc	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (*GLFWglproc)(void);$/;"	t	typeref:typename:void (*)(void)
GLFWimage	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWimage$/;"	s
GLFWimage	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWimage;$/;"	t	typeref:struct:GLFWimage
GLFWjoystickfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWjoystickfun)(int,int);$/;"	t	typeref:typename:void (*)(int,int)
GLFWkeyfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int,int,int)
GLFWmonitor	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWmonitor GLFWmonitor;$/;"	t	typeref:struct:GLFWmonitor
GLFWmonitorfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWmonitorfun)(GLFWmonitor*,int);$/;"	t	typeref:typename:void (*)(GLFWmonitor *,int)
GLFWmousebuttonfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int,int)
GLFWscrollfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWscrollfun)(GLFWwindow*,double,double);$/;"	t	typeref:typename:void (*)(GLFWwindow *,double,double)
GLFWvidmode	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWvidmode$/;"	s
GLFWvidmode	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^} GLFWvidmode;$/;"	t	typeref:struct:GLFWvidmode
GLFWvkproc	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (*GLFWvkproc)(void);$/;"	t	typeref:typename:void (*)(void)
GLFWwindow	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef struct GLFWwindow GLFWwindow;$/;"	t	typeref:struct:GLFWwindow
GLFWwindowclosefun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowclosefun)(GLFWwindow*);$/;"	t	typeref:typename:void (*)(GLFWwindow *)
GLFWwindowfocusfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int)
GLFWwindowiconifyfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int)
GLFWwindowposfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int)
GLFWwindowrefreshfun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowrefreshfun)(GLFWwindow*);$/;"	t	typeref:typename:void (*)(GLFWwindow *)
GLFWwindowsizefun	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int);$/;"	t	typeref:typename:void (*)(GLFWwindow *,int,int)
GL_ACTIVE_ATOMIC_COUNTER_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS /;"	d
GL_ACTIVE_ATTRIBUTES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_ATTRIBUTES /;"	d
GL_ACTIVE_ATTRIBUTE_MAX_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH /;"	d
GL_ACTIVE_PROGRAM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_PROGRAM /;"	d
GL_ACTIVE_RESOURCES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_RESOURCES /;"	d
GL_ACTIVE_SUBROUTINES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINES /;"	d
GL_ACTIVE_SUBROUTINE_MAX_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINE_MAX_LENGTH /;"	d
GL_ACTIVE_SUBROUTINE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINE_UNIFORMS /;"	d
GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS /;"	d
GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH /;"	d
GL_ACTIVE_TEXTURE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_TEXTURE /;"	d
GL_ACTIVE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_UNIFORMS /;"	d
GL_ACTIVE_UNIFORM_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_UNIFORM_BLOCKS /;"	d
GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH /;"	d
GL_ACTIVE_UNIFORM_MAX_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_UNIFORM_MAX_LENGTH /;"	d
GL_ACTIVE_VARIABLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ACTIVE_VARIABLES /;"	d
GL_ALIASED_LINE_WIDTH_RANGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALIASED_LINE_WIDTH_RANGE /;"	d
GL_ALL_BARRIER_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALL_BARRIER_BITS /;"	d
GL_ALL_SHADER_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALL_SHADER_BITS /;"	d
GL_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALPHA /;"	d
GL_ALREADY_SIGNALED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALREADY_SIGNALED /;"	d
GL_ALWAYS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ALWAYS /;"	d
GL_AND	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_AND /;"	d
GL_AND_INVERTED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_AND_INVERTED /;"	d
GL_AND_REVERSE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_AND_REVERSE /;"	d
GL_ANY_SAMPLES_PASSED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ANY_SAMPLES_PASSED /;"	d
GL_ANY_SAMPLES_PASSED_CONSERVATIVE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ANY_SAMPLES_PASSED_CONSERVATIVE /;"	d
GL_ARB_ES2_compatibility	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_ES2_compatibility /;"	d
GL_ARB_ES3_compatibility	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_ES3_compatibility /;"	d
GL_ARB_arrays_of_arrays	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_arrays_of_arrays /;"	d
GL_ARB_base_instance	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_base_instance /;"	d
GL_ARB_blend_func_extended	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_blend_func_extended /;"	d
GL_ARB_cl_event	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_cl_event /;"	d
GL_ARB_clear_buffer_object	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_clear_buffer_object /;"	d
GL_ARB_compressed_texture_pixel_storage	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_compressed_texture_pixel_storage /;"	d
GL_ARB_compute_shader	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_compute_shader /;"	d
GL_ARB_conservative_depth	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_conservative_depth /;"	d
GL_ARB_copy_buffer	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_copy_buffer /;"	d
GL_ARB_copy_image	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_copy_image /;"	d
GL_ARB_debug_output	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_debug_output /;"	d
GL_ARB_depth_buffer_float	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_depth_buffer_float /;"	d
GL_ARB_depth_clamp	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_depth_clamp /;"	d
GL_ARB_draw_buffers_blend	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_draw_buffers_blend /;"	d
GL_ARB_draw_elements_base_vertex	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_draw_elements_base_vertex /;"	d
GL_ARB_draw_indirect	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_draw_indirect /;"	d
GL_ARB_explicit_attrib_location	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_explicit_attrib_location /;"	d
GL_ARB_explicit_uniform_location	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_explicit_uniform_location /;"	d
GL_ARB_fragment_coord_conventions	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_fragment_coord_conventions /;"	d
GL_ARB_fragment_layer_viewport	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_fragment_layer_viewport /;"	d
GL_ARB_framebuffer_no_attachments	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_framebuffer_no_attachments /;"	d
GL_ARB_framebuffer_object	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_framebuffer_object /;"	d
GL_ARB_framebuffer_sRGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_framebuffer_sRGB /;"	d
GL_ARB_get_program_binary	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_get_program_binary /;"	d
GL_ARB_gpu_shader5	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_gpu_shader5 /;"	d
GL_ARB_gpu_shader_fp64	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_gpu_shader_fp64 /;"	d
GL_ARB_half_float_vertex	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_half_float_vertex /;"	d
GL_ARB_internalformat_query	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_internalformat_query /;"	d
GL_ARB_internalformat_query2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_internalformat_query2 /;"	d
GL_ARB_invalidate_subdata	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_invalidate_subdata /;"	d
GL_ARB_map_buffer_alignment	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_map_buffer_alignment /;"	d
GL_ARB_map_buffer_range	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_map_buffer_range /;"	d
GL_ARB_multi_draw_indirect	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_multi_draw_indirect /;"	d
GL_ARB_occlusion_query2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_occlusion_query2 /;"	d
GL_ARB_program_interface_query	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_program_interface_query /;"	d
GL_ARB_provoking_vertex	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_provoking_vertex /;"	d
GL_ARB_robust_buffer_access_behavior	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_robust_buffer_access_behavior /;"	d
GL_ARB_robustness	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_robustness /;"	d
GL_ARB_robustness_isolation	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_robustness_isolation /;"	d
GL_ARB_sample_shading	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_sample_shading /;"	d
GL_ARB_sampler_objects	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_sampler_objects /;"	d
GL_ARB_seamless_cube_map	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_seamless_cube_map /;"	d
GL_ARB_separate_shader_objects	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_separate_shader_objects /;"	d
GL_ARB_shader_atomic_counters	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_atomic_counters /;"	d
GL_ARB_shader_bit_encoding	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_bit_encoding /;"	d
GL_ARB_shader_image_load_store	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_image_load_store /;"	d
GL_ARB_shader_image_size	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_image_size /;"	d
GL_ARB_shader_stencil_export	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_stencil_export /;"	d
GL_ARB_shader_storage_buffer_object	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_storage_buffer_object /;"	d
GL_ARB_shader_subroutine	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shader_subroutine /;"	d
GL_ARB_shading_language_420pack	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shading_language_420pack /;"	d
GL_ARB_shading_language_include	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shading_language_include /;"	d
GL_ARB_shading_language_packing	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_shading_language_packing /;"	d
GL_ARB_stencil_texturing	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_stencil_texturing /;"	d
GL_ARB_sync	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_sync /;"	d
GL_ARB_tessellation_shader	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_tessellation_shader /;"	d
GL_ARB_texture_buffer_object_rgb32	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_buffer_object_rgb32 /;"	d
GL_ARB_texture_buffer_range	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_buffer_range /;"	d
GL_ARB_texture_compression_bptc	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_compression_bptc /;"	d
GL_ARB_texture_compression_rgtc	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_compression_rgtc /;"	d
GL_ARB_texture_cube_map_array	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_cube_map_array /;"	d
GL_ARB_texture_gather	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_gather /;"	d
GL_ARB_texture_multisample	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_multisample /;"	d
GL_ARB_texture_query_levels	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_query_levels /;"	d
GL_ARB_texture_query_lod	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_query_lod /;"	d
GL_ARB_texture_rg	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_rg /;"	d
GL_ARB_texture_rgb10_a2ui	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_rgb10_a2ui /;"	d
GL_ARB_texture_storage	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_storage /;"	d
GL_ARB_texture_storage_multisample	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_storage_multisample /;"	d
GL_ARB_texture_swizzle	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_swizzle /;"	d
GL_ARB_texture_view	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_texture_view /;"	d
GL_ARB_timer_query	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_timer_query /;"	d
GL_ARB_transform_feedback2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_transform_feedback2 /;"	d
GL_ARB_transform_feedback3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_transform_feedback3 /;"	d
GL_ARB_transform_feedback_instanced	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_transform_feedback_instanced /;"	d
GL_ARB_uniform_buffer_object	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_uniform_buffer_object /;"	d
GL_ARB_vertex_array_bgra	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_array_bgra /;"	d
GL_ARB_vertex_array_object	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_array_object /;"	d
GL_ARB_vertex_attrib_64bit	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_attrib_64bit /;"	d
GL_ARB_vertex_attrib_binding	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_attrib_binding /;"	d
GL_ARB_vertex_type_2_10_10_10_rev	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_vertex_type_2_10_10_10_rev /;"	d
GL_ARB_viewport_array	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARB_viewport_array /;"	d
GL_ARRAY_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARRAY_BUFFER /;"	d
GL_ARRAY_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARRAY_BUFFER_BINDING /;"	d
GL_ARRAY_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARRAY_SIZE /;"	d
GL_ARRAY_STRIDE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ARRAY_STRIDE /;"	d
GL_ATOMIC_COUNTER_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BARRIER_BIT /;"	d
GL_ATOMIC_COUNTER_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER /;"	d
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS /;"	d
GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES /;"	d
GL_ATOMIC_COUNTER_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_BINDING /;"	d
GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE /;"	d
GL_ATOMIC_COUNTER_BUFFER_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_INDEX /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER /;"	d
GL_ATOMIC_COUNTER_BUFFER_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_SIZE /;"	d
GL_ATOMIC_COUNTER_BUFFER_START	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATOMIC_COUNTER_BUFFER_START /;"	d
GL_ATTACHED_SHADERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ATTACHED_SHADERS /;"	d
GL_AUTO_GENERATE_MIPMAP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_AUTO_GENERATE_MIPMAP /;"	d
GL_BACK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BACK /;"	d
GL_BACK_LEFT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BACK_LEFT /;"	d
GL_BACK_RIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BACK_RIGHT /;"	d
GL_BGR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BGR /;"	d
GL_BGRA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BGRA /;"	d
GL_BGRA_INTEGER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BGRA_INTEGER /;"	d
GL_BGR_INTEGER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BGR_INTEGER /;"	d
GL_BLEND	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND /;"	d
GL_BLEND_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_COLOR /;"	d
GL_BLEND_DST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_DST /;"	d
GL_BLEND_DST_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_DST_ALPHA /;"	d
GL_BLEND_DST_RGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_DST_RGB /;"	d
GL_BLEND_EQUATION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_EQUATION /;"	d
GL_BLEND_EQUATION_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_EQUATION_ALPHA /;"	d
GL_BLEND_EQUATION_RGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_EQUATION_RGB /;"	d
GL_BLEND_SRC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_SRC /;"	d
GL_BLEND_SRC_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_SRC_ALPHA /;"	d
GL_BLEND_SRC_RGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLEND_SRC_RGB /;"	d
GL_BLOCK_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLOCK_INDEX /;"	d
GL_BLUE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLUE /;"	d
GL_BLUE_INTEGER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BLUE_INTEGER /;"	d
GL_BOOL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BOOL /;"	d
GL_BOOL_VEC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BOOL_VEC2 /;"	d
GL_BOOL_VEC3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BOOL_VEC3 /;"	d
GL_BOOL_VEC4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BOOL_VEC4 /;"	d
GL_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER /;"	d
GL_BUFFER_ACCESS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_ACCESS /;"	d
GL_BUFFER_ACCESS_FLAGS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_ACCESS_FLAGS /;"	d
GL_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_BINDING /;"	d
GL_BUFFER_DATA_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_DATA_SIZE /;"	d
GL_BUFFER_MAPPED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_MAPPED /;"	d
GL_BUFFER_MAP_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_MAP_LENGTH /;"	d
GL_BUFFER_MAP_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_MAP_OFFSET /;"	d
GL_BUFFER_MAP_POINTER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_MAP_POINTER /;"	d
GL_BUFFER_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_SIZE /;"	d
GL_BUFFER_UPDATE_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_UPDATE_BARRIER_BIT /;"	d
GL_BUFFER_USAGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_USAGE /;"	d
GL_BUFFER_VARIABLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BUFFER_VARIABLE /;"	d
GL_BYTE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_BYTE /;"	d
GL_CAVEAT_SUPPORT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CAVEAT_SUPPORT /;"	d
GL_CCW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CCW /;"	d
GL_CLAMP_READ_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLAMP_READ_COLOR /;"	d
GL_CLAMP_TO_BORDER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLAMP_TO_BORDER /;"	d
GL_CLAMP_TO_EDGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLAMP_TO_EDGE /;"	d
GL_CLEAR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLEAR /;"	d
GL_CLEAR_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLEAR_BUFFER /;"	d
GL_CLIP_DISTANCE0	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE0 /;"	d
GL_CLIP_DISTANCE1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE1 /;"	d
GL_CLIP_DISTANCE2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE2 /;"	d
GL_CLIP_DISTANCE3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE3 /;"	d
GL_CLIP_DISTANCE4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE4 /;"	d
GL_CLIP_DISTANCE5	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE5 /;"	d
GL_CLIP_DISTANCE6	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE6 /;"	d
GL_CLIP_DISTANCE7	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CLIP_DISTANCE7 /;"	d
GL_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR /;"	d
GL_COLOR_ATTACHMENT0	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT0 /;"	d
GL_COLOR_ATTACHMENT1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT1 /;"	d
GL_COLOR_ATTACHMENT10	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT10 /;"	d
GL_COLOR_ATTACHMENT11	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT11 /;"	d
GL_COLOR_ATTACHMENT12	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT12 /;"	d
GL_COLOR_ATTACHMENT13	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT13 /;"	d
GL_COLOR_ATTACHMENT14	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT14 /;"	d
GL_COLOR_ATTACHMENT15	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT15 /;"	d
GL_COLOR_ATTACHMENT2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT2 /;"	d
GL_COLOR_ATTACHMENT3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT3 /;"	d
GL_COLOR_ATTACHMENT4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT4 /;"	d
GL_COLOR_ATTACHMENT5	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT5 /;"	d
GL_COLOR_ATTACHMENT6	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT6 /;"	d
GL_COLOR_ATTACHMENT7	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT7 /;"	d
GL_COLOR_ATTACHMENT8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT8 /;"	d
GL_COLOR_ATTACHMENT9	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ATTACHMENT9 /;"	d
GL_COLOR_BUFFER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_BUFFER_BIT /;"	d
GL_COLOR_CLEAR_VALUE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_CLEAR_VALUE /;"	d
GL_COLOR_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_COMPONENTS /;"	d
GL_COLOR_ENCODING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_ENCODING /;"	d
GL_COLOR_LOGIC_OP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_LOGIC_OP /;"	d
GL_COLOR_RENDERABLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_RENDERABLE /;"	d
GL_COLOR_WRITEMASK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COLOR_WRITEMASK /;"	d
GL_COMMAND_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMMAND_BARRIER_BIT /;"	d
GL_COMPARE_REF_TO_TEXTURE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPARE_REF_TO_TEXTURE /;"	d
GL_COMPATIBLE_SUBROUTINES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPATIBLE_SUBROUTINES /;"	d
GL_COMPILE_STATUS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPILE_STATUS /;"	d
GL_COMPRESSED_R11_EAC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_R11_EAC /;"	d
GL_COMPRESSED_RED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RED /;"	d
GL_COMPRESSED_RED_RGTC1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RED_RGTC1 /;"	d
GL_COMPRESSED_RG	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RG /;"	d
GL_COMPRESSED_RG11_EAC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RG11_EAC /;"	d
GL_COMPRESSED_RGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB /;"	d
GL_COMPRESSED_RGB8_ETC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB8_ETC2 /;"	d
GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 /;"	d
GL_COMPRESSED_RGBA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA /;"	d
GL_COMPRESSED_RGBA8_ETC2_EAC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA8_ETC2_EAC /;"	d
GL_COMPRESSED_RGBA_ASTC_10x10_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_10x10_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_10x5_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_10x5_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_10x6_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_10x6_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_10x8_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_10x8_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_12x10_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_12x10_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_12x12_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_12x12_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_4x4_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_4x4_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_5x4_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_5x4_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_5x5_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_5x5_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_6x5_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_6x5_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_6x6_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_6x6_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_8x5_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_8x5_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_8x6_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_8x6_KHR /;"	d
GL_COMPRESSED_RGBA_ASTC_8x8_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_ASTC_8x8_KHR /;"	d
GL_COMPRESSED_RGBA_BPTC_UNORM_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB /;"	d
GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB /;"	d
GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB /;"	d
GL_COMPRESSED_RG_RGTC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_RG_RGTC2 /;"	d
GL_COMPRESSED_SIGNED_R11_EAC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SIGNED_R11_EAC /;"	d
GL_COMPRESSED_SIGNED_RED_RGTC1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SIGNED_RED_RGTC1 /;"	d
GL_COMPRESSED_SIGNED_RG11_EAC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SIGNED_RG11_EAC /;"	d
GL_COMPRESSED_SIGNED_RG_RGTC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SIGNED_RG_RGTC2 /;"	d
GL_COMPRESSED_SRGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR /;"	d
GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC /;"	d
GL_COMPRESSED_SRGB8_ETC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_ETC2 /;"	d
GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 /;"	d
GL_COMPRESSED_SRGB_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB_ALPHA /;"	d
GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB /;"	d
GL_COMPRESSED_TEXTURE_FORMATS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPRESSED_TEXTURE_FORMATS /;"	d
GL_COMPUTE_LOCAL_WORK_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_LOCAL_WORK_SIZE /;"	d
GL_COMPUTE_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_SHADER /;"	d
GL_COMPUTE_SHADER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_SHADER_BIT /;"	d
GL_COMPUTE_SUBROUTINE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_SUBROUTINE /;"	d
GL_COMPUTE_SUBROUTINE_UNIFORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_SUBROUTINE_UNIFORM /;"	d
GL_COMPUTE_TEXTURE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COMPUTE_TEXTURE /;"	d
GL_CONDITION_SATISFIED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONDITION_SATISFIED /;"	d
GL_CONSTANT_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONSTANT_ALPHA /;"	d
GL_CONSTANT_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONSTANT_COLOR /;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT /;"	d
GL_CONTEXT_CORE_PROFILE_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_CORE_PROFILE_BIT /;"	d
GL_CONTEXT_FLAGS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_FLAGS /;"	d
GL_CONTEXT_FLAG_DEBUG_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_FLAG_DEBUG_BIT /;"	d
GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT /;"	d
GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB /;"	d
GL_CONTEXT_PROFILE_MASK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CONTEXT_PROFILE_MASK /;"	d
GL_COPY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY /;"	d
GL_COPY_INVERTED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_INVERTED /;"	d
GL_COPY_READ_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_READ_BUFFER /;"	d
GL_COPY_READ_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_READ_BUFFER_BINDING /;"	d
GL_COPY_WRITE_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_WRITE_BUFFER /;"	d
GL_COPY_WRITE_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_COPY_WRITE_BUFFER_BINDING /;"	d
GL_CULL_FACE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CULL_FACE /;"	d
GL_CULL_FACE_MODE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CULL_FACE_MODE /;"	d
GL_CURRENT_PROGRAM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CURRENT_PROGRAM /;"	d
GL_CURRENT_QUERY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CURRENT_QUERY /;"	d
GL_CURRENT_VERTEX_ATTRIB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CURRENT_VERTEX_ATTRIB /;"	d
GL_CW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_CW /;"	d
GL_DEBUG_CALLBACK_FUNCTION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_CALLBACK_FUNCTION /;"	d
GL_DEBUG_CALLBACK_FUNCTION_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_CALLBACK_FUNCTION_ARB /;"	d
GL_DEBUG_CALLBACK_USER_PARAM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_CALLBACK_USER_PARAM /;"	d
GL_DEBUG_CALLBACK_USER_PARAM_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_CALLBACK_USER_PARAM_ARB /;"	d
GL_DEBUG_GROUP_STACK_DEPTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_GROUP_STACK_DEPTH /;"	d
GL_DEBUG_LOGGED_MESSAGES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_LOGGED_MESSAGES /;"	d
GL_DEBUG_LOGGED_MESSAGES_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_LOGGED_MESSAGES_ARB /;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH /;"	d
GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB /;"	d
GL_DEBUG_OUTPUT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_OUTPUT /;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_OUTPUT_SYNCHRONOUS /;"	d
GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB /;"	d
GL_DEBUG_SEVERITY_HIGH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_HIGH /;"	d
GL_DEBUG_SEVERITY_HIGH_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_HIGH_ARB /;"	d
GL_DEBUG_SEVERITY_LOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_LOW /;"	d
GL_DEBUG_SEVERITY_LOW_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_LOW_ARB /;"	d
GL_DEBUG_SEVERITY_MEDIUM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_MEDIUM /;"	d
GL_DEBUG_SEVERITY_MEDIUM_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_MEDIUM_ARB /;"	d
GL_DEBUG_SEVERITY_NOTIFICATION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SEVERITY_NOTIFICATION /;"	d
GL_DEBUG_SOURCE_API	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_API /;"	d
GL_DEBUG_SOURCE_API_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_API_ARB /;"	d
GL_DEBUG_SOURCE_APPLICATION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_APPLICATION /;"	d
GL_DEBUG_SOURCE_APPLICATION_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_APPLICATION_ARB /;"	d
GL_DEBUG_SOURCE_OTHER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_OTHER /;"	d
GL_DEBUG_SOURCE_OTHER_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_OTHER_ARB /;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_SHADER_COMPILER /;"	d
GL_DEBUG_SOURCE_SHADER_COMPILER_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB /;"	d
GL_DEBUG_SOURCE_THIRD_PARTY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_THIRD_PARTY /;"	d
GL_DEBUG_SOURCE_THIRD_PARTY_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_THIRD_PARTY_ARB /;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_WINDOW_SYSTEM /;"	d
GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB /;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR /;"	d
GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB /;"	d
GL_DEBUG_TYPE_ERROR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_ERROR /;"	d
GL_DEBUG_TYPE_ERROR_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_ERROR_ARB /;"	d
GL_DEBUG_TYPE_MARKER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_MARKER /;"	d
GL_DEBUG_TYPE_OTHER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_OTHER /;"	d
GL_DEBUG_TYPE_OTHER_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_OTHER_ARB /;"	d
GL_DEBUG_TYPE_PERFORMANCE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PERFORMANCE /;"	d
GL_DEBUG_TYPE_PERFORMANCE_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PERFORMANCE_ARB /;"	d
GL_DEBUG_TYPE_POP_GROUP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_POP_GROUP /;"	d
GL_DEBUG_TYPE_PORTABILITY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PORTABILITY /;"	d
GL_DEBUG_TYPE_PORTABILITY_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PORTABILITY_ARB /;"	d
GL_DEBUG_TYPE_PUSH_GROUP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_PUSH_GROUP /;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR /;"	d
GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB /;"	d
GL_DECR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DECR /;"	d
GL_DECR_WRAP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DECR_WRAP /;"	d
GL_DELETE_STATUS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DELETE_STATUS /;"	d
GL_DEPTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH /;"	d
GL_DEPTH24_STENCIL8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH24_STENCIL8 /;"	d
GL_DEPTH32F_STENCIL8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH32F_STENCIL8 /;"	d
GL_DEPTH_ATTACHMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_ATTACHMENT /;"	d
GL_DEPTH_BUFFER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_BUFFER_BIT /;"	d
GL_DEPTH_CLAMP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_CLAMP /;"	d
GL_DEPTH_CLEAR_VALUE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_CLEAR_VALUE /;"	d
GL_DEPTH_COMPONENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT /;"	d
GL_DEPTH_COMPONENT16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT16 /;"	d
GL_DEPTH_COMPONENT24	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT24 /;"	d
GL_DEPTH_COMPONENT32	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT32 /;"	d
GL_DEPTH_COMPONENT32F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENT32F /;"	d
GL_DEPTH_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_COMPONENTS /;"	d
GL_DEPTH_FUNC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_FUNC /;"	d
GL_DEPTH_RANGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_RANGE /;"	d
GL_DEPTH_RENDERABLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_RENDERABLE /;"	d
GL_DEPTH_STENCIL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_STENCIL /;"	d
GL_DEPTH_STENCIL_ATTACHMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_STENCIL_ATTACHMENT /;"	d
GL_DEPTH_STENCIL_TEXTURE_MODE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_STENCIL_TEXTURE_MODE /;"	d
GL_DEPTH_TEST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_TEST /;"	d
GL_DEPTH_WRITEMASK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DEPTH_WRITEMASK /;"	d
GL_DISPATCH_INDIRECT_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DISPATCH_INDIRECT_BUFFER /;"	d
GL_DISPATCH_INDIRECT_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DISPATCH_INDIRECT_BUFFER_BINDING /;"	d
GL_DISPLAY_LIST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DISPLAY_LIST /;"	d
GL_DITHER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DITHER /;"	d
GL_DONT_CARE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DONT_CARE /;"	d
GL_DOUBLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE /;"	d
GL_DOUBLEBUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLEBUFFER /;"	d
GL_DOUBLE_MAT2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT2 /;"	d
GL_DOUBLE_MAT2x3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT2x3 /;"	d
GL_DOUBLE_MAT2x4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT2x4 /;"	d
GL_DOUBLE_MAT3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT3 /;"	d
GL_DOUBLE_MAT3x2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT3x2 /;"	d
GL_DOUBLE_MAT3x4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT3x4 /;"	d
GL_DOUBLE_MAT4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT4 /;"	d
GL_DOUBLE_MAT4x2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT4x2 /;"	d
GL_DOUBLE_MAT4x3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_MAT4x3 /;"	d
GL_DOUBLE_VEC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_VEC2 /;"	d
GL_DOUBLE_VEC3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_VEC3 /;"	d
GL_DOUBLE_VEC4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DOUBLE_VEC4 /;"	d
GL_DRAW_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER /;"	d
GL_DRAW_BUFFER0	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER0 /;"	d
GL_DRAW_BUFFER1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER1 /;"	d
GL_DRAW_BUFFER10	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER10 /;"	d
GL_DRAW_BUFFER11	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER11 /;"	d
GL_DRAW_BUFFER12	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER12 /;"	d
GL_DRAW_BUFFER13	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER13 /;"	d
GL_DRAW_BUFFER14	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER14 /;"	d
GL_DRAW_BUFFER15	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER15 /;"	d
GL_DRAW_BUFFER2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER2 /;"	d
GL_DRAW_BUFFER3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER3 /;"	d
GL_DRAW_BUFFER4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER4 /;"	d
GL_DRAW_BUFFER5	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER5 /;"	d
GL_DRAW_BUFFER6	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER6 /;"	d
GL_DRAW_BUFFER7	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER7 /;"	d
GL_DRAW_BUFFER8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER8 /;"	d
GL_DRAW_BUFFER9	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_BUFFER9 /;"	d
GL_DRAW_FRAMEBUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_FRAMEBUFFER /;"	d
GL_DRAW_FRAMEBUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_FRAMEBUFFER_BINDING /;"	d
GL_DRAW_INDIRECT_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_INDIRECT_BUFFER /;"	d
GL_DRAW_INDIRECT_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DRAW_INDIRECT_BUFFER_BINDING /;"	d
GL_DST_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DST_ALPHA /;"	d
GL_DST_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DST_COLOR /;"	d
GL_DYNAMIC_COPY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DYNAMIC_COPY /;"	d
GL_DYNAMIC_DRAW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DYNAMIC_DRAW /;"	d
GL_DYNAMIC_READ	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_DYNAMIC_READ /;"	d
GL_ELEMENT_ARRAY_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ELEMENT_ARRAY_BARRIER_BIT /;"	d
GL_ELEMENT_ARRAY_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ELEMENT_ARRAY_BUFFER /;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ELEMENT_ARRAY_BUFFER_BINDING /;"	d
GL_EQUAL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_EQUAL /;"	d
GL_EQUIV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_EQUIV /;"	d
GL_EXTENSIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_EXTENSIONS /;"	d
GL_FALSE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FALSE /;"	d
GL_FASTEST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FASTEST /;"	d
GL_FILL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FILL /;"	d
GL_FILTER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FILTER /;"	d
GL_FIRST_VERTEX_CONVENTION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FIRST_VERTEX_CONVENTION /;"	d
GL_FIXED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FIXED /;"	d
GL_FIXED_ONLY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FIXED_ONLY /;"	d
GL_FLOAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT /;"	d
GL_FLOAT_32_UNSIGNED_INT_24_8_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_32_UNSIGNED_INT_24_8_REV /;"	d
GL_FLOAT_MAT2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT2 /;"	d
GL_FLOAT_MAT2x3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT2x3 /;"	d
GL_FLOAT_MAT2x4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT2x4 /;"	d
GL_FLOAT_MAT3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT3 /;"	d
GL_FLOAT_MAT3x2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT3x2 /;"	d
GL_FLOAT_MAT3x4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT3x4 /;"	d
GL_FLOAT_MAT4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT4 /;"	d
GL_FLOAT_MAT4x2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT4x2 /;"	d
GL_FLOAT_MAT4x3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_MAT4x3 /;"	d
GL_FLOAT_VEC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_VEC2 /;"	d
GL_FLOAT_VEC3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_VEC3 /;"	d
GL_FLOAT_VEC4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FLOAT_VEC4 /;"	d
GL_FRACTIONAL_EVEN	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRACTIONAL_EVEN /;"	d
GL_FRACTIONAL_ODD	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRACTIONAL_ODD /;"	d
GL_FRAGMENT_INTERPOLATION_OFFSET_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS /;"	d
GL_FRAGMENT_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SHADER /;"	d
GL_FRAGMENT_SHADER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SHADER_BIT /;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SHADER_DERIVATIVE_HINT /;"	d
GL_FRAGMENT_SUBROUTINE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SUBROUTINE /;"	d
GL_FRAGMENT_SUBROUTINE_UNIFORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_SUBROUTINE_UNIFORM /;"	d
GL_FRAGMENT_TEXTURE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAGMENT_TEXTURE /;"	d
GL_FRAMEBUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER /;"	d
GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING /;"	d
GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_LAYERED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_LAYERED /;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME /;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE /;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER /;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL /;"	d
GL_FRAMEBUFFER_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_BARRIER_BIT /;"	d
GL_FRAMEBUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_BINDING /;"	d
GL_FRAMEBUFFER_BLEND	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_BLEND /;"	d
GL_FRAMEBUFFER_COMPLETE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_COMPLETE /;"	d
GL_FRAMEBUFFER_DEFAULT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT /;"	d
GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS /;"	d
GL_FRAMEBUFFER_DEFAULT_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_HEIGHT /;"	d
GL_FRAMEBUFFER_DEFAULT_LAYERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_LAYERS /;"	d
GL_FRAMEBUFFER_DEFAULT_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_SAMPLES /;"	d
GL_FRAMEBUFFER_DEFAULT_WIDTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_DEFAULT_WIDTH /;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT /;"	d
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER /;"	d
GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS /;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT /;"	d
GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE /;"	d
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER /;"	d
GL_FRAMEBUFFER_RENDERABLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_RENDERABLE /;"	d
GL_FRAMEBUFFER_RENDERABLE_LAYERED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_RENDERABLE_LAYERED /;"	d
GL_FRAMEBUFFER_SRGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_SRGB /;"	d
GL_FRAMEBUFFER_UNDEFINED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_UNDEFINED /;"	d
GL_FRAMEBUFFER_UNSUPPORTED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRAMEBUFFER_UNSUPPORTED /;"	d
GL_FRONT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT /;"	d
GL_FRONT_AND_BACK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT_AND_BACK /;"	d
GL_FRONT_FACE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT_FACE /;"	d
GL_FRONT_LEFT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT_LEFT /;"	d
GL_FRONT_RIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FRONT_RIGHT /;"	d
GL_FULL_SUPPORT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FULL_SUPPORT /;"	d
GL_FUNC_ADD	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FUNC_ADD /;"	d
GL_FUNC_REVERSE_SUBTRACT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FUNC_REVERSE_SUBTRACT /;"	d
GL_FUNC_SUBTRACT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_FUNC_SUBTRACT /;"	d
GL_GEOMETRY_INPUT_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_INPUT_TYPE /;"	d
GL_GEOMETRY_OUTPUT_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_OUTPUT_TYPE /;"	d
GL_GEOMETRY_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SHADER /;"	d
GL_GEOMETRY_SHADER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SHADER_BIT /;"	d
GL_GEOMETRY_SHADER_INVOCATIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SHADER_INVOCATIONS /;"	d
GL_GEOMETRY_SUBROUTINE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SUBROUTINE /;"	d
GL_GEOMETRY_SUBROUTINE_UNIFORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_SUBROUTINE_UNIFORM /;"	d
GL_GEOMETRY_TEXTURE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_TEXTURE /;"	d
GL_GEOMETRY_VERTICES_OUT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEOMETRY_VERTICES_OUT /;"	d
GL_GEQUAL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GEQUAL /;"	d
GL_GET_TEXTURE_IMAGE_FORMAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GET_TEXTURE_IMAGE_FORMAT /;"	d
GL_GET_TEXTURE_IMAGE_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GET_TEXTURE_IMAGE_TYPE /;"	d
GL_GREATER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GREATER /;"	d
GL_GREEN	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GREEN /;"	d
GL_GREEN_INTEGER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GREEN_INTEGER /;"	d
GL_GUILTY_CONTEXT_RESET_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_GUILTY_CONTEXT_RESET_ARB /;"	d
GL_HALF_FLOAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_HALF_FLOAT /;"	d
GL_HIGH_FLOAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_HIGH_FLOAT /;"	d
GL_HIGH_INT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_HIGH_INT /;"	d
GL_IMAGE_1D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_1D /;"	d
GL_IMAGE_1D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_1D_ARRAY /;"	d
GL_IMAGE_2D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D /;"	d
GL_IMAGE_2D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D_ARRAY /;"	d
GL_IMAGE_2D_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D_MULTISAMPLE /;"	d
GL_IMAGE_2D_MULTISAMPLE_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D_MULTISAMPLE_ARRAY /;"	d
GL_IMAGE_2D_RECT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_2D_RECT /;"	d
GL_IMAGE_3D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_3D /;"	d
GL_IMAGE_BINDING_ACCESS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_ACCESS /;"	d
GL_IMAGE_BINDING_FORMAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_FORMAT /;"	d
GL_IMAGE_BINDING_LAYER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_LAYER /;"	d
GL_IMAGE_BINDING_LAYERED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_LAYERED /;"	d
GL_IMAGE_BINDING_LEVEL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_LEVEL /;"	d
GL_IMAGE_BINDING_NAME	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BINDING_NAME /;"	d
GL_IMAGE_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_BUFFER /;"	d
GL_IMAGE_CLASS_10_10_10_2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_10_10_10_2 /;"	d
GL_IMAGE_CLASS_11_11_10	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_11_11_10 /;"	d
GL_IMAGE_CLASS_1_X_16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_1_X_16 /;"	d
GL_IMAGE_CLASS_1_X_32	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_1_X_32 /;"	d
GL_IMAGE_CLASS_1_X_8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_1_X_8 /;"	d
GL_IMAGE_CLASS_2_X_16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_2_X_16 /;"	d
GL_IMAGE_CLASS_2_X_32	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_2_X_32 /;"	d
GL_IMAGE_CLASS_2_X_8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_2_X_8 /;"	d
GL_IMAGE_CLASS_4_X_16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_4_X_16 /;"	d
GL_IMAGE_CLASS_4_X_32	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_4_X_32 /;"	d
GL_IMAGE_CLASS_4_X_8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CLASS_4_X_8 /;"	d
GL_IMAGE_COMPATIBILITY_CLASS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_COMPATIBILITY_CLASS /;"	d
GL_IMAGE_CUBE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CUBE /;"	d
GL_IMAGE_CUBE_MAP_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_CUBE_MAP_ARRAY /;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS /;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE /;"	d
GL_IMAGE_FORMAT_COMPATIBILITY_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE /;"	d
GL_IMAGE_PIXEL_FORMAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_PIXEL_FORMAT /;"	d
GL_IMAGE_PIXEL_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_PIXEL_TYPE /;"	d
GL_IMAGE_TEXEL_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMAGE_TEXEL_SIZE /;"	d
GL_IMPLEMENTATION_COLOR_READ_FORMAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMPLEMENTATION_COLOR_READ_FORMAT /;"	d
GL_IMPLEMENTATION_COLOR_READ_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IMPLEMENTATION_COLOR_READ_TYPE /;"	d
GL_INCR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INCR /;"	d
GL_INCR_WRAP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INCR_WRAP /;"	d
GL_INFO_LOG_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INFO_LOG_LENGTH /;"	d
GL_INNOCENT_CONTEXT_RESET_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INNOCENT_CONTEXT_RESET_ARB /;"	d
GL_INT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT /;"	d
GL_INTERLEAVED_ATTRIBS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERLEAVED_ATTRIBS /;"	d
GL_INTERNALFORMAT_ALPHA_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_ALPHA_SIZE /;"	d
GL_INTERNALFORMAT_ALPHA_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_ALPHA_TYPE /;"	d
GL_INTERNALFORMAT_BLUE_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_BLUE_SIZE /;"	d
GL_INTERNALFORMAT_BLUE_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_BLUE_TYPE /;"	d
GL_INTERNALFORMAT_DEPTH_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_DEPTH_SIZE /;"	d
GL_INTERNALFORMAT_DEPTH_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_DEPTH_TYPE /;"	d
GL_INTERNALFORMAT_GREEN_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_GREEN_SIZE /;"	d
GL_INTERNALFORMAT_GREEN_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_GREEN_TYPE /;"	d
GL_INTERNALFORMAT_PREFERRED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_PREFERRED /;"	d
GL_INTERNALFORMAT_RED_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_RED_SIZE /;"	d
GL_INTERNALFORMAT_RED_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_RED_TYPE /;"	d
GL_INTERNALFORMAT_SHARED_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_SHARED_SIZE /;"	d
GL_INTERNALFORMAT_STENCIL_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_STENCIL_SIZE /;"	d
GL_INTERNALFORMAT_STENCIL_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_STENCIL_TYPE /;"	d
GL_INTERNALFORMAT_SUPPORTED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INTERNALFORMAT_SUPPORTED /;"	d
GL_INT_2_10_10_10_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_2_10_10_10_REV /;"	d
GL_INT_IMAGE_1D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_1D /;"	d
GL_INT_IMAGE_1D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_1D_ARRAY /;"	d
GL_INT_IMAGE_2D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D /;"	d
GL_INT_IMAGE_2D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D_ARRAY /;"	d
GL_INT_IMAGE_2D_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D_MULTISAMPLE /;"	d
GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY /;"	d
GL_INT_IMAGE_2D_RECT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_2D_RECT /;"	d
GL_INT_IMAGE_3D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_3D /;"	d
GL_INT_IMAGE_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_BUFFER /;"	d
GL_INT_IMAGE_CUBE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_CUBE /;"	d
GL_INT_IMAGE_CUBE_MAP_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_IMAGE_CUBE_MAP_ARRAY /;"	d
GL_INT_SAMPLER_1D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_1D /;"	d
GL_INT_SAMPLER_1D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_1D_ARRAY /;"	d
GL_INT_SAMPLER_2D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D /;"	d
GL_INT_SAMPLER_2D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D_ARRAY /;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D_MULTISAMPLE /;"	d
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY /;"	d
GL_INT_SAMPLER_2D_RECT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_2D_RECT /;"	d
GL_INT_SAMPLER_3D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_3D /;"	d
GL_INT_SAMPLER_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_BUFFER /;"	d
GL_INT_SAMPLER_CUBE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_CUBE /;"	d
GL_INT_SAMPLER_CUBE_MAP_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_CUBE_MAP_ARRAY /;"	d
GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB /;"	d
GL_INT_VEC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_VEC2 /;"	d
GL_INT_VEC3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_VEC3 /;"	d
GL_INT_VEC4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INT_VEC4 /;"	d
GL_INVALID_ENUM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_ENUM /;"	d
GL_INVALID_FRAMEBUFFER_OPERATION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_FRAMEBUFFER_OPERATION /;"	d
GL_INVALID_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_INDEX /;"	d
GL_INVALID_OPERATION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_OPERATION /;"	d
GL_INVALID_VALUE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVALID_VALUE /;"	d
GL_INVERT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_INVERT /;"	d
GL_ISOLINES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ISOLINES /;"	d
GL_IS_PER_PATCH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IS_PER_PATCH /;"	d
GL_IS_ROW_MAJOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_IS_ROW_MAJOR /;"	d
GL_KEEP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_KEEP /;"	d
GL_KHR_debug	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_KHR_debug /;"	d
GL_KHR_texture_compression_astc_ldr	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_KHR_texture_compression_astc_ldr /;"	d
GL_LAST_VERTEX_CONVENTION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LAST_VERTEX_CONVENTION /;"	d
GL_LAYER_PROVOKING_VERTEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LAYER_PROVOKING_VERTEX /;"	d
GL_LEFT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LEFT /;"	d
GL_LEQUAL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LEQUAL /;"	d
GL_LESS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LESS /;"	d
GL_LINE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE /;"	d
GL_LINEAR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINEAR /;"	d
GL_LINEAR_MIPMAP_LINEAR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINEAR_MIPMAP_LINEAR /;"	d
GL_LINEAR_MIPMAP_NEAREST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINEAR_MIPMAP_NEAREST /;"	d
GL_LINES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINES /;"	d
GL_LINES_ADJACENCY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINES_ADJACENCY /;"	d
GL_LINE_LOOP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_LOOP /;"	d
GL_LINE_SMOOTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_SMOOTH /;"	d
GL_LINE_SMOOTH_HINT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_SMOOTH_HINT /;"	d
GL_LINE_STRIP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_STRIP /;"	d
GL_LINE_STRIP_ADJACENCY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_STRIP_ADJACENCY /;"	d
GL_LINE_WIDTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_WIDTH /;"	d
GL_LINE_WIDTH_GRANULARITY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_WIDTH_GRANULARITY /;"	d
GL_LINE_WIDTH_RANGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINE_WIDTH_RANGE /;"	d
GL_LINK_STATUS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LINK_STATUS /;"	d
GL_LOCATION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOCATION /;"	d
GL_LOCATION_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOCATION_INDEX /;"	d
GL_LOGIC_OP_MODE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOGIC_OP_MODE /;"	d
GL_LOSE_CONTEXT_ON_RESET_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOSE_CONTEXT_ON_RESET_ARB /;"	d
GL_LOWER_LEFT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOWER_LEFT /;"	d
GL_LOW_FLOAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOW_FLOAT /;"	d
GL_LOW_INT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_LOW_INT /;"	d
GL_MAJOR_VERSION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAJOR_VERSION /;"	d
GL_MANUAL_GENERATE_MIPMAP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MANUAL_GENERATE_MIPMAP /;"	d
GL_MAP_FLUSH_EXPLICIT_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_FLUSH_EXPLICIT_BIT /;"	d
GL_MAP_INVALIDATE_BUFFER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_INVALIDATE_BUFFER_BIT /;"	d
GL_MAP_INVALIDATE_RANGE_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_INVALIDATE_RANGE_BIT /;"	d
GL_MAP_READ_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_READ_BIT /;"	d
GL_MAP_UNSYNCHRONIZED_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_UNSYNCHRONIZED_BIT /;"	d
GL_MAP_WRITE_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAP_WRITE_BIT /;"	d
GL_MATRIX_STRIDE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MATRIX_STRIDE /;"	d
GL_MAX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX /;"	d
GL_MAX_3D_TEXTURE_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_3D_TEXTURE_SIZE /;"	d
GL_MAX_ARRAY_TEXTURE_LAYERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ARRAY_TEXTURE_LAYERS /;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS /;"	d
GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE /;"	d
GL_MAX_CLIP_DISTANCES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_CLIP_DISTANCES /;"	d
GL_MAX_COLOR_ATTACHMENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COLOR_ATTACHMENTS /;"	d
GL_MAX_COLOR_TEXTURE_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COLOR_TEXTURE_SAMPLES /;"	d
GL_MAX_COMBINED_ATOMIC_COUNTERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_ATOMIC_COUNTERS /;"	d
GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_DIMENSIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_DIMENSIONS /;"	d
GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_IMAGE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_IMAGE_UNIFORMS /;"	d
GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS /;"	d
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES /;"	d
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_COMBINED_UNIFORM_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_UNIFORM_BLOCKS /;"	d
GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_ATOMIC_COUNTERS /;"	d
GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_COMPUTE_IMAGE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_IMAGE_UNIFORMS /;"	d
GL_MAX_COMPUTE_LOCAL_INVOCATIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_LOCAL_INVOCATIONS /;"	d
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_COMPUTE_SHARED_MEMORY_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE /;"	d
GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_COMPUTE_UNIFORM_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_UNIFORM_BLOCKS /;"	d
GL_MAX_COMPUTE_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_UNIFORM_COMPONENTS /;"	d
GL_MAX_COMPUTE_WORK_GROUP_COUNT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_WORK_GROUP_COUNT /;"	d
GL_MAX_COMPUTE_WORK_GROUP_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_COMPUTE_WORK_GROUP_SIZE /;"	d
GL_MAX_CUBE_MAP_TEXTURE_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_CUBE_MAP_TEXTURE_SIZE /;"	d
GL_MAX_DEBUG_GROUP_STACK_DEPTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_GROUP_STACK_DEPTH /;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_LOGGED_MESSAGES /;"	d
GL_MAX_DEBUG_LOGGED_MESSAGES_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB /;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_MESSAGE_LENGTH /;"	d
GL_MAX_DEBUG_MESSAGE_LENGTH_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB /;"	d
GL_MAX_DEPTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEPTH /;"	d
GL_MAX_DEPTH_TEXTURE_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DEPTH_TEXTURE_SAMPLES /;"	d
GL_MAX_DRAW_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DRAW_BUFFERS /;"	d
GL_MAX_DUAL_SOURCE_DRAW_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS /;"	d
GL_MAX_ELEMENTS_INDICES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ELEMENTS_INDICES /;"	d
GL_MAX_ELEMENTS_VERTICES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ELEMENTS_VERTICES /;"	d
GL_MAX_ELEMENT_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_ELEMENT_INDEX /;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_ATOMIC_COUNTERS /;"	d
GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_FRAGMENT_IMAGE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_IMAGE_UNIFORMS /;"	d
GL_MAX_FRAGMENT_INPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_INPUT_COMPONENTS /;"	d
GL_MAX_FRAGMENT_INTERPOLATION_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET /;"	d
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_FRAGMENT_UNIFORM_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_UNIFORM_BLOCKS /;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS /;"	d
GL_MAX_FRAGMENT_UNIFORM_VECTORS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAGMENT_UNIFORM_VECTORS /;"	d
GL_MAX_FRAMEBUFFER_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAMEBUFFER_HEIGHT /;"	d
GL_MAX_FRAMEBUFFER_LAYERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAMEBUFFER_LAYERS /;"	d
GL_MAX_FRAMEBUFFER_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAMEBUFFER_SAMPLES /;"	d
GL_MAX_FRAMEBUFFER_WIDTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_FRAMEBUFFER_WIDTH /;"	d
GL_MAX_GEOMETRY_ATOMIC_COUNTERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_ATOMIC_COUNTERS /;"	d
GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_GEOMETRY_IMAGE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_IMAGE_UNIFORMS /;"	d
GL_MAX_GEOMETRY_INPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_INPUT_COMPONENTS /;"	d
GL_MAX_GEOMETRY_OUTPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS /;"	d
GL_MAX_GEOMETRY_OUTPUT_VERTICES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_OUTPUT_VERTICES /;"	d
GL_MAX_GEOMETRY_SHADER_INVOCATIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_SHADER_INVOCATIONS /;"	d
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS /;"	d
GL_MAX_GEOMETRY_UNIFORM_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_UNIFORM_BLOCKS /;"	d
GL_MAX_GEOMETRY_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS /;"	d
GL_MAX_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_HEIGHT /;"	d
GL_MAX_IMAGE_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_IMAGE_SAMPLES /;"	d
GL_MAX_IMAGE_UNITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_IMAGE_UNITS /;"	d
GL_MAX_INTEGER_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_INTEGER_SAMPLES /;"	d
GL_MAX_LABEL_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_LABEL_LENGTH /;"	d
GL_MAX_LAYERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_LAYERS /;"	d
GL_MAX_NAME_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_NAME_LENGTH /;"	d
GL_MAX_NUM_ACTIVE_VARIABLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_NUM_ACTIVE_VARIABLES /;"	d
GL_MAX_NUM_COMPATIBLE_SUBROUTINES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_NUM_COMPATIBLE_SUBROUTINES /;"	d
GL_MAX_PATCH_VERTICES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PATCH_VERTICES /;"	d
GL_MAX_PROGRAM_TEXEL_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PROGRAM_TEXEL_OFFSET /;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB /;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET /;"	d
GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB /;"	d
GL_MAX_RECTANGLE_TEXTURE_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_RECTANGLE_TEXTURE_SIZE /;"	d
GL_MAX_RENDERBUFFER_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_RENDERBUFFER_SIZE /;"	d
GL_MAX_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SAMPLES /;"	d
GL_MAX_SAMPLE_MASK_WORDS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SAMPLE_MASK_WORDS /;"	d
GL_MAX_SERVER_WAIT_TIMEOUT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SERVER_WAIT_TIMEOUT /;"	d
GL_MAX_SHADER_STORAGE_BLOCK_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SHADER_STORAGE_BLOCK_SIZE /;"	d
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS /;"	d
GL_MAX_SUBROUTINES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SUBROUTINES /;"	d
GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS /;"	d
GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS /;"	d
GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS /;"	d
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS /;"	d
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS /;"	d
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS /;"	d
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS /;"	d
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS /;"	d
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS /;"	d
GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS /;"	d
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS /;"	d
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS /;"	d
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS /;"	d
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS /;"	d
GL_MAX_TESS_GEN_LEVEL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_GEN_LEVEL /;"	d
GL_MAX_TESS_PATCH_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TESS_PATCH_COMPONENTS /;"	d
GL_MAX_TEXTURE_BUFFER_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TEXTURE_BUFFER_SIZE /;"	d
GL_MAX_TEXTURE_IMAGE_UNITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_TEXTURE_LOD_BIAS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TEXTURE_LOD_BIAS /;"	d
GL_MAX_TEXTURE_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TEXTURE_SIZE /;"	d
GL_MAX_TRANSFORM_FEEDBACK_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS /;"	d
GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS /;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS /;"	d
GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS /;"	d
GL_MAX_UNIFORM_BLOCK_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_UNIFORM_BLOCK_SIZE /;"	d
GL_MAX_UNIFORM_BUFFER_BINDINGS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_UNIFORM_BUFFER_BINDINGS /;"	d
GL_MAX_UNIFORM_LOCATIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_UNIFORM_LOCATIONS /;"	d
GL_MAX_VARYING_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VARYING_COMPONENTS /;"	d
GL_MAX_VARYING_FLOATS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VARYING_FLOATS /;"	d
GL_MAX_VARYING_VECTORS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VARYING_VECTORS /;"	d
GL_MAX_VERTEX_ATOMIC_COUNTERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATOMIC_COUNTERS /;"	d
GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS /;"	d
GL_MAX_VERTEX_ATTRIBS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATTRIBS /;"	d
GL_MAX_VERTEX_ATTRIB_BINDINGS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATTRIB_BINDINGS /;"	d
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET /;"	d
GL_MAX_VERTEX_IMAGE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_IMAGE_UNIFORMS /;"	d
GL_MAX_VERTEX_OUTPUT_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_OUTPUT_COMPONENTS /;"	d
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS /;"	d
GL_MAX_VERTEX_STREAMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_STREAMS /;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS /;"	d
GL_MAX_VERTEX_UNIFORM_BLOCKS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_UNIFORM_BLOCKS /;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_UNIFORM_COMPONENTS /;"	d
GL_MAX_VERTEX_UNIFORM_VECTORS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VERTEX_UNIFORM_VECTORS /;"	d
GL_MAX_VIEWPORTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VIEWPORTS /;"	d
GL_MAX_VIEWPORT_DIMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_VIEWPORT_DIMS /;"	d
GL_MAX_WIDTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MAX_WIDTH /;"	d
GL_MEDIUM_FLOAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MEDIUM_FLOAT /;"	d
GL_MEDIUM_INT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MEDIUM_INT /;"	d
GL_MIN	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN /;"	d
GL_MINOR_VERSION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MINOR_VERSION /;"	d
GL_MIN_FRAGMENT_INTERPOLATION_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET /;"	d
GL_MIN_MAP_BUFFER_ALIGNMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_MAP_BUFFER_ALIGNMENT /;"	d
GL_MIN_PROGRAM_TEXEL_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_PROGRAM_TEXEL_OFFSET /;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET /;"	d
GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB /;"	d
GL_MIN_SAMPLE_SHADING_VALUE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_SAMPLE_SHADING_VALUE /;"	d
GL_MIN_SAMPLE_SHADING_VALUE_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIN_SAMPLE_SHADING_VALUE_ARB /;"	d
GL_MIPMAP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIPMAP /;"	d
GL_MIRRORED_REPEAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MIRRORED_REPEAT /;"	d
GL_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_MULTISAMPLE /;"	d
GL_NAMED_STRING_LENGTH_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NAMED_STRING_LENGTH_ARB /;"	d
GL_NAMED_STRING_TYPE_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NAMED_STRING_TYPE_ARB /;"	d
GL_NAME_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NAME_LENGTH /;"	d
GL_NAND	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NAND /;"	d
GL_NEAREST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NEAREST /;"	d
GL_NEAREST_MIPMAP_LINEAR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NEAREST_MIPMAP_LINEAR /;"	d
GL_NEAREST_MIPMAP_NEAREST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NEAREST_MIPMAP_NEAREST /;"	d
GL_NEVER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NEVER /;"	d
GL_NICEST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NICEST /;"	d
GL_NONE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NONE /;"	d
GL_NOOP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NOOP /;"	d
GL_NOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NOR /;"	d
GL_NOTEQUAL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NOTEQUAL /;"	d
GL_NO_ERROR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NO_ERROR /;"	d
GL_NO_RESET_NOTIFICATION_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NO_RESET_NOTIFICATION_ARB /;"	d
GL_NUM_ACTIVE_VARIABLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_ACTIVE_VARIABLES /;"	d
GL_NUM_COMPATIBLE_SUBROUTINES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_COMPATIBLE_SUBROUTINES /;"	d
GL_NUM_COMPRESSED_TEXTURE_FORMATS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_COMPRESSED_TEXTURE_FORMATS /;"	d
GL_NUM_EXTENSIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_EXTENSIONS /;"	d
GL_NUM_PROGRAM_BINARY_FORMATS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_PROGRAM_BINARY_FORMATS /;"	d
GL_NUM_SAMPLE_COUNTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_SAMPLE_COUNTS /;"	d
GL_NUM_SHADER_BINARY_FORMATS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_SHADER_BINARY_FORMATS /;"	d
GL_NUM_SHADING_LANGUAGE_VERSIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_NUM_SHADING_LANGUAGE_VERSIONS /;"	d
GL_OBJECT_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OBJECT_TYPE /;"	d
GL_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OFFSET /;"	d
GL_ONE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE /;"	d
GL_ONE_MINUS_CONSTANT_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_CONSTANT_ALPHA /;"	d
GL_ONE_MINUS_CONSTANT_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_CONSTANT_COLOR /;"	d
GL_ONE_MINUS_DST_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_DST_ALPHA /;"	d
GL_ONE_MINUS_DST_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_DST_COLOR /;"	d
GL_ONE_MINUS_SRC1_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_SRC1_ALPHA /;"	d
GL_ONE_MINUS_SRC1_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_SRC1_COLOR /;"	d
GL_ONE_MINUS_SRC_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_SRC_ALPHA /;"	d
GL_ONE_MINUS_SRC_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ONE_MINUS_SRC_COLOR /;"	d
GL_OR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OR /;"	d
GL_OR_INVERTED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OR_INVERTED /;"	d
GL_OR_REVERSE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OR_REVERSE /;"	d
GL_OUT_OF_MEMORY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_OUT_OF_MEMORY /;"	d
GL_PACK_ALIGNMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_ALIGNMENT /;"	d
GL_PACK_COMPRESSED_BLOCK_DEPTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_COMPRESSED_BLOCK_DEPTH /;"	d
GL_PACK_COMPRESSED_BLOCK_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_COMPRESSED_BLOCK_HEIGHT /;"	d
GL_PACK_COMPRESSED_BLOCK_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_COMPRESSED_BLOCK_SIZE /;"	d
GL_PACK_COMPRESSED_BLOCK_WIDTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_COMPRESSED_BLOCK_WIDTH /;"	d
GL_PACK_IMAGE_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_IMAGE_HEIGHT /;"	d
GL_PACK_LSB_FIRST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_LSB_FIRST /;"	d
GL_PACK_ROW_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_ROW_LENGTH /;"	d
GL_PACK_SKIP_IMAGES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_SKIP_IMAGES /;"	d
GL_PACK_SKIP_PIXELS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_SKIP_PIXELS /;"	d
GL_PACK_SKIP_ROWS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_SKIP_ROWS /;"	d
GL_PACK_SWAP_BYTES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PACK_SWAP_BYTES /;"	d
GL_PATCHES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PATCHES /;"	d
GL_PATCH_DEFAULT_INNER_LEVEL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PATCH_DEFAULT_INNER_LEVEL /;"	d
GL_PATCH_DEFAULT_OUTER_LEVEL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PATCH_DEFAULT_OUTER_LEVEL /;"	d
GL_PATCH_VERTICES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PATCH_VERTICES /;"	d
GL_PIXEL_BUFFER_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_BUFFER_BARRIER_BIT /;"	d
GL_PIXEL_PACK_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_PACK_BUFFER /;"	d
GL_PIXEL_PACK_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_PACK_BUFFER_BINDING /;"	d
GL_PIXEL_UNPACK_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_UNPACK_BUFFER /;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PIXEL_UNPACK_BUFFER_BINDING /;"	d
GL_POINT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT /;"	d
GL_POINTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINTS /;"	d
GL_POINT_FADE_THRESHOLD_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_FADE_THRESHOLD_SIZE /;"	d
GL_POINT_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_SIZE /;"	d
GL_POINT_SIZE_GRANULARITY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_SIZE_GRANULARITY /;"	d
GL_POINT_SIZE_RANGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_SIZE_RANGE /;"	d
GL_POINT_SPRITE_COORD_ORIGIN	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POINT_SPRITE_COORD_ORIGIN /;"	d
GL_POLYGON_MODE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_MODE /;"	d
GL_POLYGON_OFFSET_FACTOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_FACTOR /;"	d
GL_POLYGON_OFFSET_FILL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_FILL /;"	d
GL_POLYGON_OFFSET_LINE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_LINE /;"	d
GL_POLYGON_OFFSET_POINT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_POINT /;"	d
GL_POLYGON_OFFSET_UNITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_OFFSET_UNITS /;"	d
GL_POLYGON_SMOOTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_SMOOTH /;"	d
GL_POLYGON_SMOOTH_HINT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_POLYGON_SMOOTH_HINT /;"	d
GL_PRIMITIVES_GENERATED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PRIMITIVES_GENERATED /;"	d
GL_PRIMITIVE_RESTART	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PRIMITIVE_RESTART /;"	d
GL_PRIMITIVE_RESTART_FIXED_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PRIMITIVE_RESTART_FIXED_INDEX /;"	d
GL_PRIMITIVE_RESTART_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PRIMITIVE_RESTART_INDEX /;"	d
GL_PROGRAM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM /;"	d
GL_PROGRAM_BINARY_FORMATS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_BINARY_FORMATS /;"	d
GL_PROGRAM_BINARY_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_BINARY_LENGTH /;"	d
GL_PROGRAM_BINARY_RETRIEVABLE_HINT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_BINARY_RETRIEVABLE_HINT /;"	d
GL_PROGRAM_INPUT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_INPUT /;"	d
GL_PROGRAM_OUTPUT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_OUTPUT /;"	d
GL_PROGRAM_PIPELINE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_PIPELINE /;"	d
GL_PROGRAM_PIPELINE_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_PIPELINE_BINDING /;"	d
GL_PROGRAM_POINT_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_POINT_SIZE /;"	d
GL_PROGRAM_SEPARABLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROGRAM_SEPARABLE /;"	d
GL_PROVOKING_VERTEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROVOKING_VERTEX /;"	d
GL_PROXY_TEXTURE_1D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_1D /;"	d
GL_PROXY_TEXTURE_1D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_1D_ARRAY /;"	d
GL_PROXY_TEXTURE_2D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_2D /;"	d
GL_PROXY_TEXTURE_2D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_2D_ARRAY /;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_2D_MULTISAMPLE /;"	d
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY /;"	d
GL_PROXY_TEXTURE_3D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_3D /;"	d
GL_PROXY_TEXTURE_CUBE_MAP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_CUBE_MAP /;"	d
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY /;"	d
GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB /;"	d
GL_PROXY_TEXTURE_RECTANGLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_PROXY_TEXTURE_RECTANGLE /;"	d
GL_QUADS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUADS /;"	d
GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION /;"	d
GL_QUERY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY /;"	d
GL_QUERY_BY_REGION_NO_WAIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_BY_REGION_NO_WAIT /;"	d
GL_QUERY_BY_REGION_WAIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_BY_REGION_WAIT /;"	d
GL_QUERY_COUNTER_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_COUNTER_BITS /;"	d
GL_QUERY_NO_WAIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_NO_WAIT /;"	d
GL_QUERY_RESULT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_RESULT /;"	d
GL_QUERY_RESULT_AVAILABLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_RESULT_AVAILABLE /;"	d
GL_QUERY_WAIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_QUERY_WAIT /;"	d
GL_R11F_G11F_B10F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R11F_G11F_B10F /;"	d
GL_R16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16 /;"	d
GL_R16F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16F /;"	d
GL_R16I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16I /;"	d
GL_R16UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16UI /;"	d
GL_R16_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R16_SNORM /;"	d
GL_R32F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R32F /;"	d
GL_R32I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R32I /;"	d
GL_R32UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R32UI /;"	d
GL_R3_G3_B2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R3_G3_B2 /;"	d
GL_R8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R8 /;"	d
GL_R8I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R8I /;"	d
GL_R8UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R8UI /;"	d
GL_R8_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_R8_SNORM /;"	d
GL_RASTERIZER_DISCARD	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RASTERIZER_DISCARD /;"	d
GL_READ_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_BUFFER /;"	d
GL_READ_FRAMEBUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_FRAMEBUFFER /;"	d
GL_READ_FRAMEBUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_FRAMEBUFFER_BINDING /;"	d
GL_READ_ONLY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_ONLY /;"	d
GL_READ_PIXELS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_PIXELS /;"	d
GL_READ_PIXELS_FORMAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_PIXELS_FORMAT /;"	d
GL_READ_PIXELS_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_PIXELS_TYPE /;"	d
GL_READ_WRITE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_READ_WRITE /;"	d
GL_RED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RED /;"	d
GL_RED_INTEGER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RED_INTEGER /;"	d
GL_RED_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RED_SNORM /;"	d
GL_REFERENCED_BY_COMPUTE_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_COMPUTE_SHADER /;"	d
GL_REFERENCED_BY_FRAGMENT_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_FRAGMENT_SHADER /;"	d
GL_REFERENCED_BY_GEOMETRY_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_GEOMETRY_SHADER /;"	d
GL_REFERENCED_BY_TESS_CONTROL_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_TESS_CONTROL_SHADER /;"	d
GL_REFERENCED_BY_TESS_EVALUATION_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_TESS_EVALUATION_SHADER /;"	d
GL_REFERENCED_BY_VERTEX_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REFERENCED_BY_VERTEX_SHADER /;"	d
GL_RENDERBUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER /;"	d
GL_RENDERBUFFER_ALPHA_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_ALPHA_SIZE /;"	d
GL_RENDERBUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_BINDING /;"	d
GL_RENDERBUFFER_BLUE_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_BLUE_SIZE /;"	d
GL_RENDERBUFFER_DEPTH_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_DEPTH_SIZE /;"	d
GL_RENDERBUFFER_GREEN_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_GREEN_SIZE /;"	d
GL_RENDERBUFFER_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_HEIGHT /;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_INTERNAL_FORMAT /;"	d
GL_RENDERBUFFER_RED_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_RED_SIZE /;"	d
GL_RENDERBUFFER_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_SAMPLES /;"	d
GL_RENDERBUFFER_STENCIL_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_STENCIL_SIZE /;"	d
GL_RENDERBUFFER_WIDTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERBUFFER_WIDTH /;"	d
GL_RENDERER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RENDERER /;"	d
GL_REPEAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REPEAT /;"	d
GL_REPLACE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_REPLACE /;"	d
GL_RESET_NOTIFICATION_STRATEGY_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RESET_NOTIFICATION_STRATEGY_ARB /;"	d
GL_RG	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG /;"	d
GL_RG16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16 /;"	d
GL_RG16F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16F /;"	d
GL_RG16I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16I /;"	d
GL_RG16UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16UI /;"	d
GL_RG16_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG16_SNORM /;"	d
GL_RG32F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG32F /;"	d
GL_RG32I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG32I /;"	d
GL_RG32UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG32UI /;"	d
GL_RG8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG8 /;"	d
GL_RG8I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG8I /;"	d
GL_RG8UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG8UI /;"	d
GL_RG8_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG8_SNORM /;"	d
GL_RGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB /;"	d
GL_RGB10	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB10 /;"	d
GL_RGB10_A2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB10_A2 /;"	d
GL_RGB10_A2UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB10_A2UI /;"	d
GL_RGB12	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB12 /;"	d
GL_RGB16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16 /;"	d
GL_RGB16F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16F /;"	d
GL_RGB16I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16I /;"	d
GL_RGB16UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16UI /;"	d
GL_RGB16_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB16_SNORM /;"	d
GL_RGB32F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB32F /;"	d
GL_RGB32I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB32I /;"	d
GL_RGB32UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB32UI /;"	d
GL_RGB4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB4 /;"	d
GL_RGB5	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB5 /;"	d
GL_RGB565	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB565 /;"	d
GL_RGB5_A1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB5_A1 /;"	d
GL_RGB8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB8 /;"	d
GL_RGB8I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB8I /;"	d
GL_RGB8UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB8UI /;"	d
GL_RGB8_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB8_SNORM /;"	d
GL_RGB9_E5	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB9_E5 /;"	d
GL_RGBA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA /;"	d
GL_RGBA12	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA12 /;"	d
GL_RGBA16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16 /;"	d
GL_RGBA16F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16F /;"	d
GL_RGBA16I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16I /;"	d
GL_RGBA16UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16UI /;"	d
GL_RGBA16_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA16_SNORM /;"	d
GL_RGBA2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA2 /;"	d
GL_RGBA32F	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA32F /;"	d
GL_RGBA32I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA32I /;"	d
GL_RGBA32UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA32UI /;"	d
GL_RGBA4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA4 /;"	d
GL_RGBA8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA8 /;"	d
GL_RGBA8I	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA8I /;"	d
GL_RGBA8UI	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA8UI /;"	d
GL_RGBA8_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA8_SNORM /;"	d
GL_RGBA_INTEGER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA_INTEGER /;"	d
GL_RGBA_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGBA_SNORM /;"	d
GL_RGB_INTEGER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB_INTEGER /;"	d
GL_RGB_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RGB_SNORM /;"	d
GL_RG_INTEGER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG_INTEGER /;"	d
GL_RG_SNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RG_SNORM /;"	d
GL_RIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_RIGHT /;"	d
GL_SAMPLER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER /;"	d
GL_SAMPLER_1D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_1D /;"	d
GL_SAMPLER_1D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_1D_ARRAY /;"	d
GL_SAMPLER_1D_ARRAY_SHADOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_1D_ARRAY_SHADOW /;"	d
GL_SAMPLER_1D_SHADOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_1D_SHADOW /;"	d
GL_SAMPLER_2D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D /;"	d
GL_SAMPLER_2D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_ARRAY /;"	d
GL_SAMPLER_2D_ARRAY_SHADOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_ARRAY_SHADOW /;"	d
GL_SAMPLER_2D_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_MULTISAMPLE /;"	d
GL_SAMPLER_2D_MULTISAMPLE_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_MULTISAMPLE_ARRAY /;"	d
GL_SAMPLER_2D_RECT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_RECT /;"	d
GL_SAMPLER_2D_RECT_SHADOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_RECT_SHADOW /;"	d
GL_SAMPLER_2D_SHADOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_2D_SHADOW /;"	d
GL_SAMPLER_3D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_3D /;"	d
GL_SAMPLER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_BINDING /;"	d
GL_SAMPLER_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_BUFFER /;"	d
GL_SAMPLER_CUBE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE /;"	d
GL_SAMPLER_CUBE_MAP_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_MAP_ARRAY /;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_MAP_ARRAY_ARB /;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW /;"	d
GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB /;"	d
GL_SAMPLER_CUBE_SHADOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLER_CUBE_SHADOW /;"	d
GL_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLES /;"	d
GL_SAMPLES_PASSED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLES_PASSED /;"	d
GL_SAMPLE_ALPHA_TO_COVERAGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_ALPHA_TO_COVERAGE /;"	d
GL_SAMPLE_ALPHA_TO_ONE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_ALPHA_TO_ONE /;"	d
GL_SAMPLE_BUFFERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_BUFFERS /;"	d
GL_SAMPLE_COVERAGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_COVERAGE /;"	d
GL_SAMPLE_COVERAGE_INVERT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_COVERAGE_INVERT /;"	d
GL_SAMPLE_COVERAGE_VALUE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_COVERAGE_VALUE /;"	d
GL_SAMPLE_MASK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_MASK /;"	d
GL_SAMPLE_MASK_VALUE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_MASK_VALUE /;"	d
GL_SAMPLE_POSITION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_POSITION /;"	d
GL_SAMPLE_SHADING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_SHADING /;"	d
GL_SAMPLE_SHADING_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SAMPLE_SHADING_ARB /;"	d
GL_SCISSOR_BOX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SCISSOR_BOX /;"	d
GL_SCISSOR_TEST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SCISSOR_TEST /;"	d
GL_SEPARATE_ATTRIBS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SEPARATE_ATTRIBS /;"	d
GL_SET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SET /;"	d
GL_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER /;"	d
GL_SHADER_BINARY_FORMATS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_BINARY_FORMATS /;"	d
GL_SHADER_COMPILER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_COMPILER /;"	d
GL_SHADER_IMAGE_ACCESS_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT /;"	d
GL_SHADER_IMAGE_ATOMIC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_IMAGE_ATOMIC /;"	d
GL_SHADER_IMAGE_LOAD	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_IMAGE_LOAD /;"	d
GL_SHADER_IMAGE_STORE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_IMAGE_STORE /;"	d
GL_SHADER_INCLUDE_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_INCLUDE_ARB /;"	d
GL_SHADER_SOURCE_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_SOURCE_LENGTH /;"	d
GL_SHADER_STORAGE_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BARRIER_BIT /;"	d
GL_SHADER_STORAGE_BLOCK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BLOCK /;"	d
GL_SHADER_STORAGE_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER /;"	d
GL_SHADER_STORAGE_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER_BINDING /;"	d
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT /;"	d
GL_SHADER_STORAGE_BUFFER_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER_SIZE /;"	d
GL_SHADER_STORAGE_BUFFER_START	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_STORAGE_BUFFER_START /;"	d
GL_SHADER_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADER_TYPE /;"	d
GL_SHADING_LANGUAGE_VERSION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHADING_LANGUAGE_VERSION /;"	d
GL_SHORT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SHORT /;"	d
GL_SIGNALED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIGNALED /;"	d
GL_SIGNED_NORMALIZED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIGNED_NORMALIZED /;"	d
GL_SILENCE_DEPRECATION	imgui/examples/example_glfw_opengl2/main.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SILENCE_DEPRECATION	imgui/examples/imgui_impl_opengl2.cpp	/^#define GL_SILENCE_DEPRECATION$/;"	d	file:
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST /;"	d
GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE /;"	d
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST /;"	d
GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE /;"	d
GL_SMOOTH_LINE_WIDTH_GRANULARITY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SMOOTH_LINE_WIDTH_GRANULARITY /;"	d
GL_SMOOTH_LINE_WIDTH_RANGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SMOOTH_LINE_WIDTH_RANGE /;"	d
GL_SMOOTH_POINT_SIZE_GRANULARITY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SMOOTH_POINT_SIZE_GRANULARITY /;"	d
GL_SMOOTH_POINT_SIZE_RANGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SMOOTH_POINT_SIZE_RANGE /;"	d
GL_SRC1_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC1_ALPHA /;"	d
GL_SRC1_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC1_COLOR /;"	d
GL_SRC_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC_ALPHA /;"	d
GL_SRC_ALPHA_SATURATE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC_ALPHA_SATURATE /;"	d
GL_SRC_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRC_COLOR /;"	d
GL_SRGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB /;"	d
GL_SRGB8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB8 /;"	d
GL_SRGB8_ALPHA8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB8_ALPHA8 /;"	d
GL_SRGB_ALPHA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB_ALPHA /;"	d
GL_SRGB_DECODE_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB_DECODE_ARB /;"	d
GL_SRGB_READ	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB_READ /;"	d
GL_SRGB_WRITE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SRGB_WRITE /;"	d
GL_STACK_OVERFLOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STACK_OVERFLOW /;"	d
GL_STACK_UNDERFLOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STACK_UNDERFLOW /;"	d
GL_STATIC_COPY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STATIC_COPY /;"	d
GL_STATIC_DRAW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STATIC_DRAW /;"	d
GL_STATIC_READ	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STATIC_READ /;"	d
GL_STENCIL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL /;"	d
GL_STENCIL_ATTACHMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_ATTACHMENT /;"	d
GL_STENCIL_BACK_FAIL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_FAIL /;"	d
GL_STENCIL_BACK_FUNC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_FUNC /;"	d
GL_STENCIL_BACK_PASS_DEPTH_FAIL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_PASS_DEPTH_FAIL /;"	d
GL_STENCIL_BACK_PASS_DEPTH_PASS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_PASS_DEPTH_PASS /;"	d
GL_STENCIL_BACK_REF	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_REF /;"	d
GL_STENCIL_BACK_VALUE_MASK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_VALUE_MASK /;"	d
GL_STENCIL_BACK_WRITEMASK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BACK_WRITEMASK /;"	d
GL_STENCIL_BUFFER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_BUFFER_BIT /;"	d
GL_STENCIL_CLEAR_VALUE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_CLEAR_VALUE /;"	d
GL_STENCIL_COMPONENTS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_COMPONENTS /;"	d
GL_STENCIL_FAIL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_FAIL /;"	d
GL_STENCIL_FUNC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_FUNC /;"	d
GL_STENCIL_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX /;"	d
GL_STENCIL_INDEX1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX1 /;"	d
GL_STENCIL_INDEX16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX16 /;"	d
GL_STENCIL_INDEX4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX4 /;"	d
GL_STENCIL_INDEX8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_INDEX8 /;"	d
GL_STENCIL_PASS_DEPTH_FAIL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_PASS_DEPTH_FAIL /;"	d
GL_STENCIL_PASS_DEPTH_PASS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_PASS_DEPTH_PASS /;"	d
GL_STENCIL_REF	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_REF /;"	d
GL_STENCIL_RENDERABLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_RENDERABLE /;"	d
GL_STENCIL_TEST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_TEST /;"	d
GL_STENCIL_VALUE_MASK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_VALUE_MASK /;"	d
GL_STENCIL_WRITEMASK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STENCIL_WRITEMASK /;"	d
GL_STEREO	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STEREO /;"	d
GL_STREAM_COPY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STREAM_COPY /;"	d
GL_STREAM_DRAW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STREAM_DRAW /;"	d
GL_STREAM_READ	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_STREAM_READ /;"	d
GL_SUBPIXEL_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SUBPIXEL_BITS /;"	d
GL_SYNC_CL_EVENT_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_CL_EVENT_ARB /;"	d
GL_SYNC_CL_EVENT_COMPLETE_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_CL_EVENT_COMPLETE_ARB /;"	d
GL_SYNC_CONDITION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_CONDITION /;"	d
GL_SYNC_FENCE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_FENCE /;"	d
GL_SYNC_FLAGS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_FLAGS /;"	d
GL_SYNC_FLUSH_COMMANDS_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_FLUSH_COMMANDS_BIT /;"	d
GL_SYNC_GPU_COMMANDS_COMPLETE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_GPU_COMMANDS_COMPLETE /;"	d
GL_SYNC_STATUS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_SYNC_STATUS /;"	d
GL_TESS_CONTROL_OUTPUT_VERTICES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_OUTPUT_VERTICES /;"	d
GL_TESS_CONTROL_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_SHADER /;"	d
GL_TESS_CONTROL_SHADER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_SHADER_BIT /;"	d
GL_TESS_CONTROL_SUBROUTINE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_SUBROUTINE /;"	d
GL_TESS_CONTROL_SUBROUTINE_UNIFORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_SUBROUTINE_UNIFORM /;"	d
GL_TESS_CONTROL_TEXTURE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_CONTROL_TEXTURE /;"	d
GL_TESS_EVALUATION_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_SHADER /;"	d
GL_TESS_EVALUATION_SHADER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_SHADER_BIT /;"	d
GL_TESS_EVALUATION_SUBROUTINE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_SUBROUTINE /;"	d
GL_TESS_EVALUATION_SUBROUTINE_UNIFORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM /;"	d
GL_TESS_EVALUATION_TEXTURE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_EVALUATION_TEXTURE /;"	d
GL_TESS_GEN_MODE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_GEN_MODE /;"	d
GL_TESS_GEN_POINT_MODE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_GEN_POINT_MODE /;"	d
GL_TESS_GEN_SPACING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_GEN_SPACING /;"	d
GL_TESS_GEN_VERTEX_ORDER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TESS_GEN_VERTEX_ORDER /;"	d
GL_TEXTURE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE /;"	d
GL_TEXTURE0	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE0 /;"	d
GL_TEXTURE1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE1 /;"	d
GL_TEXTURE10	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE10 /;"	d
GL_TEXTURE11	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE11 /;"	d
GL_TEXTURE12	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE12 /;"	d
GL_TEXTURE13	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE13 /;"	d
GL_TEXTURE14	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE14 /;"	d
GL_TEXTURE15	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE15 /;"	d
GL_TEXTURE16	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE16 /;"	d
GL_TEXTURE17	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE17 /;"	d
GL_TEXTURE18	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE18 /;"	d
GL_TEXTURE19	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE19 /;"	d
GL_TEXTURE2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE2 /;"	d
GL_TEXTURE20	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE20 /;"	d
GL_TEXTURE21	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE21 /;"	d
GL_TEXTURE22	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE22 /;"	d
GL_TEXTURE23	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE23 /;"	d
GL_TEXTURE24	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE24 /;"	d
GL_TEXTURE25	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE25 /;"	d
GL_TEXTURE26	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE26 /;"	d
GL_TEXTURE27	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE27 /;"	d
GL_TEXTURE28	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE28 /;"	d
GL_TEXTURE29	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE29 /;"	d
GL_TEXTURE3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE3 /;"	d
GL_TEXTURE30	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE30 /;"	d
GL_TEXTURE31	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE31 /;"	d
GL_TEXTURE4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE4 /;"	d
GL_TEXTURE5	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE5 /;"	d
GL_TEXTURE6	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE6 /;"	d
GL_TEXTURE7	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE7 /;"	d
GL_TEXTURE8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE8 /;"	d
GL_TEXTURE9	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE9 /;"	d
GL_TEXTURE_1D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_1D /;"	d
GL_TEXTURE_1D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_1D_ARRAY /;"	d
GL_TEXTURE_2D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_2D /;"	d
GL_TEXTURE_2D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_2D_ARRAY /;"	d
GL_TEXTURE_2D_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_2D_MULTISAMPLE /;"	d
GL_TEXTURE_2D_MULTISAMPLE_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_2D_MULTISAMPLE_ARRAY /;"	d
GL_TEXTURE_3D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_3D /;"	d
GL_TEXTURE_ALPHA_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_ALPHA_SIZE /;"	d
GL_TEXTURE_ALPHA_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_ALPHA_TYPE /;"	d
GL_TEXTURE_BASE_LEVEL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BASE_LEVEL /;"	d
GL_TEXTURE_BINDING_1D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_1D /;"	d
GL_TEXTURE_BINDING_1D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_1D_ARRAY /;"	d
GL_TEXTURE_BINDING_2D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_2D /;"	d
GL_TEXTURE_BINDING_2D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_2D_ARRAY /;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_2D_MULTISAMPLE /;"	d
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY /;"	d
GL_TEXTURE_BINDING_3D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_3D /;"	d
GL_TEXTURE_BINDING_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_BUFFER /;"	d
GL_TEXTURE_BINDING_CUBE_MAP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_CUBE_MAP /;"	d
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY /;"	d
GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB /;"	d
GL_TEXTURE_BINDING_RECTANGLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BINDING_RECTANGLE /;"	d
GL_TEXTURE_BLUE_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BLUE_SIZE /;"	d
GL_TEXTURE_BLUE_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BLUE_TYPE /;"	d
GL_TEXTURE_BORDER_COLOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BORDER_COLOR /;"	d
GL_TEXTURE_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER /;"	d
GL_TEXTURE_BUFFER_DATA_STORE_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER_DATA_STORE_BINDING /;"	d
GL_TEXTURE_BUFFER_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER_OFFSET /;"	d
GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT /;"	d
GL_TEXTURE_BUFFER_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_BUFFER_SIZE /;"	d
GL_TEXTURE_COMPARE_FUNC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPARE_FUNC /;"	d
GL_TEXTURE_COMPARE_MODE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPARE_MODE /;"	d
GL_TEXTURE_COMPRESSED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED /;"	d
GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT /;"	d
GL_TEXTURE_COMPRESSED_BLOCK_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED_BLOCK_SIZE /;"	d
GL_TEXTURE_COMPRESSED_BLOCK_WIDTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH /;"	d
GL_TEXTURE_COMPRESSED_IMAGE_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSED_IMAGE_SIZE /;"	d
GL_TEXTURE_COMPRESSION_HINT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_COMPRESSION_HINT /;"	d
GL_TEXTURE_CUBE_MAP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP /;"	d
GL_TEXTURE_CUBE_MAP_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_ARRAY /;"	d
GL_TEXTURE_CUBE_MAP_ARRAY_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_ARRAY_ARB /;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_X	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_NEGATIVE_X /;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y /;"	d
GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z /;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_X	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_POSITIVE_X /;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Y	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_POSITIVE_Y /;"	d
GL_TEXTURE_CUBE_MAP_POSITIVE_Z	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_POSITIVE_Z /;"	d
GL_TEXTURE_CUBE_MAP_SEAMLESS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_CUBE_MAP_SEAMLESS /;"	d
GL_TEXTURE_DEPTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_DEPTH /;"	d
GL_TEXTURE_DEPTH_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_DEPTH_SIZE /;"	d
GL_TEXTURE_DEPTH_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_DEPTH_TYPE /;"	d
GL_TEXTURE_FETCH_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_FETCH_BARRIER_BIT /;"	d
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS /;"	d
GL_TEXTURE_GATHER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_GATHER /;"	d
GL_TEXTURE_GATHER_SHADOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_GATHER_SHADOW /;"	d
GL_TEXTURE_GREEN_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_GREEN_SIZE /;"	d
GL_TEXTURE_GREEN_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_GREEN_TYPE /;"	d
GL_TEXTURE_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_HEIGHT /;"	d
GL_TEXTURE_IMAGE_FORMAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_IMAGE_FORMAT /;"	d
GL_TEXTURE_IMAGE_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_IMAGE_TYPE /;"	d
GL_TEXTURE_IMMUTABLE_FORMAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_IMMUTABLE_FORMAT /;"	d
GL_TEXTURE_IMMUTABLE_LEVELS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_IMMUTABLE_LEVELS /;"	d
GL_TEXTURE_INTERNAL_FORMAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_INTERNAL_FORMAT /;"	d
GL_TEXTURE_LOD_BIAS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_LOD_BIAS /;"	d
GL_TEXTURE_MAG_FILTER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MAG_FILTER /;"	d
GL_TEXTURE_MAX_LEVEL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MAX_LEVEL /;"	d
GL_TEXTURE_MAX_LOD	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MAX_LOD /;"	d
GL_TEXTURE_MIN_FILTER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MIN_FILTER /;"	d
GL_TEXTURE_MIN_LOD	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_MIN_LOD /;"	d
GL_TEXTURE_RECTANGLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_RECTANGLE /;"	d
GL_TEXTURE_RED_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_RED_SIZE /;"	d
GL_TEXTURE_RED_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_RED_TYPE /;"	d
GL_TEXTURE_SAMPLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SAMPLES /;"	d
GL_TEXTURE_SHADOW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SHADOW /;"	d
GL_TEXTURE_SHARED_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SHARED_SIZE /;"	d
GL_TEXTURE_STENCIL_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_STENCIL_SIZE /;"	d
GL_TEXTURE_SWIZZLE_A	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_A /;"	d
GL_TEXTURE_SWIZZLE_B	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_B /;"	d
GL_TEXTURE_SWIZZLE_G	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_G /;"	d
GL_TEXTURE_SWIZZLE_R	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_R /;"	d
GL_TEXTURE_SWIZZLE_RGBA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_SWIZZLE_RGBA /;"	d
GL_TEXTURE_UPDATE_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_UPDATE_BARRIER_BIT /;"	d
GL_TEXTURE_VIEW	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW /;"	d
GL_TEXTURE_VIEW_MIN_LAYER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW_MIN_LAYER /;"	d
GL_TEXTURE_VIEW_MIN_LEVEL	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW_MIN_LEVEL /;"	d
GL_TEXTURE_VIEW_NUM_LAYERS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW_NUM_LAYERS /;"	d
GL_TEXTURE_VIEW_NUM_LEVELS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_VIEW_NUM_LEVELS /;"	d
GL_TEXTURE_WIDTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_WIDTH /;"	d
GL_TEXTURE_WRAP_R	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_WRAP_R /;"	d
GL_TEXTURE_WRAP_S	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_WRAP_S /;"	d
GL_TEXTURE_WRAP_T	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TEXTURE_WRAP_T /;"	d
GL_TIMEOUT_EXPIRED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TIMEOUT_EXPIRED /;"	d
GL_TIMEOUT_IGNORED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TIMEOUT_IGNORED /;"	d
GL_TIMESTAMP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TIMESTAMP /;"	d
GL_TIME_ELAPSED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TIME_ELAPSED /;"	d
GL_TOP_LEVEL_ARRAY_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TOP_LEVEL_ARRAY_SIZE /;"	d
GL_TOP_LEVEL_ARRAY_STRIDE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TOP_LEVEL_ARRAY_STRIDE /;"	d
GL_TRANSFORM_FEEDBACK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK /;"	d
GL_TRANSFORM_FEEDBACK_ACTIVE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_ACTIVE /;"	d
GL_TRANSFORM_FEEDBACK_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BARRIER_BIT /;"	d
GL_TRANSFORM_FEEDBACK_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BINDING /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_MODE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_MODE /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE /;"	d
GL_TRANSFORM_FEEDBACK_BUFFER_START	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_BUFFER_START /;"	d
GL_TRANSFORM_FEEDBACK_PAUSED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_PAUSED /;"	d
GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN /;"	d
GL_TRANSFORM_FEEDBACK_VARYING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_VARYING /;"	d
GL_TRANSFORM_FEEDBACK_VARYINGS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_VARYINGS /;"	d
GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH /;"	d
GL_TRIANGLES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLES /;"	d
GL_TRIANGLES_ADJACENCY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLES_ADJACENCY /;"	d
GL_TRIANGLE_FAN	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLE_FAN /;"	d
GL_TRIANGLE_STRIP	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLE_STRIP /;"	d
GL_TRIANGLE_STRIP_ADJACENCY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRIANGLE_STRIP_ADJACENCY /;"	d
GL_TRUE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TRUE /;"	d
GL_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_TYPE /;"	d
GL_UNDEFINED_VERTEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNDEFINED_VERTEX /;"	d
GL_UNIFORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM /;"	d
GL_UNIFORM_ARRAY_STRIDE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_ARRAY_STRIDE /;"	d
GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX /;"	d
GL_UNIFORM_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BARRIER_BIT /;"	d
GL_UNIFORM_BLOCK	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK /;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS /;"	d
GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES /;"	d
GL_UNIFORM_BLOCK_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_BINDING /;"	d
GL_UNIFORM_BLOCK_DATA_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_DATA_SIZE /;"	d
GL_UNIFORM_BLOCK_INDEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_INDEX /;"	d
GL_UNIFORM_BLOCK_NAME_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_NAME_LENGTH /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER /;"	d
GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER /;"	d
GL_UNIFORM_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER /;"	d
GL_UNIFORM_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER_BINDING /;"	d
GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT /;"	d
GL_UNIFORM_BUFFER_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER_SIZE /;"	d
GL_UNIFORM_BUFFER_START	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_BUFFER_START /;"	d
GL_UNIFORM_IS_ROW_MAJOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_IS_ROW_MAJOR /;"	d
GL_UNIFORM_MATRIX_STRIDE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_MATRIX_STRIDE /;"	d
GL_UNIFORM_NAME_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_NAME_LENGTH /;"	d
GL_UNIFORM_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_OFFSET /;"	d
GL_UNIFORM_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_SIZE /;"	d
GL_UNIFORM_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNIFORM_TYPE /;"	d
GL_UNKNOWN_CONTEXT_RESET_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNKNOWN_CONTEXT_RESET_ARB /;"	d
GL_UNPACK_ALIGNMENT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_ALIGNMENT /;"	d
GL_UNPACK_COMPRESSED_BLOCK_DEPTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_COMPRESSED_BLOCK_DEPTH /;"	d
GL_UNPACK_COMPRESSED_BLOCK_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT /;"	d
GL_UNPACK_COMPRESSED_BLOCK_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_COMPRESSED_BLOCK_SIZE /;"	d
GL_UNPACK_COMPRESSED_BLOCK_WIDTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_COMPRESSED_BLOCK_WIDTH /;"	d
GL_UNPACK_IMAGE_HEIGHT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_IMAGE_HEIGHT /;"	d
GL_UNPACK_LSB_FIRST	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_LSB_FIRST /;"	d
GL_UNPACK_ROW_LENGTH	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_ROW_LENGTH /;"	d
GL_UNPACK_SKIP_IMAGES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_SKIP_IMAGES /;"	d
GL_UNPACK_SKIP_PIXELS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_SKIP_PIXELS /;"	d
GL_UNPACK_SKIP_ROWS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_SKIP_ROWS /;"	d
GL_UNPACK_SWAP_BYTES	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNPACK_SWAP_BYTES /;"	d
GL_UNSIGNALED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNALED /;"	d
GL_UNSIGNED_BYTE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_BYTE /;"	d
GL_UNSIGNED_BYTE_2_3_3_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_BYTE_2_3_3_REV /;"	d
GL_UNSIGNED_BYTE_3_3_2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_BYTE_3_3_2 /;"	d
GL_UNSIGNED_INT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT /;"	d
GL_UNSIGNED_INT_10F_11F_11F_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_10F_11F_11F_REV /;"	d
GL_UNSIGNED_INT_10_10_10_2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_10_10_10_2 /;"	d
GL_UNSIGNED_INT_24_8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_24_8 /;"	d
GL_UNSIGNED_INT_2_10_10_10_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_2_10_10_10_REV /;"	d
GL_UNSIGNED_INT_5_9_9_9_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_5_9_9_9_REV /;"	d
GL_UNSIGNED_INT_8_8_8_8	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_8_8_8_8 /;"	d
GL_UNSIGNED_INT_8_8_8_8_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_8_8_8_8_REV /;"	d
GL_UNSIGNED_INT_ATOMIC_COUNTER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_ATOMIC_COUNTER /;"	d
GL_UNSIGNED_INT_IMAGE_1D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_1D /;"	d
GL_UNSIGNED_INT_IMAGE_1D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_1D_ARRAY /;"	d
GL_UNSIGNED_INT_IMAGE_2D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D /;"	d
GL_UNSIGNED_INT_IMAGE_2D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D_ARRAY /;"	d
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE /;"	d
GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY /;"	d
GL_UNSIGNED_INT_IMAGE_2D_RECT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_2D_RECT /;"	d
GL_UNSIGNED_INT_IMAGE_3D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_3D /;"	d
GL_UNSIGNED_INT_IMAGE_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_BUFFER /;"	d
GL_UNSIGNED_INT_IMAGE_CUBE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_CUBE /;"	d
GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_1D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_1D /;"	d
GL_UNSIGNED_INT_SAMPLER_1D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_2D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_2D_RECT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_2D_RECT /;"	d
GL_UNSIGNED_INT_SAMPLER_3D	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_3D /;"	d
GL_UNSIGNED_INT_SAMPLER_BUFFER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_BUFFER /;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_CUBE /;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY /;"	d
GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB /;"	d
GL_UNSIGNED_INT_VEC2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_VEC2 /;"	d
GL_UNSIGNED_INT_VEC3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_VEC3 /;"	d
GL_UNSIGNED_INT_VEC4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_INT_VEC4 /;"	d
GL_UNSIGNED_NORMALIZED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_NORMALIZED /;"	d
GL_UNSIGNED_SHORT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT /;"	d
GL_UNSIGNED_SHORT_1_5_5_5_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_1_5_5_5_REV /;"	d
GL_UNSIGNED_SHORT_4_4_4_4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_4_4_4_4 /;"	d
GL_UNSIGNED_SHORT_4_4_4_4_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_4_4_4_4_REV /;"	d
GL_UNSIGNED_SHORT_5_5_5_1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_5_5_5_1 /;"	d
GL_UNSIGNED_SHORT_5_6_5	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_5_6_5 /;"	d
GL_UNSIGNED_SHORT_5_6_5_REV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UNSIGNED_SHORT_5_6_5_REV /;"	d
GL_UPPER_LEFT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_UPPER_LEFT /;"	d
GL_VALIDATE_STATUS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VALIDATE_STATUS /;"	d
GL_VENDOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VENDOR /;"	d
GL_VERSION	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION /;"	d
GL_VERSION_1_0	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_0 /;"	d
GL_VERSION_1_1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_1 /;"	d
GL_VERSION_1_2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_2 /;"	d
GL_VERSION_1_3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_3 /;"	d
GL_VERSION_1_4	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_4 /;"	d
GL_VERSION_1_5	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_1_5 /;"	d
GL_VERSION_2_0	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_2_0 /;"	d
GL_VERSION_2_1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_2_1 /;"	d
GL_VERSION_3_0	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_3_0 /;"	d
GL_VERSION_3_1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_3_1 /;"	d
GL_VERSION_3_2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_3_2 /;"	d
GL_VERSION_3_3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_3_3 /;"	d
GL_VERSION_4_0	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_4_0 /;"	d
GL_VERSION_4_1	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_4_1 /;"	d
GL_VERSION_4_2	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_4_2 /;"	d
GL_VERSION_4_3	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERSION_4_3 /;"	d
GL_VERTEX_ARRAY_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ARRAY_BINDING /;"	d
GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT /;"	d
GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING /;"	d
GL_VERTEX_ATTRIB_ARRAY_DIVISOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_DIVISOR /;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_ENABLED /;"	d
GL_VERTEX_ATTRIB_ARRAY_INTEGER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_INTEGER /;"	d
GL_VERTEX_ATTRIB_ARRAY_LONG	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_LONG /;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED /;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_POINTER /;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_SIZE /;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_STRIDE /;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_ARRAY_TYPE /;"	d
GL_VERTEX_ATTRIB_BINDING	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_BINDING /;"	d
GL_VERTEX_ATTRIB_RELATIVE_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_ATTRIB_RELATIVE_OFFSET /;"	d
GL_VERTEX_BINDING_DIVISOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_BINDING_DIVISOR /;"	d
GL_VERTEX_BINDING_OFFSET	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_BINDING_OFFSET /;"	d
GL_VERTEX_BINDING_STRIDE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_BINDING_STRIDE /;"	d
GL_VERTEX_PROGRAM_POINT_SIZE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_PROGRAM_POINT_SIZE /;"	d
GL_VERTEX_SHADER	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_SHADER /;"	d
GL_VERTEX_SHADER_BIT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_SHADER_BIT /;"	d
GL_VERTEX_SUBROUTINE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_SUBROUTINE /;"	d
GL_VERTEX_SUBROUTINE_UNIFORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_SUBROUTINE_UNIFORM /;"	d
GL_VERTEX_TEXTURE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VERTEX_TEXTURE /;"	d
GL_VIEWPORT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEWPORT /;"	d
GL_VIEWPORT_BOUNDS_RANGE	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEWPORT_BOUNDS_RANGE /;"	d
GL_VIEWPORT_INDEX_PROVOKING_VERTEX	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEWPORT_INDEX_PROVOKING_VERTEX /;"	d
GL_VIEWPORT_SUBPIXEL_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEWPORT_SUBPIXEL_BITS /;"	d
GL_VIEW_CLASS_128_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_128_BITS /;"	d
GL_VIEW_CLASS_16_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_16_BITS /;"	d
GL_VIEW_CLASS_24_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_24_BITS /;"	d
GL_VIEW_CLASS_32_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_32_BITS /;"	d
GL_VIEW_CLASS_48_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_48_BITS /;"	d
GL_VIEW_CLASS_64_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_64_BITS /;"	d
GL_VIEW_CLASS_8_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_8_BITS /;"	d
GL_VIEW_CLASS_96_BITS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_96_BITS /;"	d
GL_VIEW_CLASS_BPTC_FLOAT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_BPTC_FLOAT /;"	d
GL_VIEW_CLASS_BPTC_UNORM	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_BPTC_UNORM /;"	d
GL_VIEW_CLASS_RGTC1_RED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_RGTC1_RED /;"	d
GL_VIEW_CLASS_RGTC2_RG	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_RGTC2_RG /;"	d
GL_VIEW_CLASS_S3TC_DXT1_RGB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_S3TC_DXT1_RGB /;"	d
GL_VIEW_CLASS_S3TC_DXT1_RGBA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_S3TC_DXT1_RGBA /;"	d
GL_VIEW_CLASS_S3TC_DXT3_RGBA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_S3TC_DXT3_RGBA /;"	d
GL_VIEW_CLASS_S3TC_DXT5_RGBA	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_CLASS_S3TC_DXT5_RGBA /;"	d
GL_VIEW_COMPATIBILITY_CLASS	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_VIEW_COMPATIBILITY_CLASS /;"	d
GL_WAIT_FAILED	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_WAIT_FAILED /;"	d
GL_WRITE_ONLY	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_WRITE_ONLY /;"	d
GL_XOR	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_XOR /;"	d
GL_ZERO	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define GL_ZERO /;"	d
GLbitfield	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned int GLbitfield;$/;"	t	typeref:typename:unsigned int
GLboolean	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned char GLboolean;$/;"	t	typeref:typename:unsigned char
GLbyte	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef signed char GLbyte;$/;"	t	typeref:typename:signed char
GLchar	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef char GLchar;$/;"	t	typeref:typename:char
GLcharARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef char GLcharARB;$/;"	t	typeref:typename:char
GLclampd	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef double GLclampd;$/;"	t	typeref:typename:double
GLclampf	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef float GLclampf;$/;"	t	typeref:typename:float
GLdouble	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef double GLdouble;$/;"	t	typeref:typename:double
GLenum	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned int GLenum;$/;"	t	typeref:typename:unsigned int
GLfloat	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef float GLfloat;$/;"	t	typeref:typename:float
GLhalf	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned short GLhalf;$/;"	t	typeref:typename:unsigned short
GLhalfARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned short GLhalfARB;$/;"	t	typeref:typename:unsigned short
GLhalfNV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned short GLhalfNV;$/;"	t	typeref:typename:unsigned short
GLhandleARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned int GLhandleARB;$/;"	t	typeref:typename:unsigned int
GLint	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef int GLint;$/;"	t	typeref:typename:int
GLint64	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef int64_t GLint64;$/;"	t	typeref:typename:int64_t
GLint64EXT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef int64_t GLint64EXT;$/;"	t	typeref:typename:int64_t
GLintptr	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef ptrdiff_t GLintptr;$/;"	t	typeref:typename:ptrdiff_t
GLintptrARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef ptrdiff_t GLintptrARB;$/;"	t	typeref:typename:ptrdiff_t
GLshort	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef short GLshort;$/;"	t	typeref:typename:short
GLsizei	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef int GLsizei;$/;"	t	typeref:typename:int
GLsizeiptr	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef ptrdiff_t GLsizeiptr;$/;"	t	typeref:typename:ptrdiff_t
GLsizeiptrARB	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef ptrdiff_t GLsizeiptrARB;$/;"	t	typeref:typename:ptrdiff_t
GLsync	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync *
GLubyte	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned char GLubyte;$/;"	t	typeref:typename:unsigned char
GLuint	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned int GLuint;$/;"	t	typeref:typename:unsigned int
GLuint64	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef uint64_t GLuint64;$/;"	t	typeref:typename:uint64_t
GLuint64EXT	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef uint64_t GLuint64EXT;$/;"	t	typeref:typename:uint64_t
GLushort	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned short GLushort;$/;"	t	typeref:typename:unsigned short
GLvdpauSurfaceNV	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLintptr GLvdpauSurfaceNV;$/;"	t	typeref:typename:GLintptr
GLvoid	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void GLvoid;$/;"	t	typeref:typename:void
GS	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10GeometryShader*       GS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10GeometryShader *	file:
GS	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11GeometryShader*       GS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11GeometryShader *	file:
GSInstances	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   \//;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ClassInstance * [256]* [256]* [256]	file:
GSInstancesCount	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
GStyleVarInfo	imgui/imgui.cpp	/^static const ImGuiStyleVarInfo GStyleVarInfo[] =$/;"	v	typeref:typename:const ImGuiStyleVarInfo[]	file:
Gallery	imgui/docs/README.md	/^### Gallery$/;"	S
Gamma Correct Blending	imgui/misc/freetype/README.md	/^### Gamma Correct Blending$/;"	S
GcAwakeTransientWindowBuffers	imgui/imgui.cpp	/^void ImGui::GcAwakeTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GcCompactTransientWindowBuffers	imgui/imgui.cpp	/^void ImGui::GcCompactTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GetActiveID	imgui/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetBL	imgui/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBR	imgui/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBackgroundDrawList	imgui/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBit	imgui/imgui.h	/^    inline bool     GetBit(int n) const { int off = (n >> 5); ImU32 mask = 1u << (n & 31); retur/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:bool
GetBit	imgui/imgui_internal.h	/^    bool            GetBit(int n) const     { int off = (n >> 5); int mask = 1 << (n & 31); retu/;"	f	struct:ImBoolVector	typeref:typename:bool
GetBool	imgui/imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:bool
GetBoolRef	imgui/imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage	typeref:typename:bool *
GetByIndex	imgui/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Buf[n]; }$/;"	f	struct:ImPool	typeref:typename:T *
GetByKey	imgui/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx/;"	f	struct:ImPool	typeref:typename:T *
GetCenter	imgui/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min/;"	f	struct:ImRect	typeref:typename:ImVec2
GetCharAdvance	imgui/imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdva/;"	f	struct:ImFont	typeref:typename:float
GetClipRectMax	imgui/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipRectMin	imgui/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipboardText	imgui/imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui	typeref:typename:const char *
GetClipboardTextFn	imgui/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO	typeref:typename:const char * (*)(void * user_data)
GetClipboardTextFn_DefaultImpl	imgui/imgui.cpp	/^static const char* GetClipboardTextFn_DefaultImpl(void*)$/;"	f	typeref:typename:const char *	file:
GetColorU32	imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	imgui/imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColumnIndex	imgui/imgui_widgets.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
GetColumnNormFromOffset	imgui/imgui_widgets.cpp	/^float ImGui::GetColumnNormFromOffset(const ImGuiColumns* columns, float offset)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffset	imgui/imgui_widgets.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffsetFromNorm	imgui/imgui_widgets.cpp	/^float ImGui::GetColumnOffsetFromNorm(const ImGuiColumns* columns, float offset_norm)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidth	imgui/imgui_widgets.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidthEx	imgui/imgui_widgets.cpp	/^static float GetColumnWidthEx(ImGuiColumns* columns, int column_index, bool before_resize = fals/;"	f	typeref:typename:float	file:
GetColumnsCount	imgui/imgui_widgets.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui	typeref:typename:int
GetColumnsID	imgui/imgui_widgets.cpp	/^ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetContentRegionAvail	imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionAvailWidth	imgui/imgui.h	/^    static inline float GetContentRegionAvailWidth()          { return GetContentRegionAvail().x/;"	f	namespace:ImGui	typeref:typename:float
GetContentRegionMax	imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMaxAbs	imgui/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMaxAbs()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCurrentClipRect	imgui/imgui_draw.cpp	/^#define GetCurrentClipRect(/;"	d	file:
GetCurrentContext	imgui/imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
GetCurrentTextureId	imgui/imgui_draw.cpp	/^#define GetCurrentTextureId(/;"	d	file:
GetCurrentWindow	imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWi/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCurrentWindowRead	imgui/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.Cu/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCursorPos	imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorPosX	imgui/imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui	typeref:typename:float
GetCursorPosY	imgui/imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui	typeref:typename:float
GetCursorScreenPos	imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorStartPos	imgui/imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCustomRectByIndex	imgui/imgui.h	/^    const ImFontAtlasCustomRect*GetCustomRectByIndex(int index) const { if (index < 0) return NU/;"	f	struct:ImFontAtlas	typeref:typename:const ImFontAtlasCustomRect *
GetDebugName	imgui/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? Config/;"	f	struct:ImFont	typeref:typename:const char *
GetDefaultCompressedFontDataTTFBase85	imgui/imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	typeref:typename:const char *	file:
GetDefaultFont	imgui/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefaul/;"	f	namespace:ImGui	typeref:typename:ImFont *
GetDragDropPayload	imgui/imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
GetDraggedColumnOffset	imgui/imgui_widgets.cpp	/^static float GetDraggedColumnOffset(ImGuiColumns* columns, int column_index)$/;"	f	typeref:typename:float	file:
GetDrawData	imgui/imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui	typeref:typename:ImDrawData *
GetDrawListSharedData	imgui/imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui	typeref:typename:ImDrawListSharedData *
GetFallbackWindowNameForWindowingList	imgui/imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	typeref:typename:const char *	file:
GetFloat	imgui/imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:float
GetFloatRef	imgui/imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage	typeref:typename:float *
GetFocusID	imgui/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFocusScopeID	imgui/imgui_internal.h	/^    inline ImGuiID          GetFocusScopeID()               { ImGuiContext& g = *GImGui; return /;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFont	imgui/imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui	typeref:typename:ImFont *
GetFontSize	imgui/imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui	typeref:typename:float
GetFontTexUvWhitePixel	imgui/imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetForegroundDrawList	imgui/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	imgui/imgui_internal.h	/^    inline ImDrawList*      GetForegroundDrawList(ImGuiWindow* window) { IM_UNUSED(window); ImGu/;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetFrameCount	imgui/imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui	typeref:typename:int
GetFrameHeight	imgui/imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui	typeref:typename:float
GetFrameHeightWithSpacing	imgui/imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetGlyphRangesChineseFull	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesChineseSimplifiedCommon	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesCyrillic	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesDefault	imgui/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesJapanese	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesKorean	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesThai	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesVietnamese	imgui/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetHeight	imgui/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect	typeref:typename:float
GetHoveredID	imgui/imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromRectangle	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDNoKeepAlive	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDNoKeepAlive	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDNoKeepAlive	imgui/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDNoKeepAlive(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIO	imgui/imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIndex	imgui/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Buf.Data && p < Buf.Data + /;"	f	struct:ImPool	typeref:typename:ImPoolIdx
GetInt	imgui/imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:int
GetIntRef	imgui/imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage	typeref:typename:int *
GetItemID	imgui/imgui_internal.h	/^    inline ImGuiID          GetItemID()     { ImGuiContext& g = *GImGui; return g.CurrentWindow-/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetItemRectMax	imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectMin	imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectSize	imgui/imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemStatusFlags	imgui/imgui_internal.h	/^    inline ImGuiItemStatusFlags GetItemStatusFlags() { ImGuiContext& g = *GImGui; return g.Curre/;"	f	namespace:ImGui	typeref:typename:ImGuiItemStatusFlags
GetKeyIndex	imgui/imgui.cpp	/^int ImGui::GetKeyIndex(ImGuiKey imgui_key)$/;"	f	class:ImGui	typeref:typename:int
GetKeyPressedAmount	imgui/imgui.cpp	/^int ImGui::GetKeyPressedAmount(int key_index, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
GetMinimumStepAtDecimalPrecision	imgui/imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	typeref:typename:float	file:
GetMouseCursor	imgui/imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui	typeref:typename:ImGuiMouseCursor
GetMouseCursorTexData	imgui/imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:bool
GetMouseDragDelta	imgui/imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePos	imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePosOnOpeningCurrentPopup	imgui/imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetName	imgui/imgui_internal.h	/^    char* GetName()             { return (char*)(this + 1); }$/;"	f	struct:ImGuiWindowSettings	typeref:typename:char *
GetNavInputAmount	imgui/imgui.cpp	/^float ImGui::GetNavInputAmount(ImGuiNavInput n, ImGuiInputReadMode mode)$/;"	f	class:ImGui	typeref:typename:float
GetNavInputAmount2d	imgui/imgui.cpp	/^ImVec2 ImGui::GetNavInputAmount2d(ImGuiNavDirSourceFlags dir_sources, ImGuiInputReadMode mode, f/;"	f	class:ImGui	typeref:typename:ImVec2
GetOrAddByKey	imgui/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*/;"	f	struct:ImPool	typeref:typename:T *
GetOverlayDrawList	imgui/imgui.h	/^    static inline ImDrawList* GetOverlayDrawList()            { return GetForegroundDrawList(); /;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetRedoAvailCount	imgui/imgui_internal.h	/^    int         GetRedoAvailCount() const   { return STB_TEXTEDIT_UNDOSTATECOUNT - Stb.undostate/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetResizeBorderRect	imgui/imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float t/;"	f	typeref:typename:ImRect	file:
GetScrollMaxX	imgui/imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollMaxY	imgui/imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollX	imgui/imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollY	imgui/imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui	typeref:typename:float
GetSize	imgui/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y/;"	f	struct:ImRect	typeref:typename:ImVec2
GetSize	imgui/imgui_internal.h	/^    int         GetSize() const                     { return Buf.Size; }$/;"	f	struct:ImPool	typeref:typename:int
GetStateStorage	imgui/imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui	typeref:typename:ImGuiStorage *
GetStyle	imgui/imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui	typeref:typename:ImGuiStyle &
GetStyleColorName	imgui/imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const char *
GetStyleColorVec4	imgui/imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const ImVec4 &
GetStyleVarInfo	imgui/imgui.cpp	/^static const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	typeref:typename:const ImGuiStyleVarInfo *	file:
GetTL	imgui/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-l/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTR	imgui/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-r/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTabBarFromTabBarRef	imgui/imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)$/;"	f	typeref:typename:ImGuiTabBar *	file:
GetTabBarRefFromTabBar	imgui/imgui_widgets.cpp	/^static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	typeref:typename:ImGuiPtrOrIndex	file:
GetTabName	imgui/imgui_internal.h	/^    const char*         GetTabName(const ImGuiTabItem* tab) const$/;"	f	struct:ImGuiTabBar	typeref:typename:const char *
GetTabOrder	imgui/imgui_internal.h	/^    int                 GetTabOrder(const ImGuiTabItem* tab) const  { return Tabs.index_from_ptr/;"	f	struct:ImGuiTabBar	typeref:typename:int
GetTexDataAsAlpha8	imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexDataAsRGBA32	imgui/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTextLineHeight	imgui/imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui	typeref:typename:float
GetTextLineHeightWithSpacing	imgui/imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTime	imgui/imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui	typeref:typename:double
GetTopMostPopupModal	imgui/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostPopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTreeNodeToLabelSpacing	imgui/imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetUndoAvailCount	imgui/imgui_internal.h	/^    int         GetUndoAvailCount() const   { return Stb.undostate.undo_point; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetVarPtr	imgui/imgui.cpp	/^    void*           GetVarPtr(ImGuiStyle* style) const { return (void*)((unsigned char*)style + /;"	f	struct:ImGuiStyleVarInfo	typeref:typename:void *	file:
GetVersion	imgui/imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui	typeref:typename:const char *
GetViewportRect	imgui/imgui.cpp	/^static ImRect GetViewportRect()$/;"	f	typeref:typename:ImRect	file:
GetVoidPtr	imgui/imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage	typeref:typename:void *
GetVoidPtrRef	imgui/imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage	typeref:typename:void **
GetWidth	imgui/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect	typeref:typename:float
GetWindowAllowedExtentRect	imgui/imgui.cpp	/^ImRect ImGui::GetWindowAllowedExtentRect(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowBgColorIdxFromFlags	imgui/imgui.cpp	/^static ImGuiCol GetWindowBgColorIdxFromFlags(ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiCol	file:
GetWindowContentRegionMax	imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionMin	imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionWidth	imgui/imgui.cpp	/^float ImGui::GetWindowContentRegionWidth()$/;"	f	class:ImGui	typeref:typename:float
GetWindowDrawList	imgui/imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetWindowHeight	imgui/imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui	typeref:typename:float
GetWindowPos	imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowRect	imgui/imgui.cpp	/^        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetWindowResizeID	imgui/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeID(ImGuiWindow* window, int n)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarID	imgui/imgui_widgets.cpp	/^ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowSize	imgui/imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowWidth	imgui/imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui	typeref:typename:float
GlfwClientApi	imgui/examples/imgui_impl_glfw.cpp	/^enum GlfwClientApi$/;"	g	file:
GlfwClientApi_OpenGL	imgui/examples/imgui_impl_glfw.cpp	/^    GlfwClientApi_OpenGL,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Unknown	imgui/examples/imgui_impl_glfw.cpp	/^    GlfwClientApi_Unknown,$/;"	e	enum:GlfwClientApi	file:
GlfwClientApi_Vulkan	imgui/examples/imgui_impl_glfw.cpp	/^    GlfwClientApi_Vulkan$/;"	e	enum:GlfwClientApi	file:
GlyphAdvanceX	imgui/imgui.h	/^    float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:float
GlyphExtraSpacing	imgui/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between/;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphInfo	imgui/misc/freetype/imgui_freetype.cpp	/^    struct GlyphInfo$/;"	s	namespace:__anon76bbacac0111	file:
GlyphMaxAdvanceX	imgui/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig	typeref:typename:float
GlyphMinAdvanceX	imgui/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set /;"	m	struct:ImFontConfig	typeref:typename:float
GlyphOffset	imgui/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font /;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphOffset	imgui/imgui.h	/^    ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImVec2
GlyphRanges	imgui/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ Pointer to a user-provided list o/;"	m	struct:ImFontConfig	typeref:typename:const ImWchar *
GlyphRangesBuilder	imgui/imgui.h	/^    typedef ImFontGlyphRangesBuilder GlyphRangesBuilder; \/\/ OBSOLETED in 1.67+$/;"	t	struct:ImFontAtlas	typeref:typename:ImFontGlyphRangesBuilder
Glyphs	imgui/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All/;"	m	struct:ImFont	typeref:typename:ImVector<ImFontGlyph>
GlyphsCount	imgui/imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsCount	imgui/imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsCount	imgui/misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:int	file:
GlyphsCount	imgui/misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:int	file:
GlyphsHighest	imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsHighest	imgui/imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsHighest	imgui/misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:int	file:
GlyphsHighest	imgui/misc/freetype/imgui_freetype.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:int	file:
GlyphsList	imgui/imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of Gly/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImVector<int>	file:
GlyphsList	imgui/misc/freetype/imgui_freetype.cpp	/^    ImVector<ImFontBuildSrcGlyphFT>   GlyphsList;$/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:ImVector<ImFontBuildSrcGlyphFT>	file:
GlyphsSet	imgui/imgui_draw.cpp	/^    ImBoolVector        GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImBoolVector	file:
GlyphsSet	imgui/imgui_draw.cpp	/^    ImBoolVector        GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstData	typeref:typename:ImBoolVector	file:
GlyphsSet	imgui/misc/freetype/imgui_freetype.cpp	/^    ImBoolVector        GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:ImBoolVector	file:
GlyphsSet	imgui/misc/freetype/imgui_freetype.cpp	/^    ImBoolVector        GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:ImBoolVector	file:
GrabMinSize	imgui/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\//;"	m	struct:ImGuiStyle	typeref:typename:float
GrabRounding	imgui/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
GroupOffset	imgui/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
GroupStack	imgui/imgui_internal.h	/^    ImVector<ImGuiGroupData>GroupStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiGroupData>
GrowIndex	imgui/imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont	typeref:typename:void
HSV	imgui/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorC/;"	f	struct:ImColor	typeref:typename:ImColor
HasCloseButton	imgui/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a c/;"	m	struct:ImGuiWindow	typeref:typename:bool
HasSelection	imgui/imgui.h	/^    bool                HasSelection() const { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:bool
HasSelection	imgui/imgui_internal.h	/^    bool        HasSelection() const        { return Stb.select_start != Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:bool
Height	imgui/examples/imgui_impl_vulkan.h	/^    int                 Height;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:int
Height	imgui/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Height	imgui/misc/freetype/imgui_freetype.cpp	/^        int         Height;             \/\/ Glyph's height in pixels.$/;"	m	struct:__anon76bbacac0111::GlyphInfo	typeref:typename:int	file:
HelpMarker	imgui/imgui_demo.cpp	/^static void HelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
Hidden	imgui/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== (HiddenF/;"	m	struct:ImGuiWindow	typeref:typename:bool
HiddenFramesCanSkipItems	imgui/imgui_internal.h	/^    int                     HiddenFramesCanSkipItems;           \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:int
HiddenFramesCannotSkipItems	imgui/imgui_internal.h	/^    int                     HiddenFramesCannotSkipItems;        \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:int
History	imgui/imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
HistoryPos	imgui/imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	typeref:typename:int	file:
HostClipRect	imgui/imgui_internal.h	/^    ImRect              HostClipRect;           \/\/ Backup of ClipRect at the time of BeginColu/;"	m	struct:ImGuiColumns	typeref:typename:ImRect
HostCursorMaxPosX	imgui/imgui_internal.h	/^    float               HostCursorMaxPosX;      \/\/ Backup of CursorMaxPos at the time of Begin/;"	m	struct:ImGuiColumns	typeref:typename:float
HostCursorPosY	imgui/imgui_internal.h	/^    float               HostCursorPosY;         \/\/ Backup of CursorPos at the time of BeginCol/;"	m	struct:ImGuiColumns	typeref:typename:float
HostWorkRect	imgui/imgui_internal.h	/^    ImRect              HostWorkRect;           \/\/ Backup of WorkRect at the time of BeginColu/;"	m	struct:ImGuiColumns	typeref:typename:ImRect
HoveredId	imgui/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdAllowOverlap	imgui/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdNotActiveTimer	imgui/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdPreviousFrame	imgui/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdTimer	imgui/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredRootWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredRootWindow;                  \/\/ Will catch mouse inputs (fo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Will catch mouse inputs$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
How it works	imgui/docs/README.md	/^### How it works$/;"	S
How to Build	imgui/examples/example_allegro5/README.md	/^# How to Build$/;"	c
How to Build	imgui/examples/example_emscripten/README.md	/^# How to Build$/;"	c
How to Build	imgui/examples/example_sdl_opengl2/README.md	/^# How to Build$/;"	c
How to Build	imgui/examples/example_sdl_opengl3/README.md	/^# How to Build$/;"	c
How to help	imgui/docs/README.md	/^How to help$/;"	s
ID	imgui/imgui.h	/^    unsigned int    ID;             \/\/ Input    \/\/ User ID. Use < 0x110000 to map into a fon/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int
ID	imgui/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHashStr(Name)$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ID	imgui/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiID
ID	imgui/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
ID	imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiColumns	typeref:typename:ImGuiID
ID	imgui/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiID
ID	imgui/imgui_internal.h	/^    ImGuiID         ID;                 \/\/ Best candidate ID$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImGuiID
ID	imgui/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
ID	shader_class.h	/^    unsigned int ID;$/;"	m	class:Shader	typeref:typename:unsigned int
IDStack	imgui/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes see/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiID>
IMGUI_API	imgui/imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CDECL	imgui/imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	imgui/imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_CHECKVERSION	imgui/imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_DEBUG_INI_SETTINGS	imgui/imgui.cpp	/^#define IMGUI_DEBUG_INI_SETTINGS /;"	d	file:
IMGUI_DEBUG_LOG	imgui/imgui_internal.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_NAV_RECTS	imgui/imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	imgui/imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui/imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui/imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	imgui/imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DIR	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^set(IMGUI_DIR ..\/..\/)$/;"	v
IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS	imgui/imgui_internal.h	/^#define IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS$/;"	d
IMGUI_DISABLE_TTY_FUNCTIONS	imgui/imgui_internal.h	/^#define IMGUI_DISABLE_TTY_FUNCTIONS /;"	d
IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS	imgui/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS	imgui/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS$/;"	d	file:
IMGUI_IMPL_API	imgui/examples/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_CreateDeviceObjects(id<MTLDevice> device);$/;"	C	protocol:MTLDevice
IMGUI_IMPL_API	imgui/examples/imgui_impl_metal.h	/^IMGUI_IMPL_API void ImGui_ImplMetal_NewFrame(MTLRenderPassDescriptor *renderPassDescriptor);$/;"	C	protocol:MTLDevice
IMGUI_IMPL_API	imgui/imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_IMPL_OPENGL_ES2	imgui/examples/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_ES2 /;"	d	file:
IMGUI_IMPL_OPENGL_ES3	imgui/examples/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_ES3 /;"	d	file:
IMGUI_IMPL_OPENGL_LOADER_GL3W	imgui/examples/imgui_impl_opengl3.h	/^            #define IMGUI_IMPL_OPENGL_LOADER_GL3W$/;"	d
IMGUI_IMPL_OPENGL_LOADER_GL3W	imgui/examples/imgui_impl_opengl3.h	/^        #define IMGUI_IMPL_OPENGL_LOADER_GL3W /;"	d
IMGUI_IMPL_OPENGL_LOADER_GLAD	imgui/examples/imgui_impl_opengl3.h	/^            #define IMGUI_IMPL_OPENGL_LOADER_GLAD$/;"	d
IMGUI_IMPL_OPENGL_LOADER_GLBINDING	imgui/examples/imgui_impl_opengl3.h	/^            #define IMGUI_IMPL_OPENGL_LOADER_GLBINDING$/;"	d
IMGUI_IMPL_OPENGL_LOADER_GLEW	imgui/examples/imgui_impl_opengl3.h	/^            #define IMGUI_IMPL_OPENGL_LOADER_GLEW$/;"	d
IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET	imgui/examples/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET /;"	d	file:
IMGUI_IMPL_WIN32_DISABLE_LINKING_XINPUT	imgui/examples/imgui_impl_win32.cpp	/^#define IMGUI_IMPL_WIN32_DISABLE_LINKING_XINPUT$/;"	d	file:
IMGUI_PAYLOAD_TYPE_COLOR_3F	imgui/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	imgui/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_STB_NAMESPACE	imgui/imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TEST_ENGINE_ITEM_ADD	imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_ADD(/;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_TEST_ENGINE_LOG	imgui/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_LOG(/;"	d
IMGUI_VERSION	imgui/imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	imgui/imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IMGUI_VULKAN_DEBUG_REPORT	imgui/examples/example_glfw_vulkan/main.cpp	/^#define IMGUI_VULKAN_DEBUG_REPORT$/;"	d	file:
IMGUI_VULKAN_DEBUG_REPORT	imgui/examples/example_sdl_vulkan/main.cpp	/^#define IMGUI_VULKAN_DEBUG_REPORT$/;"	d	file:
IM_ALLOC	imgui/imgui.h	/^#define IM_ALLOC(/;"	d
IM_ARRAYSIZE	imgui/imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	imgui/imgui.h	/^#define IM_ASSERT(/;"	d
IM_ASSERT_PARANOID	imgui/imgui_internal.h	/^#define IM_ASSERT_PARANOID(/;"	d
IM_ASSERT_USER_ERROR	imgui/imgui_internal.h	/^#define IM_ASSERT_USER_ERROR(/;"	d
IM_COL32	imgui/imgui.h	/^#define IM_COL32(/;"	d
IM_COL32_A_MASK	imgui/imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	imgui/imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	imgui/imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	imgui/imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	imgui/imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_G_SHIFT	imgui/imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	imgui/imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	imgui/imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_DEBUG_BREAK	imgui/imgui_internal.h	/^#define IM_DEBUG_BREAK(/;"	d
IM_DELETE	imgui/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f	typeref:typename:void
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC	imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX	imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN	imgui/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN /;"	d
IM_F32_TO_INT8_SAT	imgui/imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	imgui/imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FIXNORMAL2F	imgui/imgui_draw.cpp	/^#define IM_FIXNORMAL2F(/;"	d	file:
IM_FLOOR	imgui/imgui_internal.h	/^#define IM_FLOOR(/;"	d
IM_FMTARGS	imgui/imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	imgui/imgui.h	/^#define IM_FMTLIST(/;"	d
IM_FREE	imgui/imgui.h	/^#define IM_FREE(/;"	d
IM_NEW	imgui/imgui.h	/^#define IM_NEW(/;"	d
IM_NEWLINE	imgui/imgui_demo.cpp	/^#define IM_NEWLINE /;"	d	file:
IM_NEWLINE	imgui/imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_NORMALIZE2F_OVER_ZERO	imgui/imgui_draw.cpp	/^#define IM_NORMALIZE2F_OVER_ZERO(/;"	d	file:
IM_OFFSETOF	imgui/imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PI	imgui/imgui_internal.h	/^#define IM_PI /;"	d
IM_PLACEMENT_NEW	imgui/imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_ROUND	imgui/imgui_internal.h	/^#define IM_ROUND(/;"	d
IM_S16_MAX	imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	typeref:typename:const signed short	file:
IM_S16_MIN	imgui/imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	typeref:typename:const signed short	file:
IM_S32_MAX	imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	typeref:typename:const ImS32	file:
IM_S32_MIN	imgui/imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	typeref:typename:const ImS32	file:
IM_S64_MAX	imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MAX	imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	imgui/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S8_MAX	imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	typeref:typename:const signed char	file:
IM_S8_MIN	imgui/imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	typeref:typename:const signed char	file:
IM_STATIC_ASSERT	imgui/imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_TABSIZE	imgui/imgui_internal.h	/^#define IM_TABSIZE /;"	d
IM_U16_MAX	imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	typeref:typename:const unsigned short	file:
IM_U16_MIN	imgui/imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	typeref:typename:const unsigned short	file:
IM_U32_MAX	imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	typeref:typename:const ImU32	file:
IM_U32_MIN	imgui/imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	typeref:typename:const ImU32	file:
IM_U64_MAX	imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MAX	imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MIN	imgui/imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	typeref:typename:const ImU64	file:
IM_U8_MAX	imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	typeref:typename:const unsigned char	file:
IM_U8_MIN	imgui/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	typeref:typename:const unsigned char	file:
IM_UNICODE_CODEPOINT_INVALID	imgui/imgui.h	/^#define IM_UNICODE_CODEPOINT_INVALID /;"	d
IM_UNICODE_CODEPOINT_MAX	imgui/imgui.h	/^#define IM_UNICODE_CODEPOINT_MAX /;"	d
IM_UNUSED	imgui/imgui.h	/^#define IM_UNUSED(/;"	d
INCLUDES	imgui/examples/example_sdl_directx11/build_win32.bat	/^set INCLUDES=\/I.. \/I..\\.. \/I%SDL2_DIR%\\include \/I "%WindowsSdkDir%Include\\um" \/I "%Windo/;"	v
INCLUDES	imgui/examples/example_sdl_opengl2/build_win32.bat	/^set INCLUDES=\/I.. \/I..\\.. \/I%SDL2_DIR%\\include$/;"	v
INCLUDES	imgui/examples/example_sdl_opengl3/build_win32.bat	/^set INCLUDES=\/I.. \/I..\\.. \/I%SDL2_DIR%\\include \/I..\\libs\\gl3w$/;"	v
INCLUDE_STB_TEXTEDIT_H	imgui/imstb_textedit.h	/^#define INCLUDE_STB_TEXTEDIT_H$/;"	d
INIT_VAL	sqlite_routines.h	/^  INIT_VAL, \/\/ the error value you init an error variable with$/;"	e	enum:__anoned97ed650103
IO	imgui/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIO
IdxBuffer	imgui/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCm/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawIdx>
IdxOffset	imgui/imgui.h	/^    unsigned int    IdxOffset;              \/\/ Start offset in index buffer. Always equal to s/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
ImAcos	imgui/imgui_internal.h	/^#define ImAcos(/;"	d
ImAcos01	imgui/imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	typeref:typename:float	file:
ImAddClampOverflow	imgui/imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (/;"	f	typeref:typename:T
ImAlphaBlendColor	imgui/imgui_widgets.cpp	/^static inline ImU32 ImAlphaBlendColor(ImU32 col_a, ImU32 col_b)$/;"	f	typeref:typename:ImU32	file:
ImAtan2	imgui/imgui_internal.h	/^#define ImAtan2(/;"	d
ImAtof	imgui/imgui_internal.h	/^#define ImAtof(/;"	d
ImAtoi	imgui/imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	typeref:typename:const char *	file:
ImBezierCalc	imgui/imgui_draw.cpp	/^ImVec2 ImBezierCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, floa/;"	f	typeref:typename:ImVec2
ImBezierClosestPoint	imgui/imgui.cpp	/^ImVec2 ImBezierClosestPoint(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& /;"	f	typeref:typename:ImVec2
ImBezierClosestPointCasteljau	imgui/imgui.cpp	/^ImVec2 ImBezierClosestPointCasteljau(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const/;"	f	typeref:typename:ImVec2
ImBoolVector	imgui/imgui_internal.h	/^    ImBoolVector()  { }$/;"	f	struct:ImBoolVector
ImBoolVector	imgui/imgui_internal.h	/^struct IMGUI_API ImBoolVector$/;"	s
ImCeil	imgui/imgui_internal.h	/^#define ImCeil(/;"	d
ImCharIsBlankA	imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f	typeref:typename:bool
ImCharIsBlankW	imgui/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == /;"	f	typeref:typename:bool
ImChunkStream	imgui/imgui_internal.h	/^struct IMGUI_API ImChunkStream$/;"	s
ImClamp	imgui/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2(/;"	f	typeref:typename:ImVec2
ImClamp	imgui/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn/;"	f	typeref:typename:T
ImColor	imgui/imgui.h	/^    ImColor()                                                       { Value.x = Value.y = Value./;"	f	struct:ImColor
ImColor	imgui/imgui.h	/^    ImColor(ImU32 rgba)                                             { float sc = 1.0f\/255.0f; V/;"	f	struct:ImColor
ImColor	imgui/imgui.h	/^    ImColor(const ImVec4& col)                                      { Value = col; }$/;"	f	struct:ImColor
ImColor	imgui/imgui.h	/^    ImColor(float r, float g, float b, float a = 1.0f)              { Value.x = r; Value.y = g; /;"	f	struct:ImColor
ImColor	imgui/imgui.h	/^    ImColor(int r, int g, int b, int a = 255)                       { float sc = 1.0f\/255.0f; V/;"	f	struct:ImColor
ImColor	imgui/imgui.h	/^struct ImColor$/;"	s
ImCos	imgui/imgui_internal.h	/^#define ImCos(/;"	d
ImDot	imgui/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b/;"	f	typeref:typename:float
ImDrawCallback	imgui/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t	typeref:typename:void (*)(const ImDrawList * parent_list,const ImDrawCmd * cmd)
ImDrawCallback_ResetRenderState	imgui/imgui.h	/^#define ImDrawCallback_ResetRenderState /;"	d
ImDrawChannel	imgui/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	imgui/imgui.h	/^    ImDrawCmd() { ElemCount = 0; TextureId = (ImTextureID)NULL; VtxOffset = IdxOffset = 0;  User/;"	f	struct:ImDrawCmd
ImDrawCmd	imgui/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCornerFlags	imgui/imgui.h	/^typedef int ImDrawCornerFlags;      \/\/ -> enum ImDrawCornerFlags_    \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawCornerFlags_	imgui/imgui.h	/^enum ImDrawCornerFlags_$/;"	g
ImDrawCornerFlags_All	imgui/imgui.h	/^    ImDrawCornerFlags_All       = 0xF     \/\/ In your function calls you may use ~0 (= all bits/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Bot	imgui/imgui.h	/^    ImDrawCornerFlags_Bot       = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,   \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotLeft	imgui/imgui.h	/^    ImDrawCornerFlags_BotLeft   = 1 << 2, \/\/ 0x4$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_BotRight	imgui/imgui.h	/^    ImDrawCornerFlags_BotRight  = 1 << 3, \/\/ 0x8$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Left	imgui/imgui.h	/^    ImDrawCornerFlags_Left      = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,    \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_None	imgui/imgui.h	/^    ImDrawCornerFlags_None      = 0,$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Right	imgui/imgui.h	/^    ImDrawCornerFlags_Right     = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,  \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_Top	imgui/imgui.h	/^    ImDrawCornerFlags_Top       = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,   \/\//;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopLeft	imgui/imgui.h	/^    ImDrawCornerFlags_TopLeft   = 1 << 0, \/\/ 0x1$/;"	e	enum:ImDrawCornerFlags_
ImDrawCornerFlags_TopRight	imgui/imgui.h	/^    ImDrawCornerFlags_TopRight  = 1 << 1, \/\/ 0x2$/;"	e	enum:ImDrawCornerFlags_
ImDrawData	imgui/examples/imgui_impl_metal.h	/^IMGUI_IMPL_API void ImGui_ImplMetal_RenderDrawData(ImDrawData* draw_data,$/;"	C	protocol:MTLDevice
ImDrawData	imgui/imgui.h	/^    ImDrawData()    { Valid = false; Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	imgui/imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	imgui/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawIdx	imgui/examples/example_allegro5/imconfig_allegro5.h	/^#define ImDrawIdx /;"	d
ImDrawIdx	imgui/imgui.h	/^typedef unsigned short ImDrawIdx;$/;"	t	typeref:typename:unsigned short
ImDrawList	imgui/imgui.h	/^    ImDrawList(const ImDrawListSharedData* shared_data) { _Data = shared_data; _OwnerName = NULL/;"	f	struct:ImDrawList
ImDrawList	imgui/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	imgui/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawListFlags_	imgui/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AllowVtxOffset	imgui/imgui.h	/^    ImDrawListFlags_AllowVtxOffset   = 1 << 2   \/\/ Can emit 'VtxOffset > 0' to allow large mes/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedFill	imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedFill  = 1 << 1,  \/\/ Filled shapes have anti-aliased edges (*2 t/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	imgui/imgui.h	/^    ImDrawListFlags_AntiAliasedLines = 1 << 0,  \/\/ Lines are anti-aliased (*2 the number of tr/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	imgui/imgui.h	/^    ImDrawListFlags_None             = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	imgui/imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	imgui/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawListSplitter	imgui/imgui.h	/^    inline ImDrawListSplitter()  { Clear(); }$/;"	f	struct:ImDrawListSplitter
ImDrawListSplitter	imgui/imgui.h	/^struct ImDrawListSplitter$/;"	s
ImDrawVert	imgui/imgui.h	/^struct ImDrawVert$/;"	s
ImDrawVertAllegro	imgui/examples/imgui_impl_allegro5.cpp	/^struct ImDrawVertAllegro$/;"	s	file:
ImFabs	imgui/imgui_internal.h	/^#define ImFabs(/;"	d
ImFileClose	imgui/imgui.cpp	/^bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }$/;"	f	typeref:typename:bool
ImFileClose	imgui/imgui_internal.h	/^static inline bool          ImFileClose(ImFileHandle)                               { return fal/;"	f	typeref:typename:bool
ImFileGetSize	imgui/imgui.cpp	/^ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 &/;"	f	typeref:typename:ImU64
ImFileGetSize	imgui/imgui_internal.h	/^static inline ImU64         ImFileGetSize(ImFileHandle)                             { return (Im/;"	f	typeref:typename:ImU64
ImFileHandle	imgui/imgui_internal.h	/^typedef FILE* ImFileHandle;$/;"	t	typeref:typename:FILE *
ImFileHandle	imgui/imgui_internal.h	/^typedef void* ImFileHandle;$/;"	t	typeref:typename:void *
ImFileLoadToMemory	imgui/imgui.cpp	/^void*   ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size, int pa/;"	f	typeref:typename:void *
ImFileOpen	imgui/imgui.cpp	/^ImFileHandle ImFileOpen(const char* filename, const char* mode)$/;"	f	typeref:typename:ImFileHandle
ImFileOpen	imgui/imgui_internal.h	/^static inline ImFileHandle  ImFileOpen(const char*, const char*)                    { return NUL/;"	f	typeref:typename:ImFileHandle
ImFileRead	imgui/imgui.cpp	/^ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(d/;"	f	typeref:typename:ImU64
ImFileRead	imgui/imgui_internal.h	/^static inline ImU64         ImFileRead(void*, ImU64, ImU64, ImFileHandle)           { return 0; /;"	f	typeref:typename:ImU64
ImFileWrite	imgui/imgui.cpp	/^ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(/;"	f	typeref:typename:ImU64
ImFileWrite	imgui/imgui_internal.h	/^static inline ImU64         ImFileWrite(const void*, ImU64, ImU64, ImFileHandle)    { return 0; /;"	f	typeref:typename:ImU64
ImFloor	imgui/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloor	imgui/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)/;"	f	typeref:typename:float
ImFloorStd	imgui/imgui_internal.h	/^#define ImFloorStd(/;"	d
ImFmod	imgui/imgui_internal.h	/^#define ImFmod(/;"	d
ImFont	imgui/imgui.h	/^struct ImFont$/;"	s
ImFont	imgui/imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFontAtlas	imgui/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlas	imgui/imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlasBuildFinish	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyCalcLookupTable	imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyRectAlpha8	imgui/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels/;"	f	typeref:typename:void
ImFontAtlasBuildPackCustomRects	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f	typeref:typename:void
ImFontAtlasBuildRegisterDefaultCustomRects	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildRegisterDefaultCustomRects(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildRenderDefaultTexData	imgui/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildSetupFont	imgui/imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, floa/;"	f	typeref:typename:void
ImFontAtlasBuildWithFreeType	imgui/misc/freetype/imgui_freetype.cpp	/^bool ImFontAtlasBuildWithFreeType(FT_Library ft_library, ImFontAtlas* atlas, unsigned int extra_/;"	f	typeref:typename:bool
ImFontAtlasBuildWithStbTruetype	imgui/imgui_draw.cpp	/^bool    ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool
ImFontAtlasCustomRect	imgui/imgui.h	/^    ImFontAtlasCustomRect()         { ID = 0xFFFFFFFF; Width = Height = 0; X = Y = 0xFFFF; Glyph/;"	f	struct:ImFontAtlasCustomRect
ImFontAtlasCustomRect	imgui/imgui.h	/^struct ImFontAtlasCustomRect$/;"	s
ImFontAtlasFlags	imgui/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtl/;"	t	typeref:typename:int
ImFontAtlasFlags_	imgui/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoMouseCursors	imgui/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1    \/\/ Don't build software mouse cursors into/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	imgui/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	imgui/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontBuildDstData	imgui/imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildDstDataFT	imgui/misc/freetype/imgui_freetype.cpp	/^struct ImFontBuildDstDataFT$/;"	s	file:
ImFontBuildSrcData	imgui/imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontBuildSrcDataFT	imgui/misc/freetype/imgui_freetype.cpp	/^struct ImFontBuildSrcDataFT$/;"	s	file:
ImFontBuildSrcGlyphFT	imgui/misc/freetype/imgui_freetype.cpp	/^struct ImFontBuildSrcGlyphFT$/;"	s	file:
ImFontConfig	imgui/imgui.h	/^struct ImFontConfig$/;"	s
ImFontConfig	imgui/imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontGlyph	imgui/imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	imgui/imgui.h	/^    ImFontGlyphRangesBuilder()          { Clear(); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	imgui/imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImFormatString	imgui/imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f	typeref:typename:int
ImFormatStringV	imgui/imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f	typeref:typename:int
ImFreeTypeDefaultAllocFunc	imgui/misc/freetype/imgui_freetype.cpp	/^static void* ImFreeTypeDefaultAllocFunc(size_t size, void* user_data)	{ IM_UNUSED(user_data); re/;"	f	typeref:typename:void *	file:
ImFreeTypeDefaultFreeFunc	imgui/misc/freetype/imgui_freetype.cpp	/^static void  ImFreeTypeDefaultFreeFunc(void* ptr, void* user_data)	    { IM_UNUSED(user_data); I/;"	f	typeref:typename:void	file:
ImGetDirQuadrantFromDelta	imgui/imgui.cpp	/^ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f	typeref:typename:ImGuiDir
ImGui	imgui/imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	imgui/imgui.h	/^namespace ImGui$/;"	n
ImGui	imgui/imgui_internal.h	/^namespace ImGui$/;"	n
ImGui	imgui/imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGui	imgui/misc/cpp/imgui_stdlib.h	/^namespace ImGui$/;"	n
ImGuiAxis	imgui/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	imgui/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	imgui/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	imgui/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	imgui/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.Backen/;"	t	typeref:typename:int
ImGuiBackendFlags_	imgui/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	imgui/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Back-end Platform supports gamepad /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	imgui/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Back-end Platform supports honoring/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	imgui/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   \/\/ Back-end Platform supports io.WantS/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	imgui/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasVtxOffset	imgui/imgui.h	/^    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3    \/\/ Back-end Renderer supports ImDrawCm/;"	e	enum:ImGuiBackendFlags_
ImGuiButtonFlags	imgui/imgui_internal.h	/^typedef int ImGuiButtonFlags;           \/\/ -> enum ImGuiButtonFlags_        \/\/ Flags: for Bu/;"	t	typeref:typename:int
ImGuiButtonFlags_	imgui/imgui_internal.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	imgui/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 11,  \/\/ vertically align button to match te/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_AllowItemOverlap	imgui/imgui_internal.h	/^    ImGuiButtonFlags_AllowItemOverlap       = 1 << 8,   \/\/ require previous frame HoveredId to/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_Disabled	imgui/imgui_internal.h	/^    ImGuiButtonFlags_Disabled               = 1 << 10,  \/\/ disable interactions$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_DontClosePopups	imgui/imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 9,   \/\/ disable automatically closing paren/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_FlattenChildren	imgui/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 7,   \/\/ allow interactions even if a child /;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonDefault_	imgui/imgui_internal.h	/^    ImGuiButtonFlags_MouseButtonDefault_    = ImGuiButtonFlags_MouseButtonLeft,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonLeft	imgui/imgui_internal.h	/^    ImGuiButtonFlags_MouseButtonLeft        = 1 << 16,  \/\/ [Default] react on left mouse butto/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMask_	imgui/imgui_internal.h	/^    ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlag/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMiddle	imgui/imgui_internal.h	/^    ImGuiButtonFlags_MouseButtonMiddle      = 1 << 18,  \/\/ react on center mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonRight	imgui/imgui_internal.h	/^    ImGuiButtonFlags_MouseButtonRight       = 1 << 17,  \/\/ react on right mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonShift_	imgui/imgui_internal.h	/^    ImGuiButtonFlags_MouseButtonShift_      = 16,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveId	imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveId      = 1 << 13,  \/\/ don't set ActiveId while holding th/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoveredOnNav	imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoHoveredOnNav         = 1 << 15,  \/\/ don't report as hovered when naviga/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoKeyModifiers	imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 12,  \/\/ disable mouse interaction if a key /;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoNavFocus	imgui/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 14,  \/\/ don't override navigation focus whe/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_None	imgui/imgui_internal.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 1,   \/\/ return true on click (mouse down ev/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClickRelease	imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 2,   \/\/ [Default] return true on click + re/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClickReleaseAnywhere	imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 3, \/\/ return true on click + release/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnDefault_	imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDefault_      = ImGuiButtonFlags_PressedOnClickRelease$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnDoubleClick	imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 5,   \/\/ return true on double-click (defaul/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnDragDropHold	imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 6,   \/\/ return true when held into while we/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnMask_	imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnMask_         = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnRelease	imgui/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 4,   \/\/ return true on release (default req/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_Repeat	imgui/imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 0,   \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlags_
ImGuiCol	imgui/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identi/;"	t	typeref:typename:int
ImGuiCol_	imgui/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	imgui/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	imgui/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	imgui/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	imgui/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	imgui/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	imgui/imgui.h	/^    ImGuiCol_COUNT$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	imgui/imgui.h	/^    ImGuiCol_CheckMark,$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	imgui/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	imgui/imgui.h	/^    ImGuiCol_DragDropTarget,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	imgui/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, tex/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	imgui/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	imgui/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	imgui/imgui.h	/^    ImGuiCol_Header,                \/\/ Header* colors are used for CollapsingHeader, TreeNode,/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	imgui/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	imgui/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	imgui/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDarkening	imgui/imgui.h	/^    , ImGuiCol_ModalWindowDarkening = ImGuiCol_ModalWindowDimBg                      \/\/ [renam/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	imgui/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, w/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	imgui/imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	imgui/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB wind/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	imgui/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	imgui/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	imgui/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	imgui/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	imgui/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	imgui/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	imgui/imgui.h	/^    ImGuiCol_ResizeGrip,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	imgui/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	imgui/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	imgui/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	imgui/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	imgui/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	imgui/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	imgui/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	imgui/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	imgui/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	imgui/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	imgui/imgui.h	/^    ImGuiCol_Tab,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	imgui/imgui.h	/^    ImGuiCol_TabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	imgui/imgui.h	/^    ImGuiCol_TabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	imgui/imgui.h	/^    ImGuiCol_TabUnfocused,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	imgui/imgui.h	/^    ImGuiCol_TabUnfocusedActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	imgui/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	imgui/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	imgui/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	imgui/imgui.h	/^    ImGuiCol_TitleBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	imgui/imgui.h	/^    ImGuiCol_TitleBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	imgui/imgui.h	/^    ImGuiCol_TitleBgCollapsed,$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	imgui/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	imgui/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit/;"	t	typeref:typename:int
ImGuiColorEditFlags_	imgui/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	imgui/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	imgui/imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	imgui/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	imgui/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Curr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HEX	imgui/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiC/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HSV	imgui/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiC/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	imgui/imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	imgui/imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	imgui/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	imgui/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable dr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	imgui/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	imgui/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	imgui/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable to/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	imgui/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable pi/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	imgui/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	imgui/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	imgui/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	imgui/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	imgui/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel fo/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_RGB	imgui/imgui.h	/^    , ImGuiColorEditFlags_RGB = ImGuiColorEditFlags_DisplayRGB, ImGuiColorEditFlags_HSV = ImGuiC/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	imgui/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__DataTypeMask	imgui/imgui.h	/^    ImGuiColorEditFlags__DataTypeMask   = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__DisplayMask	imgui/imgui.h	/^    ImGuiColorEditFlags__DisplayMask    = ImGuiColorEditFlags_DisplayRGB|ImGuiColorEditFlags_Dis/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__InputMask	imgui/imgui.h	/^    ImGuiColorEditFlags__InputMask      = ImGuiColorEditFlags_InputRGB|ImGuiColorEditFlags_Input/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__OptionsDefault	imgui/imgui.h	/^    ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_DisplayR/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags__PickerMask	imgui/imgui.h	/^    ImGuiColorEditFlags__PickerMask     = ImGuiColorEditFlags_PickerHueWheel|ImGuiColorEditFlags/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	imgui/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiColumnData	imgui/imgui_internal.h	/^    ImGuiColumnData()   { OffsetNorm = OffsetNormBeforeResize = 0.0f; Flags = ImGuiColumnsFlags_/;"	f	struct:ImGuiColumnData
ImGuiColumnData	imgui/imgui_internal.h	/^struct ImGuiColumnData$/;"	s
ImGuiColumns	imgui/imgui_internal.h	/^    ImGuiColumns()      { Clear(); }$/;"	f	struct:ImGuiColumns
ImGuiColumns	imgui/imgui_internal.h	/^struct ImGuiColumns$/;"	s
ImGuiColumnsFlags	imgui/imgui_internal.h	/^typedef int ImGuiColumnsFlags;          \/\/ -> enum ImGuiColumnsFlags_       \/\/ Flags: BeginC/;"	t	typeref:typename:int
ImGuiColumnsFlags_	imgui/imgui_internal.h	/^enum ImGuiColumnsFlags_$/;"	g
ImGuiColumnsFlags_GrowParentContentsSize	imgui/imgui_internal.h	/^    ImGuiColumnsFlags_GrowParentContentsSize= 1 << 4    \/\/ (WIP) Restore pre-1.51 behavior of /;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoBorder	imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoBorder              = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoForceWithinWindow	imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoForceWithinWindow   = 1 << 3,   \/\/ Disable forcing columns to fit with/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoPreserveWidths	imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoPreserveWidths      = 1 << 2,   \/\/ Disable column width preservation w/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_NoResize	imgui/imgui_internal.h	/^    ImGuiColumnsFlags_NoResize              = 1 << 1,   \/\/ Disable resizing columns when click/;"	e	enum:ImGuiColumnsFlags_
ImGuiColumnsFlags_None	imgui/imgui_internal.h	/^    ImGuiColumnsFlags_None                  = 0,$/;"	e	enum:ImGuiColumnsFlags_
ImGuiComboFlags	imgui/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginComb/;"	t	typeref:typename:int
ImGuiComboFlags_	imgui/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_HeightLarge	imgui/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	imgui/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	imgui/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_Heig/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	imgui/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	imgui/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you w/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	imgui/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	imgui/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	imgui/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	imgui/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by /;"	e	enum:ImGuiComboFlags_
ImGuiCond	imgui/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition fo/;"	t	typeref:typename:int
ImGuiCond_	imgui/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	imgui/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ Set the variable$/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	imgui/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3    \/\/ Set the variable if the object\/window is appearing/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	imgui/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persi/;"	e	enum:ImGuiCond_
ImGuiCond_Once	imgui/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	imgui/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.Config/;"	t	typeref:typename:int
ImGuiConfigFlags_	imgui/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	imgui/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	imgui/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21   \/\/ Application is using a touch screen/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable fl/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable f/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	imgui/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mou/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	imgui/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the /;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	imgui/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct imgui to clear mouse posit/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	imgui/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct back-end to not alter mous/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	imgui/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	imgui/imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas) : BackgroundDrawList(&DrawListSharedData), Fore/;"	f	struct:ImGuiContext
ImGuiContext	imgui/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiDataType	imgui/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data/;"	t	typeref:typename:int
ImGuiDataTypeInfo	imgui/imgui_internal.h	/^struct ImGuiDataTypeInfo$/;"	s
ImGuiDataType_	imgui/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_COUNT	imgui/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Double	imgui/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	imgui/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S16	imgui/imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	imgui/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	imgui/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	imgui/imgui.h	/^    ImGuiDataType_S8,       \/\/ signed char \/ char (with sensible compilers)$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U16	imgui/imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	imgui/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	imgui/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	imgui/imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDir	imgui/imgui.h	/^typedef int ImGuiDir;               \/\/ -> enum ImGuiDir_             \/\/ Enum: A cardinal dir/;"	t	typeref:typename:int
ImGuiDir_	imgui/imgui.h	/^enum ImGuiDir_$/;"	g
ImGuiDir_COUNT	imgui/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir_
ImGuiDir_Down	imgui/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir_
ImGuiDir_Left	imgui/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir_
ImGuiDir_None	imgui/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Right	imgui/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Up	imgui/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir_
ImGuiDragDropFlags	imgui/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for BeginDrag/;"	t	typeref:typename:int
ImGuiDragDropFlags_	imgui/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() wil/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default hig/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDra/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	imgui/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | /;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	imgui/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(),/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	imgui/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   \/\/ Automatically expire the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	imgui/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outsi/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging w/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that a/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	imgui/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ By default, a successful ca/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragFlags	imgui/imgui_internal.h	/^typedef int ImGuiDragFlags;             \/\/ -> enum ImGuiDragFlags_          \/\/ Flags: for Dr/;"	t	typeref:typename:int
ImGuiDragFlags_	imgui/imgui_internal.h	/^enum ImGuiDragFlags_$/;"	g
ImGuiDragFlags_None	imgui/imgui_internal.h	/^    ImGuiDragFlags_None                     = 0,$/;"	e	enum:ImGuiDragFlags_
ImGuiDragFlags_Vertical	imgui/imgui_internal.h	/^    ImGuiDragFlags_Vertical                 = 1 << 0$/;"	e	enum:ImGuiDragFlags_
ImGuiExampleAppDelegate	imgui/examples/example_apple_opengl2/main.mm	/^@implementation ImGuiExampleAppDelegate$/;"	I
ImGuiExampleAppDelegate	imgui/examples/example_apple_opengl2/main.mm	/^@interface ImGuiExampleAppDelegate : NSObject <NSApplicationDelegate>$/;"	i	protocols:NSApplicationDelegate
ImGuiExampleView	imgui/examples/example_apple_opengl2/main.mm	/^@implementation ImGuiExampleView$/;"	I
ImGuiExampleView	imgui/examples/example_apple_opengl2/main.mm	/^@interface ImGuiExampleView : NSOpenGLView$/;"	i
ImGuiFocusedFlags	imgui/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowF/;"	t	typeref:typename:int
ImGuiFocusedFlags_	imgui/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	imgui/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowFocused(): Return t/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	imgui/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowFocused(): Return t/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	imgui/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	imgui/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocuse/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	imgui/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowFocused(): Test fro/;"	e	enum:ImGuiFocusedFlags_
ImGuiFreeType	imgui/misc/freetype/imgui_freetype.h	/^namespace ImGuiFreeType$/;"	n
ImGuiGroupData	imgui/imgui_internal.h	/^struct ImGuiGroupData$/;"	s
ImGuiHoveredFlags	imgui/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHov/;"	t	typeref:typename:int
ImGuiHoveredFlags_	imgui/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 5,   \/\/ Return true even if an acti/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 3,   \/\/ Return true even if a popup/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 7,   \/\/ Return true even if the ite/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	imgui/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = 1 << 6,   \/\/ Return true even if the pos/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AnyWindow	imgui/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	imgui/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	imgui/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly ove/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	imgui/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	imgui/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHovere/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	imgui/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Tes/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	imgui/imgui.h	/^typedef unsigned int ImGuiID;       \/\/ Unique ID used by widgets (typically hashed from a stac/;"	t	typeref:typename:unsigned int
ImGuiIO	imgui/imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	imgui/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiInputReadMode	imgui/imgui_internal.h	/^enum ImGuiInputReadMode$/;"	g
ImGuiInputReadMode_Down	imgui/imgui_internal.h	/^    ImGuiInputReadMode_Down,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Pressed	imgui/imgui_internal.h	/^    ImGuiInputReadMode_Pressed,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Released	imgui/imgui_internal.h	/^    ImGuiInputReadMode_Released,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_Repeat	imgui/imgui_internal.h	/^    ImGuiInputReadMode_Repeat,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatFast	imgui/imgui_internal.h	/^    ImGuiInputReadMode_RepeatFast$/;"	e	enum:ImGuiInputReadMode
ImGuiInputReadMode_RepeatSlow	imgui/imgui_internal.h	/^    ImGuiInputReadMode_RepeatSlow,$/;"	e	enum:ImGuiInputReadMode
ImGuiInputSource	imgui/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	imgui/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	imgui/imgui_internal.h	/^    ImGuiInputSource_Mouse,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Nav	imgui/imgui_internal.h	/^    ImGuiInputSource_Nav,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavGamepad	imgui/imgui_internal.h	/^    ImGuiInputSource_NavGamepad,    \/\/ "$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_NavKeyboard	imgui/imgui_internal.h	/^    ImGuiInputSource_NavKeyboard,   \/\/ Only used occasionally for storage, not tested\/handled/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	imgui/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	imgui/imgui.h	/^typedef int (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData *data);$/;"	t	typeref:typename:int (*)(ImGuiInputTextCallbackData * data)
ImGuiInputTextCallbackData	imgui/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextCallbackData	imgui/imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextFlags	imgui/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText/;"	t	typeref:typename:int
ImGuiInputTextFlags_	imgui/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	imgui/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  \/\/ Pressing TAB input a '\\t' characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysInsertMode	imgui/imgui.h	/^    ImGuiInputTextFlags_AlwaysInsertMode    = 1 << 13,  \/\/ Insert mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	imgui/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   \/\/ Select entire text when first takin/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   \/\/ Callback on each iteration. User co/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   \/\/ Callback on character inputs to rep/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   \/\/ Callback on pressing TAB (for compl/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   \/\/ Callback on pressing Up\/Down arrow/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	imgui/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 18,  \/\/ Callback on buffer capacity changes/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	imgui/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	imgui/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	imgui/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	imgui/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 17,  \/\/ Allow 0123456789.+-*\/eE (Scientifi/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	imgui/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	imgui/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  \/\/ In multi-line mode, unfocus with En/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	imgui/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   \/\/ Return 'true' when Enter is pressed/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Multiline	imgui/imgui.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 20,  \/\/ For internal use by InputTextMultil/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoHorizontalScroll	imgui/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  \/\/ Disable following the cursor horizo/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoMarkEdited	imgui/imgui.h	/^    ImGuiInputTextFlags_NoMarkEdited        = 1 << 21   \/\/ For internal use by functions using/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoUndoRedo	imgui/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	imgui/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	imgui/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 15,  \/\/ Password mode, display all characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	imgui/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 14,  \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	imgui/imgui_internal.h	/^    ImGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	imgui/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	imgui/imgui_internal.h	/^typedef int ImGuiItemFlags;             \/\/ -> enum ImGuiItemFlags_          \/\/ Flags: for Pu/;"	t	typeref:typename:int
ImGuiItemFlags_	imgui/imgui_internal.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_ButtonRepeat	imgui/imgui_internal.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 1,  \/\/ false    \/\/ Button() will return t/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Default_	imgui/imgui_internal.h	/^    ImGuiItemFlags_Default_                 = 0$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Disabled	imgui/imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 2,  \/\/ false    \/\/ [BETA] Disable interac/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_MixedValue	imgui/imgui_internal.h	/^    ImGuiItemFlags_MixedValue               = 1 << 6,  \/\/ false    \/\/ [BETA] Represent a mix/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNav	imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNav                    = 1 << 3,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	imgui/imgui_internal.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 4,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	imgui/imgui_internal.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,  \/\/ false$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_None	imgui/imgui_internal.h	/^    ImGuiItemFlags_None                     = 0,$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_SelectableDontClosePopup	imgui/imgui_internal.h	/^    ImGuiItemFlags_SelectableDontClosePopup = 1 << 5,  \/\/ false    \/\/ MenuItem\/Selectable()/;"	e	enum:ImGuiItemFlags_
ImGuiItemHoveredDataBackup	imgui/imgui_internal.h	/^    ImGuiItemHoveredDataBackup() { Backup(); }$/;"	f	struct:ImGuiItemHoveredDataBackup
ImGuiItemHoveredDataBackup	imgui/imgui_internal.h	/^struct ImGuiItemHoveredDataBackup$/;"	s
ImGuiItemStatusFlags	imgui/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;       \/\/ -> enum ImGuiItemStatusFlags_    \/\/ Flags: for DC/;"	t	typeref:typename:int
ImGuiItemStatusFlags_	imgui/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 12,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 13   \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Deactivated	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Deactivated        = 1 << 6    \/\/ Only valid if ImGuiItemStatusFlags_/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2,   \/\/ Value exposed by item was edited in/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDeactivated	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDeactivated     = 1 << 5,   \/\/ Set if the widget\/group is able to/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 10,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 11,  \/\/$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledOpen	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledOpen        = 1 << 4,   \/\/ Set when TreeNode() reports togglin/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledSelection	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,   \/\/ Set when Selectable(), TreeNode() r/;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	imgui/imgui.h	/^typedef int ImGuiKey;               \/\/ -> enum ImGuiKey_             \/\/ Enum: A key identifi/;"	t	typeref:typename:int
ImGuiKey_	imgui/imgui.h	/^enum ImGuiKey_$/;"	g
ImGuiKey_A	imgui/imgui.h	/^    ImGuiKey_A,                 \/\/ for text edit CTRL+A: select all$/;"	e	enum:ImGuiKey_
ImGuiKey_Backspace	imgui/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey_
ImGuiKey_C	imgui/imgui.h	/^    ImGuiKey_C,                 \/\/ for text edit CTRL+C: copy$/;"	e	enum:ImGuiKey_
ImGuiKey_COUNT	imgui/imgui.h	/^    ImGuiKey_COUNT$/;"	e	enum:ImGuiKey_
ImGuiKey_Delete	imgui/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey_
ImGuiKey_DownArrow	imgui/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_End	imgui/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey_
ImGuiKey_Enter	imgui/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey_
ImGuiKey_Escape	imgui/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey_
ImGuiKey_Home	imgui/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey_
ImGuiKey_Insert	imgui/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey_
ImGuiKey_KeyPadEnter	imgui/imgui.h	/^    ImGuiKey_KeyPadEnter,$/;"	e	enum:ImGuiKey_
ImGuiKey_LeftArrow	imgui/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageDown	imgui/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey_
ImGuiKey_PageUp	imgui/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey_
ImGuiKey_RightArrow	imgui/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_Space	imgui/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey_
ImGuiKey_Tab	imgui/imgui.h	/^    ImGuiKey_Tab,$/;"	e	enum:ImGuiKey_
ImGuiKey_UpArrow	imgui/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey_
ImGuiKey_V	imgui/imgui.h	/^    ImGuiKey_V,                 \/\/ for text edit CTRL+V: paste$/;"	e	enum:ImGuiKey_
ImGuiKey_X	imgui/imgui.h	/^    ImGuiKey_X,                 \/\/ for text edit CTRL+X: cut$/;"	e	enum:ImGuiKey_
ImGuiKey_Y	imgui/imgui.h	/^    ImGuiKey_Y,                 \/\/ for text edit CTRL+Y: redo$/;"	e	enum:ImGuiKey_
ImGuiKey_Z	imgui/imgui.h	/^    ImGuiKey_Z,                 \/\/ for text edit CTRL+Z: undo$/;"	e	enum:ImGuiKey_
ImGuiLayoutType	imgui/imgui_internal.h	/^typedef int ImGuiLayoutType;            \/\/ -> enum ImGuiLayoutType_         \/\/ Enum: Horizon/;"	t	typeref:typename:int
ImGuiLayoutType_	imgui/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	imgui/imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	imgui/imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	imgui/imgui.h	/^    ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, ite/;"	f	struct:ImGuiListClipper
ImGuiListClipper	imgui/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiLogType	imgui/imgui_internal.h	/^enum ImGuiLogType$/;"	g
ImGuiLogType_Buffer	imgui/imgui_internal.h	/^    ImGuiLogType_Buffer,$/;"	e	enum:ImGuiLogType
ImGuiLogType_Clipboard	imgui/imgui_internal.h	/^    ImGuiLogType_Clipboard$/;"	e	enum:ImGuiLogType
ImGuiLogType_File	imgui/imgui_internal.h	/^    ImGuiLogType_File,$/;"	e	enum:ImGuiLogType
ImGuiLogType_None	imgui/imgui_internal.h	/^    ImGuiLogType_None = 0,$/;"	e	enum:ImGuiLogType
ImGuiLogType_TTY	imgui/imgui_internal.h	/^    ImGuiLogType_TTY,$/;"	e	enum:ImGuiLogType
ImGuiMenuColumns	imgui/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMenuColumns	imgui/imgui_widgets.cpp	/^ImGuiMenuColumns::ImGuiMenuColumns()$/;"	f	class:ImGuiMenuColumns
ImGuiMouseButton	imgui/imgui.h	/^typedef int ImGuiMouseButton;       \/\/ -> enum ImGuiMouseButton_     \/\/ Enum: A mouse button/;"	t	typeref:typename:int
ImGuiMouseButton_	imgui/imgui.h	/^enum ImGuiMouseButton_$/;"	g
ImGuiMouseButton_COUNT	imgui/imgui.h	/^    ImGuiMouseButton_COUNT = 5$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Left	imgui/imgui.h	/^    ImGuiMouseButton_Left = 0,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Middle	imgui/imgui.h	/^    ImGuiMouseButton_Middle = 2,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Right	imgui/imgui.h	/^    ImGuiMouseButton_Right = 1,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseCursor	imgui/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor/;"	t	typeref:typename:int
ImGuiMouseCursor_	imgui/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	imgui/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	imgui/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Count_	imgui/imgui.h	/^    , ImGuiMouseCursor_Count_ = ImGuiMouseCursor_COUNT      \/\/ [renamed in 1.60]$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	imgui/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by Dear ImGui functions. Use for e.g. hyper/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	imgui/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_NotAllowed	imgui/imgui.h	/^    ImGuiMouseCursor_NotAllowed,        \/\/ When hovering something with disallowed interaction/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	imgui/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by Dear ImGui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	imgui/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a wind/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over an horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	imgui/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a win/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	imgui/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiNavDirSourceFlags	imgui/imgui_internal.h	/^typedef int ImGuiNavDirSourceFlags;     \/\/ -> enum ImGuiNavDirSourceFlags_  \/\/ Flags: for Ge/;"	t	typeref:typename:int
ImGuiNavDirSourceFlags_	imgui/imgui_internal.h	/^enum ImGuiNavDirSourceFlags_$/;"	g
ImGuiNavDirSourceFlags_Keyboard	imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_Keyboard     = 1 << 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_None	imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_None         = 0,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadDPad	imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadDPad      = 1 << 1,$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavDirSourceFlags_PadLStick	imgui/imgui_internal.h	/^    ImGuiNavDirSourceFlags_PadLStick    = 1 << 2$/;"	e	enum:ImGuiNavDirSourceFlags_
ImGuiNavForward	imgui/imgui_internal.h	/^enum ImGuiNavForward$/;"	g
ImGuiNavForward_ForwardActive	imgui/imgui_internal.h	/^    ImGuiNavForward_ForwardActive$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_ForwardQueued	imgui/imgui_internal.h	/^    ImGuiNavForward_ForwardQueued,$/;"	e	enum:ImGuiNavForward
ImGuiNavForward_None	imgui/imgui_internal.h	/^    ImGuiNavForward_None,$/;"	e	enum:ImGuiNavForward
ImGuiNavHighlightFlags	imgui/imgui_internal.h	/^typedef int ImGuiNavHighlightFlags;     \/\/ -> enum ImGuiNavHighlightFlags_  \/\/ Flags: for Re/;"	t	typeref:typename:int
ImGuiNavHighlightFlags_	imgui/imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw   = 1 << 2,       \/\/ Draw rectangular highlight if (g.Na/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding   = 1 << 3$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_None         = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeDefault	imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeDefault  = 1 << 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_TypeThin	imgui/imgui_internal.h	/^    ImGuiNavHighlightFlags_TypeThin     = 1 << 1,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavInput	imgui/imgui.h	/^typedef int ImGuiNavInput;          \/\/ -> enum ImGuiNavInput_        \/\/ Enum: An input ident/;"	t	typeref:typename:int
ImGuiNavInput_	imgui/imgui.h	/^enum ImGuiNavInput_$/;"	g
ImGuiNavInput_Activate	imgui/imgui.h	/^    ImGuiNavInput_Activate,      \/\/ activate \/ open \/ toggle \/ tweak value       \/\/ e.g. /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_COUNT	imgui/imgui.h	/^    ImGuiNavInput_COUNT,$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Cancel	imgui/imgui.h	/^    ImGuiNavInput_Cancel,        \/\/ cancel \/ close \/ exit                        \/\/ e.g. C/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadDown	imgui/imgui.h	/^    ImGuiNavInput_DpadDown,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadLeft	imgui/imgui.h	/^    ImGuiNavInput_DpadLeft,      \/\/ move \/ tweak \/ resize window (w\/ PadMenu)    \/\/ e.g. /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadRight	imgui/imgui.h	/^    ImGuiNavInput_DpadRight,     \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_DpadUp	imgui/imgui.h	/^    ImGuiNavInput_DpadUp,        \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusNext	imgui/imgui.h	/^    ImGuiNavInput_FocusNext,     \/\/ prev window (w\/ PadMenu)                     \/\/ e.g. R1/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_FocusPrev	imgui/imgui.h	/^    ImGuiNavInput_FocusPrev,     \/\/ next window (w\/ PadMenu)                     \/\/ e.g. L1/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Input	imgui/imgui.h	/^    ImGuiNavInput_Input,         \/\/ text input \/ on-screen keyboard              \/\/ e.g. Tr/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_InternalStart_	imgui/imgui.h	/^    ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyDown_	imgui/imgui.h	/^    ImGuiNavInput_KeyDown_,      \/\/ move down$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyLeft_	imgui/imgui.h	/^    ImGuiNavInput_KeyLeft_,      \/\/ move left                                    \/\/ = Arrow /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyMenu_	imgui/imgui.h	/^    ImGuiNavInput_KeyMenu_,      \/\/ toggle menu                                  \/\/ = io.Key/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyRight_	imgui/imgui.h	/^    ImGuiNavInput_KeyRight_,     \/\/ move right$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_KeyUp_	imgui/imgui.h	/^    ImGuiNavInput_KeyUp_,        \/\/ move up$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickDown	imgui/imgui.h	/^    ImGuiNavInput_LStickDown,    \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickLeft	imgui/imgui.h	/^    ImGuiNavInput_LStickLeft,    \/\/ scroll \/ move window (w\/ PadMenu)            \/\/ e.g. L/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickRight	imgui/imgui.h	/^    ImGuiNavInput_LStickRight,   \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_LStickUp	imgui/imgui.h	/^    ImGuiNavInput_LStickUp,      \/\/$/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_Menu	imgui/imgui.h	/^    ImGuiNavInput_Menu,          \/\/ tap: toggle menu \/ hold: focus, move, resize \/\/ e.g. Sq/;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakFast	imgui/imgui.h	/^    ImGuiNavInput_TweakFast,     \/\/ faster tweaks                                \/\/ e.g. R1 /;"	e	enum:ImGuiNavInput_
ImGuiNavInput_TweakSlow	imgui/imgui.h	/^    ImGuiNavInput_TweakSlow,     \/\/ slower tweaks                                \/\/ e.g. L1 /;"	e	enum:ImGuiNavInput_
ImGuiNavLayer	imgui/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	imgui/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	imgui/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	imgui/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt\/ImGuiNavInput_Menu)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	imgui/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;          \/\/ -> enum ImGuiNavMoveFlags_       \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiNavMoveFlags_	imgui/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_AllowCurrentNavId	imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the c/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,   \/\/ Store alternate result in NavMoveRe/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_ScrollToEdge	imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_ScrollToEdge          = 1 << 6$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	imgui/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful for provid/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveResult	imgui/imgui_internal.h	/^    ImGuiNavMoveResult() { Clear(); }$/;"	f	struct:ImGuiNavMoveResult
ImGuiNavMoveResult	imgui/imgui_internal.h	/^struct ImGuiNavMoveResult$/;"	s
ImGuiNextItemData	imgui/imgui_internal.h	/^    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextItemData
ImGuiNextItemData	imgui/imgui_internal.h	/^struct ImGuiNextItemData$/;"	s
ImGuiNextItemDataFlags	imgui/imgui_internal.h	/^typedef int ImGuiNextItemDataFlags;     \/\/ -> enum ImGuiNextItemDataFlags_  \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextItemDataFlags_	imgui/imgui_internal.h	/^enum ImGuiNextItemDataFlags_$/;"	g
ImGuiNextItemDataFlags_HasOpen	imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasOpen  = 1 << 1$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasWidth	imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasWidth = 1 << 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_None	imgui/imgui_internal.h	/^    ImGuiNextItemDataFlags_None     = 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextWindowData	imgui/imgui_internal.h	/^    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	imgui/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiNextWindowDataFlags	imgui/imgui_internal.h	/^typedef int ImGuiNextWindowDataFlags;   \/\/ -> enum ImGuiNextWindowDataFlags_\/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextWindowDataFlags_	imgui/imgui_internal.h	/^enum ImGuiNextWindowDataFlags_$/;"	g
ImGuiNextWindowDataFlags_HasBgAlpha	imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasCollapsed	imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasContentSize	imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasFocus	imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasPos	imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSize	imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSizeConstraint	imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_None	imgui/imgui_internal.h	/^    ImGuiNextWindowDataFlags_None               = 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiOnceUponAFrame	imgui/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	imgui/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	imgui/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	imgui/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlotArrayGetterData	imgui/imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride/;"	f	struct:ImGuiPlotArrayGetterData	file:
ImGuiPlotArrayGetterData	imgui/imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	imgui/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	imgui/imgui_internal.h	/^    ImGuiPlotType_Histogram$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	imgui/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupData	imgui/imgui_internal.h	/^    ImGuiPopupData() { PopupId = 0; Window = SourceWindow = NULL; OpenFrameCount = -1; OpenParen/;"	f	struct:ImGuiPopupData
ImGuiPopupData	imgui/imgui_internal.h	/^struct ImGuiPopupData$/;"	s
ImGuiPopupPositionPolicy	imgui/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	imgui/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPtrOrIndex	imgui/imgui_internal.h	/^    ImGuiPtrOrIndex(int index)          { Ptr = NULL; Index = index; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	imgui/imgui_internal.h	/^    ImGuiPtrOrIndex(void* ptr)          { Ptr = ptr; Index = -1; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	imgui/imgui_internal.h	/^struct ImGuiPtrOrIndex$/;"	s
ImGuiResizeBorderDef	imgui/imgui.cpp	/^        struct ImGuiResizeBorderDef$/;"	s	function:ImGui::RenderWindowOuterBorders	file:
ImGuiResizeGripDef	imgui/imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiSelectableFlags	imgui/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectabl/;"	t	typeref:typename:int
ImGuiSelectableFlagsPrivate_	imgui/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	imgui/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	imgui/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double cli/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowItemOverlap	imgui/imgui.h	/^    ImGuiSelectableFlags_AllowItemOverlap   = 1 << 4    \/\/ (WIP) Hit testing to allow subseque/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	imgui/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3,   \/\/ Cannot be selected, display grayed /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	imgui/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   \/\/ Clicking this don't close parent po/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DrawFillAvailWidth	imgui/imgui_internal.h	/^    ImGuiSelectableFlags_DrawFillAvailWidth = 1 << 23,  \/\/ FIXME: We may be able to remove thi/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_DrawHoveredWhenHeld	imgui/imgui_internal.h	/^    ImGuiSelectableFlags_DrawHoveredWhenHeld= 1 << 24,  \/\/ Always show active when held, even /;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoHoldingActiveID	imgui/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID  = 1 << 20,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	imgui/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_PressedOnClick	imgui/imgui_internal.h	/^    ImGuiSelectableFlags_PressedOnClick     = 1 << 21,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_PressedOnRelease	imgui/imgui_internal.h	/^    ImGuiSelectableFlags_PressedOnRelease   = 1 << 22,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SetNavIdOnHover	imgui/imgui_internal.h	/^    ImGuiSelectableFlags_SetNavIdOnHover    = 1 << 25$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	imgui/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Selectable frame can span all colum/;"	e	enum:ImGuiSelectableFlags_
ImGuiSeparatorFlags	imgui/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;        \/\/ -> enum ImGuiSeparatorFlags_     \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiSeparatorFlags_	imgui/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal          = 1 << 0,   \/\/ Axis default to current layout type/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_None                = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_SpanAllColumns	imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_SpanAllColumns      = 1 << 2$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	imgui/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical            = 1 << 1,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSettingsHandler	imgui/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	imgui/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiShrinkWidthItem	imgui/imgui_internal.h	/^struct ImGuiShrinkWidthItem$/;"	s
ImGuiSizeCallback	imgui/imgui.h	/^typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);$/;"	t	typeref:typename:void (*)(ImGuiSizeCallbackData * data)
ImGuiSizeCallbackData	imgui/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	imgui/imgui_internal.h	/^typedef int ImGuiSliderFlags;           \/\/ -> enum ImGuiSliderFlags_        \/\/ Flags: for Sl/;"	t	typeref:typename:int
ImGuiSliderFlags_	imgui/imgui_internal.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_None	imgui/imgui_internal.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Vertical	imgui/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 0$/;"	e	enum:ImGuiSliderFlags_
ImGuiStorage	imgui/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStoragePair	imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, float _val_f)    { key = _key; val_f = _val_f; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, int _val_i)      { key = _key; val_i = _val_i; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	imgui/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, void* _val_p)    { key = _key; val_p = _val_p; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	imgui/imgui.h	/^    struct ImGuiStoragePair$/;"	s	struct:ImGuiStorage
ImGuiStyle	imgui/imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	imgui/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloa/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	imgui/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	imgui/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	imgui/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable ide/;"	t	typeref:typename:int
ImGuiStyleVarInfo	imgui/imgui.cpp	/^struct ImGuiStyleVarInfo$/;"	s	file:
ImGuiStyleVar_	imgui/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	imgui/imgui.h	/^    ImGuiStyleVar_Alpha,               \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	imgui/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,     \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	imgui/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	imgui/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,     \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	imgui/imgui.h	/^    ImGuiStyleVar_ChildRounding,       \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_Count_	imgui/imgui.h	/^    , ImGuiStyleVar_Count_ = ImGuiStyleVar_COUNT                    \/\/ [renamed in 1.60]$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	imgui/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,     \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	imgui/imgui.h	/^    ImGuiStyleVar_FramePadding,        \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	imgui/imgui.h	/^    ImGuiStyleVar_FrameRounding,       \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	imgui/imgui.h	/^    ImGuiStyleVar_GrabMinSize,         \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	imgui/imgui.h	/^    ImGuiStyleVar_GrabRounding,        \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	imgui/imgui.h	/^    ImGuiStyleVar_IndentSpacing,       \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	imgui/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,    \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	imgui/imgui.h	/^    ImGuiStyleVar_ItemSpacing,         \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	imgui/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,     \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	imgui/imgui.h	/^    ImGuiStyleVar_PopupRounding,       \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,   \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	imgui/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,       \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	imgui/imgui.h	/^    ImGuiStyleVar_SelectableTextAlign, \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	imgui/imgui.h	/^    ImGuiStyleVar_TabRounding,         \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	imgui/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,    \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	imgui/imgui.h	/^    ImGuiStyleVar_WindowMinSize,       \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	imgui/imgui.h	/^    ImGuiStyleVar_WindowPadding,       \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	imgui/imgui.h	/^    ImGuiStyleVar_WindowRounding,      \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	imgui/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,    \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	imgui/imgui_internal.h	/^struct ImGuiTabBar$/;"	s
ImGuiTabBar	imgui/imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBarFlags	imgui/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabB/;"	t	typeref:typename:int
ImGuiTabBarFlagsPrivate_	imgui/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	imgui/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	imgui/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new ta/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	imgui/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't u/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_FittingPolicyDefault_	imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown |/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,   \/\/ Resize tabs when they don't/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	imgui/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,   \/\/ Add scroll buttons when tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	imgui/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	imgui/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	imgui/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   \/\/ Disable scrolling buttons (/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	imgui/imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hover/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	imgui/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	imgui/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	imgui/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22   \/\/ FIXME: Settings are handled by /;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_TabListPopupButton	imgui/imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   \/\/ Disable buttons to open the/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabItem	imgui/imgui_internal.h	/^    ImGuiTabItem()      { ID = 0; Flags = ImGuiTabItemFlags_None; LastFrameVisible = LastFrameSe/;"	f	struct:ImGuiTabItem
ImGuiTabItem	imgui/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	imgui/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabI/;"	t	typeref:typename:int
ImGuiTabItemFlagsPrivate_	imgui/imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_	imgui/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_NoCloseButton	imgui/imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20   \/\/ Track whether p_open was set or/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	imgui/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	imgui/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3    \/\/ Don't call PushID(tab->ID)\//;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	imgui/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SetSelected	imgui/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmati/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	imgui/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Append '*' to title without/;"	e	enum:ImGuiTabItemFlags_
ImGuiTextBuffer	imgui/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	imgui/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextEditCallback	imgui/imgui.h	/^typedef ImGuiInputTextCallback      ImGuiTextEditCallback;    \/\/ OBSOLETED in 1.63 (from Aug 2/;"	t	typeref:typename:ImGuiInputTextCallback
ImGuiTextEditCallbackData	imgui/imgui.h	/^typedef ImGuiInputTextCallbackData  ImGuiTextEditCallbackData;$/;"	t	typeref:typename:ImGuiInputTextCallbackData
ImGuiTextFilter	imgui/imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter)$/;"	f	class:ImGuiTextFilter
ImGuiTextFilter	imgui/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextFlags	imgui/imgui_internal.h	/^typedef int ImGuiTextFlags;             \/\/ -> enum ImGuiTextFlags_          \/\/ Flags: for Te/;"	t	typeref:typename:int
ImGuiTextFlags_	imgui/imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	imgui/imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText = 1 << 0$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	imgui/imgui_internal.h	/^    ImGuiTextFlags_None = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextRange	imgui/imgui.h	/^        ImGuiTextRange()                                { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	imgui/imgui.h	/^        ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	imgui/imgui.h	/^    struct ImGuiTextRange$/;"	s	struct:ImGuiTextFilter
ImGuiTooltipFlags	imgui/imgui_internal.h	/^typedef int ImGuiTooltipFlags;          \/\/ -> enum ImGuiTooltipFlags_       \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiTooltipFlags_	imgui/imgui_internal.h	/^enum ImGuiTooltipFlags_$/;"	g
ImGuiTooltipFlags_None	imgui/imgui_internal.h	/^    ImGuiTooltipFlags_None = 0,$/;"	e	enum:ImGuiTooltipFlags_
ImGuiTooltipFlags_OverridePreviousTooltip	imgui/imgui_internal.h	/^    ImGuiTooltipFlags_OverridePreviousTooltip = 1 << 0      \/\/ Override will clear\/ignore pre/;"	e	enum:ImGuiTooltipFlags_
ImGuiTreeNodeFlags	imgui/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode(/;"	t	typeref:typename:int
ImGuiTreeNodeFlagsPrivate_	imgui/imgui_internal.h	/^enum ImGuiTreeNodeFlagsPrivate_$/;"	g
ImGuiTreeNodeFlags_	imgui/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	imgui/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = 1 << 2,   \/\/ Hit testing to allow subsequent wid/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	imgui/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_ClipLabelForTrailingButton	imgui/imgui_internal.h	/^    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 20$/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_CollapsingHeader	imgui/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoT/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	imgui/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	imgui/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unfra/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	imgui/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Full colored frame (e.g. for Collap/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	imgui/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a c/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	imgui/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,  \/\/ (WIP) Nav: left direction may move /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	imgui/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e./;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	imgui/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Only open when clicking on the arro/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	imgui/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Need double-click to open node$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Selected	imgui/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAvailWidth	imgui/imgui.h	/^    ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,  \/\/ Extend hit box to the right-most ed/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanFullWidth	imgui/imgui.h	/^    ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,  \/\/ Extend hit box to the left-most and/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiWindow	imgui/imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* context, const char* name)$/;"	f	class:ImGuiWindow
ImGuiWindow	imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowFlags	imgui/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin(), /;"	t	typeref:typename:int
ImGuiWindowFlags_	imgui/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content /;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (e/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,  \/\/ Ensure child windows without border/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	imgui/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (eve/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	imgui/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28   \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	imgui/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	imgui/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appea/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	imgui/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	imgui/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	imgui/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 23,  \/\/ [BETA] Allow gamepad\/keyboard navi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	imgui/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (W/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	imgui/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	imgui/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by d/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	imgui/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoR/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	imgui/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitio/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	imgui/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	imgui/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering te/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	imgui/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	imgui/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_No/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	imgui/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 19,  \/\/ No focusing toward this window with/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	imgui/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 18,  \/\/ No gamepad\/keyboard navigation wit/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	imgui/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lowe/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	imgui/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini f/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling w/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	imgui/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can stil/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	imgui/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	imgui/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	imgui/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	imgui/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	imgui/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 20,  \/\/ Append '*' to title without affecti/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowSettings	imgui/imgui_internal.h	/^    ImGuiWindowSettings()       { ID = 0; Pos = Size = ImVec2ih(0, 0); Collapsed = false; }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	imgui/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowTempData	imgui/imgui_internal.h	/^    ImGuiWindowTempData()$/;"	f	struct:ImGuiWindowTempData
ImGuiWindowTempData	imgui/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplAllegro5_CreateDeviceObjects	imgui/examples/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplAllegro5_GetClipboardText	imgui/examples/imgui_impl_allegro5.cpp	/^static const char* ImGui_ImplAllegro5_GetClipboardText(void*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplAllegro5_Init	imgui/examples/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_Init(ALLEGRO_DISPLAY* display)$/;"	f	typeref:typename:bool
ImGui_ImplAllegro5_InvalidateDeviceObjects	imgui/examples/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_NewFrame	imgui/examples/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_ProcessEvent	imgui/examples/imgui_impl_allegro5.cpp	/^bool ImGui_ImplAllegro5_ProcessEvent(ALLEGRO_EVENT *ev)$/;"	f	typeref:typename:bool
ImGui_ImplAllegro5_RenderDrawData	imgui/examples/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_SetClipboardText	imgui/examples/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_SetClipboardText(void*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplAllegro5_SetupRenderState	imgui/examples/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_SetupRenderState(ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
ImGui_ImplAllegro5_Shutdown	imgui/examples/imgui_impl_allegro5.cpp	/^void ImGui_ImplAllegro5_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplAllegro5_UpdateMouseCursor	imgui/examples/imgui_impl_allegro5.cpp	/^static void ImGui_ImplAllegro5_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_CreateDeviceObjects	imgui/examples/imgui_impl_dx10.cpp	/^bool    ImGui_ImplDX10_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX10_CreateFontsTexture	imgui/examples/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_Init	imgui/examples/imgui_impl_dx10.cpp	/^bool    ImGui_ImplDX10_Init(ID3D10Device* device)$/;"	f	typeref:typename:bool
ImGui_ImplDX10_InvalidateDeviceObjects	imgui/examples/imgui_impl_dx10.cpp	/^void    ImGui_ImplDX10_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX10_NewFrame	imgui/examples/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX10_RenderDrawData	imgui/examples/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplDX10_SetupRenderState	imgui/examples/imgui_impl_dx10.cpp	/^static void ImGui_ImplDX10_SetupRenderState(ImDrawData* draw_data, ID3D10Device* ctx)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX10_Shutdown	imgui/examples/imgui_impl_dx10.cpp	/^void ImGui_ImplDX10_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX11_CreateDeviceObjects	imgui/examples/imgui_impl_dx11.cpp	/^bool    ImGui_ImplDX11_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX11_CreateFontsTexture	imgui/examples/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_Init	imgui/examples/imgui_impl_dx11.cpp	/^bool    ImGui_ImplDX11_Init(ID3D11Device* device, ID3D11DeviceContext* device_context)$/;"	f	typeref:typename:bool
ImGui_ImplDX11_InvalidateDeviceObjects	imgui/examples/imgui_impl_dx11.cpp	/^void    ImGui_ImplDX11_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX11_NewFrame	imgui/examples/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX11_RenderDrawData	imgui/examples/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplDX11_SetupRenderState	imgui/examples/imgui_impl_dx11.cpp	/^static void ImGui_ImplDX11_SetupRenderState(ImDrawData* draw_data, ID3D11DeviceContext* ctx)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX11_Shutdown	imgui/examples/imgui_impl_dx11.cpp	/^void ImGui_ImplDX11_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX12_CreateDeviceObjects	imgui/examples/imgui_impl_dx12.cpp	/^bool    ImGui_ImplDX12_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX12_CreateFontsTexture	imgui/examples/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_CreateFontsTexture()$/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_Init	imgui/examples/imgui_impl_dx12.cpp	/^bool ImGui_ImplDX12_Init(ID3D12Device* device, int num_frames_in_flight, DXGI_FORMAT rtv_format,/;"	f	typeref:typename:bool
ImGui_ImplDX12_InvalidateDeviceObjects	imgui/examples/imgui_impl_dx12.cpp	/^void    ImGui_ImplDX12_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX12_NewFrame	imgui/examples/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX12_RenderDrawData	imgui/examples/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_RenderDrawData(ImDrawData* draw_data, ID3D12GraphicsCommandList* ctx)$/;"	f	typeref:typename:void
ImGui_ImplDX12_SetupRenderState	imgui/examples/imgui_impl_dx12.cpp	/^static void ImGui_ImplDX12_SetupRenderState(ImDrawData* draw_data, ID3D12GraphicsCommandList* ct/;"	f	typeref:typename:void	file:
ImGui_ImplDX12_Shutdown	imgui/examples/imgui_impl_dx12.cpp	/^void ImGui_ImplDX12_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplDX9_CreateDeviceObjects	imgui/examples/imgui_impl_dx9.cpp	/^bool ImGui_ImplDX9_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplDX9_CreateFontsTexture	imgui/examples/imgui_impl_dx9.cpp	/^static bool ImGui_ImplDX9_CreateFontsTexture()$/;"	f	typeref:typename:bool	file:
ImGui_ImplDX9_Init	imgui/examples/imgui_impl_dx9.cpp	/^bool ImGui_ImplDX9_Init(IDirect3DDevice9* device)$/;"	f	typeref:typename:bool
ImGui_ImplDX9_InvalidateDeviceObjects	imgui/examples/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplDX9_NewFrame	imgui/examples/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplDX9_RenderDrawData	imgui/examples/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplDX9_SetupRenderState	imgui/examples/imgui_impl_dx9.cpp	/^static void ImGui_ImplDX9_SetupRenderState(ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
ImGui_ImplDX9_Shutdown	imgui/examples/imgui_impl_dx9.cpp	/^void ImGui_ImplDX9_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_Init	imgui/examples/imgui_impl_glut.cpp	/^bool ImGui_ImplGLUT_Init()$/;"	f	typeref:typename:bool
ImGui_ImplGLUT_InstallFuncs	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_InstallFuncs()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_KeyboardFunc	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_KeyboardFunc(unsigned char c, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_KeyboardUpFunc	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_KeyboardUpFunc(unsigned char c, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_MotionFunc	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_MotionFunc(int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_MouseFunc	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_MouseFunc(int glut_button, int state, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_MouseWheelFunc	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_MouseWheelFunc(int button, int dir, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_NewFrame	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_ReshapeFunc	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_ReshapeFunc(int w, int h)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_Shutdown	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGLUT_SpecialFunc	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_SpecialFunc(int key, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_SpecialUpFunc	imgui/examples/imgui_impl_glut.cpp	/^void ImGui_ImplGLUT_SpecialUpFunc(int key, int x, int y)$/;"	f	typeref:typename:void
ImGui_ImplGLUT_UpdateKeyboardMods	imgui/examples/imgui_impl_glut.cpp	/^static void ImGui_ImplGLUT_UpdateKeyboardMods()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_CharCallback	imgui/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_CharCallback(GLFWwindow* window, unsigned int c)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_GetClipboardText	imgui/examples/imgui_impl_glfw.cpp	/^static const char* ImGui_ImplGlfw_GetClipboardText(void* user_data)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplGlfw_Init	imgui/examples/imgui_impl_glfw.cpp	/^static bool ImGui_ImplGlfw_Init(GLFWwindow* window, bool install_callbacks, GlfwClientApi client/;"	f	typeref:typename:bool	file:
ImGui_ImplGlfw_InitForOpenGL	imgui/examples/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForOpenGL(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_InitForVulkan	imgui/examples/imgui_impl_glfw.cpp	/^bool ImGui_ImplGlfw_InitForVulkan(GLFWwindow* window, bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_ImplGlfw_KeyCallback	imgui/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_MouseButtonCallback	imgui/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_NewFrame	imgui/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_ScrollCallback	imgui/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f	typeref:typename:void
ImGui_ImplGlfw_SetClipboardText	imgui/examples/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_SetClipboardText(void* user_data, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_Shutdown	imgui/examples/imgui_impl_glfw.cpp	/^void ImGui_ImplGlfw_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplGlfw_UpdateGamepads	imgui/examples/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMouseCursor	imgui/examples/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplGlfw_UpdateMousePosAndButtons	imgui/examples/imgui_impl_glfw.cpp	/^static void ImGui_ImplGlfw_UpdateMousePosAndButtons()$/;"	f	typeref:typename:void	file:
ImGui_ImplMetal_CreateDeviceObjects	imgui/examples/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateDeviceObjects(id<MTLDevice> device)$/;"	f
ImGui_ImplMetal_CreateFontsTexture	imgui/examples/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_CreateFontsTexture(id<MTLDevice> device)$/;"	f
ImGui_ImplMetal_DestroyDeviceObjects	imgui/examples/imgui_impl_metal.mm	/^void ImGui_ImplMetal_DestroyDeviceObjects()$/;"	f
ImGui_ImplMetal_DestroyFontsTexture	imgui/examples/imgui_impl_metal.mm	/^void ImGui_ImplMetal_DestroyFontsTexture()$/;"	f
ImGui_ImplMetal_Init	imgui/examples/imgui_impl_metal.mm	/^bool ImGui_ImplMetal_Init(id<MTLDevice> device)$/;"	f
ImGui_ImplMetal_NewFrame	imgui/examples/imgui_impl_metal.mm	/^void ImGui_ImplMetal_NewFrame(MTLRenderPassDescriptor *renderPassDescriptor)$/;"	f
ImGui_ImplMetal_RenderDrawData	imgui/examples/imgui_impl_metal.mm	/^void ImGui_ImplMetal_RenderDrawData(ImDrawData* draw_data, id<MTLCommandBuffer> commandBuffer, i/;"	f
ImGui_ImplMetal_Shutdown	imgui/examples/imgui_impl_metal.mm	/^void ImGui_ImplMetal_Shutdown()$/;"	f
ImGui_ImplOSX_HandleEvent	imgui/examples/imgui_impl_osx.mm	/^bool ImGui_ImplOSX_HandleEvent(NSEvent* event, NSView* view)$/;"	f
ImGui_ImplOSX_Init	imgui/examples/imgui_impl_osx.mm	/^bool ImGui_ImplOSX_Init()$/;"	f
ImGui_ImplOSX_NewFrame	imgui/examples/imgui_impl_osx.mm	/^void ImGui_ImplOSX_NewFrame(NSView* view)$/;"	f
ImGui_ImplOSX_Shutdown	imgui/examples/imgui_impl_osx.mm	/^void ImGui_ImplOSX_Shutdown()$/;"	f
ImGui_ImplOSX_UpdateMouseCursor	imgui/examples/imgui_impl_osx.mm	/^static void ImGui_ImplOSX_UpdateMouseCursor()$/;"	f
ImGui_ImplOpenGL2_CreateDeviceObjects	imgui/examples/imgui_impl_opengl2.cpp	/^bool    ImGui_ImplOpenGL2_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL2_CreateFontsTexture	imgui/examples/imgui_impl_opengl2.cpp	/^bool ImGui_ImplOpenGL2_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL2_DestroyDeviceObjects	imgui/examples/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_DestroyFontsTexture	imgui/examples/imgui_impl_opengl2.cpp	/^void ImGui_ImplOpenGL2_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_Init	imgui/examples/imgui_impl_opengl2.cpp	/^bool    ImGui_ImplOpenGL2_Init()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL2_NewFrame	imgui/examples/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_RenderDrawData	imgui/examples/imgui_impl_opengl2.cpp	/^void ImGui_ImplOpenGL2_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL2_SetupRenderState	imgui/examples/imgui_impl_opengl2.cpp	/^static void ImGui_ImplOpenGL2_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL2_Shutdown	imgui/examples/imgui_impl_opengl2.cpp	/^void    ImGui_ImplOpenGL2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_CreateDeviceObjects	imgui/examples/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_CreateFontsTexture	imgui/examples/imgui_impl_opengl3.cpp	/^bool ImGui_ImplOpenGL3_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_DestroyDeviceObjects	imgui/examples/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_DestroyFontsTexture	imgui/examples/imgui_impl_opengl3.cpp	/^void ImGui_ImplOpenGL3_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_Init	imgui/examples/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_Init(const char* glsl_version)$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_NewFrame	imgui/examples/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_RenderDrawData	imgui/examples/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_SetupRenderState	imgui/examples/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_Shutdown	imgui/examples/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDL2_GetClipboardText	imgui/examples/imgui_impl_sdl.cpp	/^static const char* ImGui_ImplSDL2_GetClipboardText(void*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplSDL2_Init	imgui/examples/imgui_impl_sdl.cpp	/^static bool ImGui_ImplSDL2_Init(SDL_Window* window)$/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL2_InitForD3D	imgui/examples/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_InitForD3D(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForOpenGL	imgui/examples/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_InitForOpenGL(SDL_Window* window, void* sdl_gl_context)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForVulkan	imgui/examples/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_InitForVulkan(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_NewFrame	imgui/examples/imgui_impl_sdl.cpp	/^void ImGui_ImplSDL2_NewFrame(SDL_Window* window)$/;"	f	typeref:typename:void
ImGui_ImplSDL2_ProcessEvent	imgui/examples/imgui_impl_sdl.cpp	/^bool ImGui_ImplSDL2_ProcessEvent(const SDL_Event* event)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_SetClipboardText	imgui/examples/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_SetClipboardText(void*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_Shutdown	imgui/examples/imgui_impl_sdl.cpp	/^void ImGui_ImplSDL2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDL2_UpdateGamepads	imgui/examples/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMouseCursor	imgui/examples/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMousePosAndButtons	imgui/examples/imgui_impl_sdl.cpp	/^static void ImGui_ImplSDL2_UpdateMousePosAndButtons()$/;"	f	typeref:typename:void	file:
ImGui_ImplVulkanH_CreateWindow	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindow(VkInstance instance, VkPhysicalDevice physical_device, VkDev/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateWindowCommandBuffers	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowCommandBuffers(VkPhysicalDevice physical_device, VkDevice dev/;"	f	typeref:typename:void
ImGui_ImplVulkanH_CreateWindowSwapChain	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_CreateWindowSwapChain(VkPhysicalDevice physical_device, VkDevice device, /;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrame	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrame(VkDevice device, ImGui_ImplVulkanH_Frame* fd, const VkAlloca/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrameRenderBuffers	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrameRenderBuffers(VkDevice device, ImGui_ImplVulkanH_FrameRenderB/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyFrameSemaphores	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyFrameSemaphores(VkDevice device, ImGui_ImplVulkanH_FrameSemaphores/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyWindow	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyWindow(VkInstance instance, VkDevice device, ImGui_ImplVulkanH_Win/;"	f	typeref:typename:void
ImGui_ImplVulkanH_DestroyWindowRenderBuffers	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkanH_DestroyWindowRenderBuffers(VkDevice device, ImGui_ImplVulkanH_WindowRende/;"	f	typeref:typename:void
ImGui_ImplVulkanH_Frame	imgui/examples/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_Frame$/;"	s
ImGui_ImplVulkanH_FrameRenderBuffers	imgui/examples/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkanH_FrameRenderBuffers$/;"	s	file:
ImGui_ImplVulkanH_FrameSemaphores	imgui/examples/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_FrameSemaphores$/;"	s
ImGui_ImplVulkanH_GetMinImageCountFromPresentMode	imgui/examples/imgui_impl_vulkan.cpp	/^int ImGui_ImplVulkanH_GetMinImageCountFromPresentMode(VkPresentModeKHR present_mode)$/;"	f	typeref:typename:int
ImGui_ImplVulkanH_SelectPresentMode	imgui/examples/imgui_impl_vulkan.cpp	/^VkPresentModeKHR ImGui_ImplVulkanH_SelectPresentMode(VkPhysicalDevice physical_device, VkSurface/;"	f	typeref:typename:VkPresentModeKHR
ImGui_ImplVulkanH_SelectSurfaceFormat	imgui/examples/imgui_impl_vulkan.cpp	/^VkSurfaceFormatKHR ImGui_ImplVulkanH_SelectSurfaceFormat(VkPhysicalDevice physical_device, VkSur/;"	f	typeref:typename:VkSurfaceFormatKHR
ImGui_ImplVulkanH_Window	imgui/examples/imgui_impl_vulkan.h	/^    ImGui_ImplVulkanH_Window()$/;"	f	struct:ImGui_ImplVulkanH_Window
ImGui_ImplVulkanH_Window	imgui/examples/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkanH_Window$/;"	s
ImGui_ImplVulkanH_WindowRenderBuffers	imgui/examples/imgui_impl_vulkan.cpp	/^struct ImGui_ImplVulkanH_WindowRenderBuffers$/;"	s	file:
ImGui_ImplVulkan_CreateDeviceObjects	imgui/examples/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_CreateFontsTexture	imgui/examples/imgui_impl_vulkan.cpp	/^bool ImGui_ImplVulkan_CreateFontsTexture(VkCommandBuffer command_buffer)$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_DestroyDeviceObjects	imgui/examples/imgui_impl_vulkan.cpp	/^void    ImGui_ImplVulkan_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_DestroyFontUploadObjects	imgui/examples/imgui_impl_vulkan.cpp	/^void    ImGui_ImplVulkan_DestroyFontUploadObjects()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_Init	imgui/examples/imgui_impl_vulkan.cpp	/^bool    ImGui_ImplVulkan_Init(ImGui_ImplVulkan_InitInfo* info, VkRenderPass render_pass)$/;"	f	typeref:typename:bool
ImGui_ImplVulkan_InitInfo	imgui/examples/imgui_impl_vulkan.h	/^struct ImGui_ImplVulkan_InitInfo$/;"	s
ImGui_ImplVulkan_MemoryType	imgui/examples/imgui_impl_vulkan.cpp	/^static uint32_t ImGui_ImplVulkan_MemoryType(VkMemoryPropertyFlags properties, uint32_t type_bits/;"	f	typeref:typename:uint32_t	file:
ImGui_ImplVulkan_NewFrame	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplVulkan_RenderDrawData	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_RenderDrawData(ImDrawData* draw_data, VkCommandBuffer command_buffer)$/;"	f	typeref:typename:void
ImGui_ImplVulkan_SetMinImageCount	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_SetMinImageCount(uint32_t min_image_count)$/;"	f	typeref:typename:void
ImGui_ImplVulkan_SetupRenderState	imgui/examples/imgui_impl_vulkan.cpp	/^static void ImGui_ImplVulkan_SetupRenderState(ImDrawData* draw_data, VkCommandBuffer command_buf/;"	f	typeref:typename:void	file:
ImGui_ImplVulkan_Shutdown	imgui/examples/imgui_impl_vulkan.cpp	/^void ImGui_ImplVulkan_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplWin32_Init	imgui/examples/imgui_impl_win32.cpp	/^bool    ImGui_ImplWin32_Init(void* hwnd)$/;"	f	typeref:typename:bool
ImGui_ImplWin32_NewFrame	imgui/examples/imgui_impl_win32.cpp	/^void    ImGui_ImplWin32_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplWin32_Shutdown	imgui/examples/imgui_impl_win32.cpp	/^void    ImGui_ImplWin32_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplWin32_UpdateGamepads	imgui/examples/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_UpdateMouseCursor	imgui/examples/imgui_impl_win32.cpp	/^static bool ImGui_ImplWin32_UpdateMouseCursor()$/;"	f	typeref:typename:bool	file:
ImGui_ImplWin32_UpdateMousePos	imgui/examples/imgui_impl_win32.cpp	/^static void ImGui_ImplWin32_UpdateMousePos()$/;"	f	typeref:typename:void	file:
ImGui_ImplWin32_WndProcHandler	imgui/examples/imgui_impl_win32.cpp	/^IMGUI_IMPL_API LRESULT ImGui_ImplWin32_WndProcHandler(HWND hwnd, UINT msg, WPARAM wParam, LPARAM/;"	f	typeref:typename:IMGUI_IMPL_API LRESULT
ImGui_Marmalade_CharCallback	imgui/examples/imgui_impl_marmalade.cpp	/^int32 ImGui_Marmalade_CharCallback(void* system_data, void* user_data)$/;"	f	typeref:typename:int32
ImGui_Marmalade_CreateDeviceObjects	imgui/examples/imgui_impl_marmalade.cpp	/^bool ImGui_Marmalade_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_Marmalade_GetClipboardText	imgui/examples/imgui_impl_marmalade.cpp	/^static const char* ImGui_Marmalade_GetClipboardText(void* \/*user_data*\/)$/;"	f	typeref:typename:const char *	file:
ImGui_Marmalade_Init	imgui/examples/imgui_impl_marmalade.cpp	/^bool    ImGui_Marmalade_Init(bool install_callbacks)$/;"	f	typeref:typename:bool
ImGui_Marmalade_InvalidateDeviceObjects	imgui/examples/imgui_impl_marmalade.cpp	/^void    ImGui_Marmalade_InvalidateDeviceObjects()$/;"	f	typeref:typename:void
ImGui_Marmalade_KeyCallback	imgui/examples/imgui_impl_marmalade.cpp	/^int32 ImGui_Marmalade_KeyCallback(void* system_data, void* user_data)$/;"	f	typeref:typename:int32
ImGui_Marmalade_NewFrame	imgui/examples/imgui_impl_marmalade.cpp	/^void ImGui_Marmalade_NewFrame()$/;"	f	typeref:typename:void
ImGui_Marmalade_PointerButtonEventCallback	imgui/examples/imgui_impl_marmalade.cpp	/^int32 ImGui_Marmalade_PointerButtonEventCallback(void* system_data, void* user_data)$/;"	f	typeref:typename:int32
ImGui_Marmalade_RenderDrawData	imgui/examples/imgui_impl_marmalade.cpp	/^void ImGui_Marmalade_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_Marmalade_SetClipboardText	imgui/examples/imgui_impl_marmalade.cpp	/^static void ImGui_Marmalade_SetClipboardText(void* \/*user_data*\/, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_Marmalade_Shutdown	imgui/examples/imgui_impl_marmalade.cpp	/^void ImGui_Marmalade_Shutdown()$/;"	f	typeref:typename:void
ImHash	imgui/imgui_internal.h	/^static inline ImU32     ImHash(const void* data, int size, ImU32 seed = 0) { return size ? ImHas/;"	f	typeref:typename:ImU32
ImHashData	imgui/imgui.cpp	/^ImU32 ImHashData(const void* data_p, size_t data_size, ImU32 seed)$/;"	f	typeref:typename:ImU32
ImHashStr	imgui/imgui.cpp	/^ImU32 ImHashStr(const char* data_p, size_t data_size, ImU32 seed)$/;"	f	typeref:typename:ImU32
ImInvLength	imgui/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = lhs./;"	f	typeref:typename:float
ImIsPowerOfTwo	imgui/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImLengthSqr	imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return lhs.x*l/;"	f	typeref:typename:float
ImLengthSqr	imgui/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return lhs.x*l/;"	f	typeref:typename:float
ImLerp	imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	imgui/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	imgui/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(/;"	f	typeref:typename:ImVec4
ImLerp	imgui/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a +/;"	f	typeref:typename:T
ImLineClosestPoint	imgui/imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f	typeref:typename:ImVec2
ImLinearSweep	imgui/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < /;"	f	typeref:typename:float
ImMax	imgui/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMax	imgui/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= /;"	f	typeref:typename:T
ImMin	imgui/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMin	imgui/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < r/;"	f	typeref:typename:T
ImModPositive	imgui/imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b)/;"	f	typeref:typename:int
ImMul	imgui/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImNewDummy	imgui/imgui.h	/^struct ImNewDummy {};$/;"	s
ImParseFormatFindEnd	imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatFindStart	imgui/imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatPrecision	imgui/imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f	typeref:typename:int
ImParseFormatTrimDecorations	imgui/imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f	typeref:typename:const char *
ImPool	imgui/imgui_internal.h	/^    ImPool()    { FreeIdx = 0; }$/;"	f	struct:ImPool
ImPool	imgui/imgui_internal.h	/^struct IMGUI_API ImPool$/;"	s
ImPoolIdx	imgui/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t	typeref:typename:int
ImPow	imgui/imgui_internal.h	/^static inline double ImPow(double x, double y)  { return pow(x, y); }$/;"	f	typeref:typename:double
ImPow	imgui/imgui_internal.h	/^static inline float  ImPow(float x, float y)    { return powf(x, y); }          \/\/ DragBehavio/;"	f	typeref:typename:float
ImQsort	imgui/imgui_internal.h	/^#define ImQsort /;"	d
ImRect	imgui/imgui_internal.h	/^    ImRect()                                        : Min(0.0f, 0.0f), Max(0.0f, 0.0f)          /;"	f	struct:ImRect
ImRect	imgui/imgui_internal.h	/^    ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)                        /;"	f	struct:ImRect
ImRect	imgui/imgui_internal.h	/^    ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)              /;"	f	struct:ImRect
ImRect	imgui/imgui_internal.h	/^    ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)                  /;"	f	struct:ImRect
ImRect	imgui/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	imgui/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(/;"	f	typeref:typename:ImVec2
ImS16	imgui/imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t	typeref:typename:signed short
ImS32	imgui/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t	typeref:typename:signed int
ImS64	imgui/imgui.h	/^typedef int64_t             ImS64;  \/\/ 64-bit signed integer (pre C++11)$/;"	t	typeref:typename:int64_t
ImS64	imgui/imgui.h	/^typedef signed   __int64    ImS64;  \/\/ 64-bit signed integer (pre and post C++11 with Visual S/;"	t	typeref:typename:signed __int64
ImS64	imgui/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer (post C++11)$/;"	t	typeref:typename:signed long long
ImS8	imgui/imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer$/;"	t	typeref:typename:signed char
ImSaturate	imgui/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0./;"	f	typeref:typename:float
ImSin	imgui/imgui_internal.h	/^#define ImSin(/;"	d
ImSqrt	imgui/imgui_internal.h	/^#define ImSqrt(/;"	d
ImStb	imgui/imgui_internal.h	/^namespace ImStb$/;"	n
ImStb	imgui/imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStrSkipBlank	imgui/imgui.cpp	/^const char* ImStrSkipBlank(const char* str)$/;"	f	typeref:typename:const char *
ImStrTrimBlanks	imgui/imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f	typeref:typename:void
ImStrbolW	imgui/imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginn/;"	f	typeref:typename:const ImWchar *
ImStrchrRange	imgui/imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f	typeref:typename:const char *
ImStrdup	imgui/imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f	typeref:typename:char *
ImStrdupcpy	imgui/imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f	typeref:typename:char *
ImStreolRange	imgui/imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f	typeref:typename:const char *
ImStricmp	imgui/imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f	typeref:typename:int
ImStristr	imgui/imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const /;"	f	typeref:typename:const char *
ImStrlenW	imgui/imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f	typeref:typename:int
ImStrncpy	imgui/imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f	typeref:typename:void
ImStrnicmp	imgui/imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f	typeref:typename:int
ImSubClampOverflow	imgui/imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (/;"	f	typeref:typename:T
ImSwap	imgui/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a =/;"	f	typeref:typename:void
ImTextCharFromUtf8	imgui/imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCharToUtf8	imgui/imgui.cpp	/^static inline int ImTextCharToUtf8(char* buf, int buf_size, unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountCharsFromUtf8	imgui/imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	imgui/imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountUtf8BytesFromStr	imgui/imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextStrFromUtf8	imgui/imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, /;"	f	typeref:typename:int
ImTextStrToUtf8	imgui/imgui.cpp	/^int ImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextureID	imgui/imgui.h	/^typedef void* ImTextureID;          \/\/ User data to identify a texture (this is whatever to yo/;"	t	typeref:typename:void *
ImTriangleArea	imgui/imgui_internal.h	/^inline float         ImTriangleArea(const ImVec2& a, const ImVec2& b, const ImVec2& c) { return /;"	f	typeref:typename:float
ImTriangleBarycentricCoords	imgui/imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2/;"	f	typeref:typename:void
ImTriangleClosestPoint	imgui/imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p/;"	f	typeref:typename:ImVec2
ImTriangleContainsPoint	imgui/imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f	typeref:typename:bool
ImU16	imgui/imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t	typeref:typename:unsigned short
ImU32	imgui/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed col/;"	t	typeref:typename:unsigned int
ImU64	imgui/imgui.h	/^typedef uint64_t            ImU64;  \/\/ 64-bit unsigned integer (pre C++11)$/;"	t	typeref:typename:uint64_t
ImU64	imgui/imgui.h	/^typedef unsigned __int64    ImU64;  \/\/ 64-bit unsigned integer (pre and post C++11 with Visual/;"	t	typeref:typename:unsigned __int64
ImU64	imgui/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer (post C++11)$/;"	t	typeref:typename:unsigned long long
ImU8	imgui/imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t	typeref:typename:unsigned char
ImUpperPowerOfTwo	imgui/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v /;"	f	typeref:typename:int
ImVec1	imgui/imgui_internal.h	/^    ImVec1()         { x = 0.0f; }$/;"	f	struct:ImVec1
ImVec1	imgui/imgui_internal.h	/^    ImVec1(float _x) { x = _x; }$/;"	f	struct:ImVec1
ImVec1	imgui/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	imgui/imgui.h	/^    ImVec2()  { x = y = 0.0f; }$/;"	f	struct:ImVec2
ImVec2	imgui/imgui.h	/^    ImVec2(float _x, float _y) { x = _x; y = _y; }$/;"	f	struct:ImVec2
ImVec2	imgui/imgui.h	/^struct ImVec2$/;"	s
ImVec2ih	imgui/imgui_internal.h	/^    ImVec2ih()                           { x = y = 0; }$/;"	f	struct:ImVec2ih
ImVec2ih	imgui/imgui_internal.h	/^    ImVec2ih(short _x, short _y)         { x = _x; y = _y; }$/;"	f	struct:ImVec2ih
ImVec2ih	imgui/imgui_internal.h	/^    explicit ImVec2ih(const ImVec2& rhs) { x = (short)rhs.x; y = (short)rhs.y; }$/;"	f	struct:ImVec2ih
ImVec2ih	imgui/imgui_internal.h	/^struct ImVec2ih$/;"	s
ImVec4	imgui/imgui.h	/^    ImVec4()  { x = y = z = w = 0.0f; }$/;"	f	struct:ImVec4
ImVec4	imgui/imgui.h	/^    ImVec4(float _x, float _y, float _z, float _w) { x = _x; y = _y; z = _z; w = _w; }$/;"	f	struct:ImVec4
ImVec4	imgui/imgui.h	/^struct ImVec4$/;"	s
ImVector	imgui/imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	imgui/imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	imgui/imgui.h	/^struct ImVector$/;"	s
ImWchar	imgui/imgui.h	/^typedef unsigned short ImWchar;     \/\/ A single U16 character for keyboard input\/display. We /;"	t	typeref:typename:unsigned short
Image	imgui/imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, const ImVe/;"	f	class:ImGui	typeref:typename:void
ImageAcquiredSemaphore	imgui/examples/imgui_impl_vulkan.h	/^    VkSemaphore         ImageAcquiredSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameSemaphores	typeref:typename:VkSemaphore
ImageButton	imgui/imgui_widgets.cpp	/^bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:bool
ImageCount	imgui/examples/imgui_impl_vulkan.h	/^    uint32_t            ImageCount;             \/\/ >= MinImageCount$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
ImageCount	imgui/examples/imgui_impl_vulkan.h	/^    uint32_t            ImageCount;             \/\/ Number of simultaneous in-flight frames (re/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
ImeSetInputScreenPosFn	imgui/imgui.h	/^    void        (*ImeSetInputScreenPosFn)(int x, int y);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(int x,int y)
ImeSetInputScreenPosFn_DefaultImpl	imgui/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int x, int y)$/;"	f	typeref:typename:void	file:
ImeSetInputScreenPosFn_DefaultImpl	imgui/imgui.cpp	/^static void ImeSetInputScreenPosFn_DefaultImpl(int, int) {}$/;"	f	typeref:typename:void	file:
ImeWindowHandle	imgui/imgui.h	/^    void*       ImeWindowHandle;                \/\/ = NULL           \/\/ (Windows) Set this to/;"	m	struct:ImGuiIO	typeref:typename:void *
Indent	imgui/imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Indent	imgui/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
IndentSpacing	imgui/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tre/;"	m	struct:ImGuiStyle	typeref:typename:float
Index	imgui/docs/FAQ.md	/^## Index$/;"	s
Index	imgui/examples/imgui_impl_vulkan.cpp	/^    uint32_t            Index;$/;"	m	struct:ImGui_ImplVulkanH_WindowRenderBuffers	typeref:typename:uint32_t	file:
Index	imgui/imgui_internal.h	/^    int             Index;              \/\/ Usually index in a main pool.$/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:int
Index	imgui/imgui_internal.h	/^    int             Index;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:int
IndexAdvanceX	imgui/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<float>
IndexBuffer	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10Buffer *	file:
IndexBuffer	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11Buffer *	file:
IndexBuffer	imgui/examples/imgui_impl_dx12.cpp	/^    ID3D12Resource*     IndexBuffer;$/;"	m	struct:FrameResources	typeref:typename:ID3D12Resource *	file:
IndexBuffer	imgui/examples/imgui_impl_vulkan.cpp	/^    VkBuffer            IndexBuffer;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkBuffer	file:
IndexBufferFormat	imgui/examples/imgui_impl_dx10.cpp	/^        DXGI_FORMAT                 IndexBufferFormat;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:DXGI_FORMAT	file:
IndexBufferFormat	imgui/examples/imgui_impl_dx11.cpp	/^        DXGI_FORMAT                 IndexBufferFormat;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:DXGI_FORMAT	file:
IndexBufferMemory	imgui/examples/imgui_impl_vulkan.cpp	/^    VkDeviceMemory      IndexBufferMemory;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkDeviceMemory	file:
IndexBufferOffset	imgui/examples/imgui_impl_dx10.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
IndexBufferOffset	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
IndexBufferSize	imgui/examples/imgui_impl_dx12.cpp	/^    int                 IndexBufferSize;$/;"	m	struct:FrameResources	typeref:typename:int	file:
IndexBufferSize	imgui/examples/imgui_impl_vulkan.cpp	/^    VkDeviceSize        IndexBufferSize;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkDeviceSize	file:
IndexLookup	imgui/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<ImWchar>
Info	imgui/misc/freetype/imgui_freetype.cpp	/^        FontInfo        Info;               \/\/ Font descriptor of the current font.$/;"	m	struct:__anon76bbacac0111::FreeTypeFont	typeref:typename:FontInfo	file:
Info	imgui/misc/freetype/imgui_freetype.cpp	/^    GlyphInfo           Info;$/;"	m	struct:ImFontBuildSrcGlyphFT	typeref:typename:GlyphInfo	file:
IniFilename	imgui/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file. Se/;"	m	struct:ImGuiIO	typeref:typename:const char *
IniSavingRate	imgui/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between /;"	m	struct:ImGuiIO	typeref:typename:float
InitFont	imgui/misc/freetype/imgui_freetype.cpp	/^    bool FreeTypeFont::InitFont(FT_Library ft_library, const ImFontConfig& cfg, unsigned int ext/;"	f	class:__anon76bbacac0111::FreeTypeFont	typeref:typename:bool
InitialFlags	imgui/imgui_internal.h	/^    ImDrawListFlags InitialFlags;               \/\/ Initial flags at the beginning of the frame/;"	m	struct:ImDrawListSharedData	typeref:typename:ImDrawListFlags
InitialTextA	imgui/imgui_internal.h	/^    ImVector<char>          InitialTextA;           \/\/ backup of end-user buffer at the time o/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
Initialize	imgui/imgui.cpp	/^void ImGui::Initialize(ImGuiContext* context)$/;"	f	class:ImGui	typeref:typename:void
Initialized	imgui/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext	typeref:typename:bool
InnerClipRect	imgui/imgui_internal.h	/^    ImRect                  InnerClipRect;                      \/\/ == InnerRect shrunk by Wind/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerDir	imgui/imgui.cpp	/^            ImVec2 InnerDir;$/;"	m	struct:ImGui::RenderWindowOuterBorders::ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
InnerDir	imgui/imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
InnerRect	imgui/imgui_internal.h	/^    ImRect                  InnerRect;                          \/\/ Inner rectangle (omit title/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InputBuf	imgui/imgui.h	/^    char                    InputBuf[256];$/;"	m	struct:ImGuiTextFilter	typeref:typename:char[256]
InputBuf	imgui/imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	typeref:typename:char[256]	file:
InputDouble	imgui/imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char*/;"	f	class:ImGui	typeref:typename:bool
InputFloat	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* for/;"	f	class:ImGui	typeref:typename:bool
InputFloat	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, int decimal_pre/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], int decimal_precision, ImGuiInputTextFlag/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], int decimal_precision, ImGuiInputTextFlag/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	imgui/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], int decimal_precision, ImGuiInputTextFlag/;"	f	class:ImGui	typeref:typename:bool
InputInt	imgui/imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags fla/;"	f	class:ImGui	typeref:typename:bool
InputInt2	imgui/imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt3	imgui/imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt4	imgui/imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputLayout	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10InputLayout*          InputLayout;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10InputLayout *	file:
InputLayout	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11InputLayout*          InputLayout;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11InputLayout *	file:
InputQueueCharacters	imgui/imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;     \/\/ Queue of _characters_ input (obtained by pl/;"	m	struct:ImGuiIO	typeref:typename:ImVector<ImWchar>
InputScalar	imgui/imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_/;"	f	class:ImGui	typeref:typename:bool
InputScalarN	imgui/imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int component/;"	f	class:ImGui	typeref:typename:bool
InputText	imgui/imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, /;"	f	class:ImGui	typeref:typename:bool
InputText	imgui/misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputText(const char* label, std::string* str, ImGuiInputTextFlags flags, ImGuiInput/;"	f	class:ImGui	typeref:typename:bool
InputTextCalcTextLenAndLineCount	imgui/imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	typeref:typename:int	file:
InputTextCalcTextSizeW	imgui/imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(const ImWchar* text_begin, const ImWchar* text_end, const I/;"	f	typeref:typename:ImVec2	file:
InputTextCallback	imgui/misc/cpp/imgui_stdlib.cpp	/^static int InputTextCallback(ImGuiInputTextCallbackData* data)$/;"	f	typeref:typename:int	file:
InputTextCallback_UserData	imgui/misc/cpp/imgui_stdlib.cpp	/^struct InputTextCallback_UserData$/;"	s	file:
InputTextEx	imgui/imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVe/;"	f	class:ImGui	typeref:typename:bool
InputTextFilterCharacter	imgui/imgui_widgets.cpp	/^static bool InputTextFilterCharacter(unsigned int* p_char, ImGuiInputTextFlags flags, ImGuiInput/;"	f	typeref:typename:bool	file:
InputTextMultiline	imgui/imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size/;"	f	class:ImGui	typeref:typename:bool
InputTextMultiline	imgui/misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputTextMultiline(const char* label, std::string* str, const ImVec2& size, ImGuiInp/;"	f	class:ImGui	typeref:typename:bool
InputTextPasswordFont	imgui/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext	typeref:typename:ImFont
InputTextState	imgui/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextState
InputTextWithHint	imgui/imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, I/;"	f	class:ImGui	typeref:typename:bool
InputTextWithHint	imgui/misc/cpp/imgui_stdlib.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, std::string* str, ImGuiInputT/;"	f	class:ImGui	typeref:typename:bool
InsertChars	imgui/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
Instance	imgui/examples/imgui_impl_vulkan.h	/^    VkInstance          Instance;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkInstance
Integration	imgui/docs/README.md	/^### Integration$/;"	S
Introduction	imgui/examples/example_apple_metal/README.md	/^## Introduction$/;"	s
InvisibleButton	imgui/imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
IsActive	imgui/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:bool
IsActiveIdUsingKey	imgui/imgui_internal.h	/^    inline bool             IsActiveIdUsingKey(ImGuiKey key)                            { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsActiveIdUsingNavDir	imgui/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavDir(ImGuiDir dir)                         { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsActiveIdUsingNavInput	imgui/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavInput(ImGuiNavInput input)                { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsAnyItemActive	imgui/imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemFocused	imgui/imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemHovered	imgui/imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyMouseDown	imgui/imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyWindowFocused	imgui/imgui.h	/^    static inline bool  IsAnyWindowFocused()                  { return IsWindowFocused(ImGuiFocu/;"	f	namespace:ImGui	typeref:typename:bool
IsAnyWindowHovered	imgui/imgui.h	/^    static inline bool  IsAnyWindowHovered()                  { return IsWindowHovered(ImGuiHove/;"	f	namespace:ImGui	typeref:typename:bool
IsBeingResized	imgui/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiColumns	typeref:typename:bool
IsBuilt	imgui/imgui.h	/^    bool                        IsBuilt() const             { return Fonts.Size > 0 && (TexPixel/;"	f	struct:ImFontAtlas	typeref:typename:bool
IsClippedEx	imgui/imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id, bool clip_even_when_logged)$/;"	f	class:ImGui	typeref:typename:bool
IsDataType	imgui/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataTy/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDelivery	imgui/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDragDropPayloadBeingAccepted	imgui/imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui	typeref:typename:bool
IsFallbackWindow	imgui/imgui_internal.h	/^    bool                    IsFallbackWindow;                   \/\/ Set on the "Debug##Default"/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFirstFrame	imgui/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiColumns	typeref:typename:bool
IsInverted	imgui/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect	typeref:typename:bool
IsItemActivated	imgui/imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemActive	imgui/imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsItemClicked	imgui/imgui.cpp	/^bool ImGui::IsItemClicked(ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivated	imgui/imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivatedAfterChange	imgui/imgui.h	/^    static inline bool  IsItemDeactivatedAfterChange()        { return IsItemDeactivatedAfterEdi/;"	f	namespace:ImGui	typeref:typename:bool
IsItemDeactivatedAfterEdit	imgui/imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui	typeref:typename:bool
IsItemEdited	imgui/imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui	typeref:typename:bool
IsItemFocused	imgui/imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsItemHovered	imgui/imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledOpen	imgui/imgui.cpp	/^bool ImGui::IsItemToggledOpen()$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledSelection	imgui/imgui.cpp	/^bool ImGui::IsItemToggledSelection()$/;"	f	class:ImGui	typeref:typename:bool
IsItemVisible	imgui/imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	imgui/imgui.cpp	/^bool ImGui::IsKeyDown(int user_key_index)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	imgui/imgui.cpp	/^bool ImGui::IsKeyPressed(int user_key_index, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressedMap	imgui/imgui_internal.h	/^    inline bool             IsKeyPressedMap(ImGuiKey key, bool repeat = true)           { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsKeyReleased	imgui/imgui.cpp	/^bool ImGui::IsKeyReleased(int user_key_index)$/;"	f	class:ImGui	typeref:typename:bool
IsLoaded	imgui/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != N/;"	f	struct:ImFont	typeref:typename:bool
IsMouseClicked	imgui/imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	imgui/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	imgui/imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragPastThreshold	imgui/imgui.cpp	/^bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragging	imgui/imgui.cpp	/^bool ImGui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseHoveringRect	imgui/imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui	typeref:typename:bool
IsMousePosValid	imgui/imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	imgui/imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsNavInputDown	imgui/imgui_internal.h	/^    inline bool             IsNavInputDown(ImGuiNavInput n)                             { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsNavInputTest	imgui/imgui_internal.h	/^    inline bool             IsNavInputTest(ImGuiNavInput n, ImGuiInputReadMode rm)      { return/;"	f	namespace:ImGui	typeref:typename:bool
IsPacked	imgui/imgui.h	/^    bool IsPacked() const           { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlasCustomRect	typeref:typename:bool
IsPopupOpen	imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
IsPopupOpen	imgui/imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id)$/;"	f	class:ImGui	typeref:typename:bool
IsPreview	imgui/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsRectVisible	imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui	typeref:typename:bool
IsRectVisible	imgui/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowActiveAndVisible	imgui/imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	typeref:typename:bool	file:
IsWindowAppearing	imgui/imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowChildOf	imgui/imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowCollapsed	imgui/imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowContentHoverable	imgui/imgui.cpp	/^static inline bool IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	typeref:typename:bool	file:
IsWindowFocused	imgui/imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowHovered	imgui/imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowNavFocusable	imgui/imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
ItemAdd	imgui/imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg)$/;"	f	class:ImGui	typeref:typename:bool
ItemFlags	imgui/imgui_internal.h	/^    ImGuiItemFlags          ItemFlags;              \/\/ == ItemFlagsStack.back() [empty == ImGu/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiItemFlags
ItemFlagsStack	imgui/imgui_internal.h	/^    ImVector<ImGuiItemFlags>ItemFlagsStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiItemFlags>
ItemGetter	imgui/imgui_demo.cpp	/^        struct FuncHolder { static bool ItemGetter(void* data, int idx, const char** out_str) { /;"	f	struct:ShowDemoWindowWidgets::FuncHolder	typeref:typename:bool	file:
ItemHoverable	imgui/imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
ItemInnerSpacing	imgui/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSize	imgui/imgui.cpp	/^void ImGui::ItemSize(const ImRect& bb, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSize	imgui/imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSpacing	imgui/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemWidth	imgui/imgui_internal.h	/^    float                   ItemWidth;              \/\/ == ItemWidthStack.back(). 0.0: default,/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
ItemWidthDefault	imgui/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow	typeref:typename:float
ItemWidthStack	imgui/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
Items	imgui/imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
ItemsCount	imgui/imgui.h	/^    int     ItemsCount;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
ItemsHeight	imgui/imgui.h	/^    float   ItemsHeight;$/;"	m	struct:ImGuiListClipper	typeref:typename:float
Items_ArrayGetter	imgui/imgui_widgets.cpp	/^static bool Items_ArrayGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
Items_SingleStringGetter	imgui/imgui_widgets.cpp	/^static bool Items_SingleStringGetter(void* data, int idx, const char** out_text)$/;"	f	typeref:typename:bool	file:
KeepAliveID	imgui/imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
KeyAlt	imgui/imgui.h	/^    bool        KeyAlt;                         \/\/ Keyboard modifier pressed: Alt$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyCtrl	imgui/imgui.h	/^    bool        KeyCtrl;                        \/\/ Keyboard modifier pressed: Control$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyMap	imgui/imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];         \/\/ <unset>          \/\/ Map of indices into t/;"	m	struct:ImGuiIO	typeref:typename:int[]
KeyRepeatDelay	imgui/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.250f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyRepeatRate	imgui/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyShift	imgui/imgui.h	/^    bool        KeyShift;                       \/\/ Keyboard modifier pressed: Shift$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeySuper	imgui/imgui.h	/^    bool        KeySuper;                       \/\/ Keyboard modifier pressed: Cmd\/Super\/Wind/;"	m	struct:ImGuiIO	typeref:typename:bool
KeysDown	imgui/imgui.h	/^    bool        KeysDown[512];                  \/\/ Keyboard keys that are pressed (ideally lef/;"	m	struct:ImGuiIO	typeref:typename:bool[512]
KeysDownDuration	imgui/imgui.h	/^    float       KeysDownDuration[512];          \/\/ Duration the keyboard key has been down (0./;"	m	struct:ImGuiIO	typeref:typename:float[512]
KeysDownDurationPrev	imgui/imgui.h	/^    float       KeysDownDurationPrev[512];      \/\/ Previous duration the key has been down$/;"	m	struct:ImGuiIO	typeref:typename:float[512]
Known issues	imgui/misc/freetype/README.md	/^### Known issues$/;"	S
LIBRARIES	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^set(LIBRARIES "glfw;${VULKAN_LIBRARY}")$/;"	v
LIBS	imgui/examples/example_glfw_metal/Makefile	/^LIBS = -framework Metal -framework MetalKit -framework Cocoa -framework IOKit -framework CoreVid/;"	m
LIBS	imgui/examples/example_glfw_opengl2/Makefile	/^LIBS =$/;"	m
LIBS	imgui/examples/example_glfw_opengl3/Makefile	/^LIBS =$/;"	m
LIBS	imgui/examples/example_glut_opengl2/Makefile	/^LIBS =$/;"	m
LIBS	imgui/examples/example_null/Makefile	/^LIBS =$/;"	m
LIBS	imgui/examples/example_sdl_directx11/build_win32.bat	/^set LIBS=\/libpath:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib \/LIBPATH:"%DXSDK_DIR%\/Lib\/x86" /;"	v
LIBS	imgui/examples/example_sdl_opengl2/Makefile	/^LIBS =$/;"	m
LIBS	imgui/examples/example_sdl_opengl2/build_win32.bat	/^set LIBS=\/libpath:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib opengl32.lib$/;"	v
LIBS	imgui/examples/example_sdl_opengl3/Makefile	/^LIBS =$/;"	m
LIBS	imgui/examples/example_sdl_opengl3/build_win32.bat	/^set LIBS=\/libpath:%SDL2_DIR%\\lib\\x86 SDL2.lib SDL2main.lib opengl32.lib$/;"	v
LIBS	makefile	/^LIBS = -lsqlite3$/;"	m
LSMinimumSystemVersion	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>LSMinimumSystemVersion<\/key>$/;"	k
LSRequiresIPhoneOS	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>LSRequiresIPhoneOS<\/key>$/;"	k
LabelText	imgui/imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LabelTextV	imgui/imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LastActiveId	imgui/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
LastActiveIdTimer	imgui/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:float
LastFrameActive	imgui/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameSelected	imgui/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of /;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrameVisible	imgui/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem	typeref:typename:int
LastItemDisplayRect	imgui/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;    \/\/ End-user display rect for last item (on/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImRect
LastItemDisplayRect	imgui/imgui_internal.h	/^    ImRect                  LastItemDisplayRect;$/;"	m	struct:ImGuiItemHoveredDataBackup	typeref:typename:ImRect
LastItemId	imgui/imgui_internal.h	/^    ImGuiID                 LastItemId;             \/\/ ID for last item$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiID
LastItemId	imgui/imgui_internal.h	/^    ImGuiID                 LastItemId;$/;"	m	struct:ImGuiItemHoveredDataBackup	typeref:typename:ImGuiID
LastItemRect	imgui/imgui_internal.h	/^    ImRect                  LastItemRect;           \/\/ Interaction rect for last item$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImRect
LastItemRect	imgui/imgui_internal.h	/^    ImRect                  LastItemRect;$/;"	m	struct:ImGuiItemHoveredDataBackup	typeref:typename:ImRect
LastItemStatusFlags	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;    \/\/ Status flags for last item (see ImGuiIt/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiItemStatusFlags
LastItemStatusFlags	imgui/imgui_internal.h	/^    ImGuiItemStatusFlags    LastItemStatusFlags;$/;"	m	struct:ImGuiItemHoveredDataBackup	typeref:typename:ImGuiItemStatusFlags
LastTabContentHeight	imgui/imgui_internal.h	/^    float               LastTabContentHeight;   \/\/ Record the height of contents submitted bel/;"	m	struct:ImGuiTabBar	typeref:typename:float
LastTabItemIdx	imgui/imgui_internal.h	/^    short               LastTabItemIdx;         \/\/ For BeginTabItem()\/EndTabItem()$/;"	m	struct:ImGuiTabBar	typeref:typename:short
LastTimeActive	imgui/imgui_internal.h	/^    float                   LastTimeActive;                     \/\/ Last timestamp the window w/;"	m	struct:ImGuiWindow	typeref:typename:float
LastValidMousePos	imgui/imgui_internal.h	/^    ImVec2                  LastValidMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
Layers	imgui/imgui_internal.h	/^    ImVector<ImDrawList*>   Layers[2];           \/\/ Global layers for: regular, tooltip$/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * >[2]
LayoutType	imgui/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
Libs required to build	notes.md	/^## Libs required to build$/;"	s
License	imgui/docs/README.md	/^License$/;"	s
LightHinting	imgui/misc/freetype/imgui_freetype.h	/^        LightHinting    = 1 << 3,   \/\/ A lighter hinting algorithm for gray-level modes. Many /;"	e	enum:ImGuiFreeType::RasterizerFlags
LineGap	imgui/misc/freetype/imgui_freetype.cpp	/^        float       LineGap;            \/\/ The spacing in pixels between one row's descent and/;"	m	struct:__anon76bbacac0111::FontInfo	typeref:typename:float	file:
LineMaxY	imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumns	typeref:typename:float
LineMinY	imgui/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiColumns	typeref:typename:float
LineOffsets	imgui/imgui_demo.cpp	/^    ImVector<int>       LineOffsets;        \/\/ Index to lines offset. We maintain this with Ad/;"	m	struct:ExampleAppLog	typeref:typename:ImVector<int>	file:
LineSpacing	imgui/misc/freetype/imgui_freetype.cpp	/^        float       LineSpacing;        \/\/ The baseline-to-baseline distance. Note that it usu/;"	m	struct:__anon76bbacac0111::FontInfo	typeref:typename:float	file:
ListBox	imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*items_getter)(void*, int, const/;"	f	class:ImGui	typeref:typename:bool
ListBox	imgui/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_c/;"	f	class:ImGui	typeref:typename:bool
ListBoxFooter	imgui/imgui_widgets.cpp	/^void ImGui::ListBoxFooter()$/;"	f	class:ImGui	typeref:typename:void
ListBoxHeader	imgui/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ListBoxHeader	imgui/imgui_widgets.cpp	/^bool ImGui::ListBoxHeader(const char* label, int items_count, int height_in_items)$/;"	f	class:ImGui	typeref:typename:bool
LoadFlags	imgui/misc/freetype/imgui_freetype.cpp	/^        FT_Int32        LoadFlags;$/;"	m	struct:__anon76bbacac0111::FreeTypeFont	typeref:typename:FT_Int32	file:
LoadGlyph	imgui/misc/freetype/imgui_freetype.cpp	/^    const FT_Glyph_Metrics* FreeTypeFont::LoadGlyph(uint32_t codepoint)$/;"	f	class:__anon76bbacac0111::FreeTypeFont	typeref:typename:const FT_Glyph_Metrics *
LoadIniSettingsFromDisk	imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
LoadIniSettingsFromMemory	imgui/imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui	typeref:typename:void
LoadShaders	gl_util.cpp	/^GLuint LoadShaders(const char * vertex_file_path,const char * fragment_file_path){$/;"	f	typeref:typename:GLuint
Locked	imgui/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() s/;"	m	struct:ImFontAtlas	typeref:typename:bool
LogBegin	imgui/imgui.cpp	/^void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogBuffer	imgui/imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when lo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
LogButtons	imgui/imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui	typeref:typename:void
LogDepthRef	imgui/imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpand	imgui/imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpandDefault	imgui/imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for L/;"	m	struct:ImGuiContext	typeref:typename:int
LogEnabled	imgui/imgui_internal.h	/^    bool                    LogEnabled;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogFile	imgui/imgui_internal.h	/^    ImFileHandle            LogFile;                            \/\/ If != NULL log to stdout\/ /;"	m	struct:ImGuiContext	typeref:typename:ImFileHandle
LogFilename	imgui/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (de/;"	m	struct:ImGuiIO	typeref:typename:const char *
LogFinish	imgui/imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui	typeref:typename:void
LogLineFirstItem	imgui/imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogLinePosY	imgui/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext	typeref:typename:float
LogRenderedText	imgui/imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
LogText	imgui/imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LogToBuffer	imgui/imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToClipboard	imgui/imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToFile	imgui/imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui	typeref:typename:void
LogToTTY	imgui/imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogType	imgui/imgui_internal.h	/^    ImGuiLogType            LogType;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiLogType
LowerBound	imgui/imgui.cpp	/^static ImGuiStorage::ImGuiStoragePair* LowerBound(ImVector<ImGuiStorage::ImGuiStoragePair>& data/;"	f	typeref:typename:ImGuiStorage::ImGuiStoragePair *	file:
MAP_ANALOG	imgui/examples/imgui_impl_glfw.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_ANALOG	imgui/examples/imgui_impl_sdl.cpp	/^    #define MAP_ANALOG(/;"	d	file:
MAP_ANALOG	imgui/examples/imgui_impl_win32.cpp	/^        #define MAP_ANALOG(/;"	d	file:
MAP_BUTTON	imgui/examples/imgui_impl_glfw.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MAP_BUTTON	imgui/examples/imgui_impl_sdl.cpp	/^    #define MAP_BUTTON(/;"	d	file:
MAP_BUTTON	imgui/examples/imgui_impl_win32.cpp	/^        #define MAP_BUTTON(/;"	d	file:
MSAASamples	imgui/examples/imgui_impl_vulkan.h	/^    VkSampleCountFlagBits        MSAASamples;   \/\/ >= VK_SAMPLE_COUNT_1_BIT$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkSampleCountFlagBits
MSYS2	notes.md	/^### MSYS2$/;"	S
MTLDevice	imgui/examples/imgui_impl_metal.h	/^@protocol MTLDevice, MTLCommandBuffer, MTLRenderCommandEncoder;$/;"	P	category:id	category:IMGUI_IMPL_API	category:MTLRenderPassDescriptor	category:ImDrawData	category:id	category:IMGUI_IMPL_API	category:id
MTLRenderPassDescriptor	imgui/examples/imgui_impl_metal.h	/^IMGUI_IMPL_API void ImGui_ImplMetal_NewFrame(MTLRenderPassDescriptor *renderPassDescriptor);$/;"	C	protocol:MTLDevice
MallocWrapper	imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void *	file:
MallocWrapper	imgui/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return mal/;"	f	typeref:typename:void *	file:
Map	imgui/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool	typeref:typename:ImGuiStorage
MarkIniSettingsDirty	imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui	typeref:typename:void
MarkIniSettingsDirty	imgui/imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
MarkItemEdited	imgui/imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Max	imgui/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect	typeref:typename:ImVec2
MaxAdvanceWidth	imgui/misc/freetype/imgui_freetype.cpp	/^        float       MaxAdvanceWidth;    \/\/ This field gives the maximum horizontal cursor adva/;"	m	struct:__anon76bbacac0111::FontInfo	typeref:typename:float	file:
MemAlloc	imgui/imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui	typeref:typename:void *
MemFree	imgui/imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui	typeref:typename:void
MemoryCompacted	imgui/imgui_internal.h	/^    bool                    MemoryCompacted;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
MemoryDrawListIdxCapacity	imgui/imgui_internal.h	/^    int                     MemoryDrawListIdxCapacity;$/;"	m	struct:ImGuiWindow	typeref:typename:int
MemoryDrawListVtxCapacity	imgui/imgui_internal.h	/^    int                     MemoryDrawListVtxCapacity;$/;"	m	struct:ImGuiWindow	typeref:typename:int
MenuBarAppending	imgui/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
MenuBarHeight	imgui/imgui_internal.h	/^    float       MenuBarHeight() const       { ImGuiContext& g = *GImGui; return (Flags & ImGuiWi/;"	f	struct:ImGuiWindow	typeref:typename:float
MenuBarOffset	imgui/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
MenuBarOffsetMinVal	imgui/imgui_internal.h	/^    ImVec2                      MenuBarOffsetMinVal;    \/\/ *Always on* This is not exposed pub/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
MenuBarRect	imgui/imgui_internal.h	/^    ImRect      MenuBarRect() const         { float y1 = Pos.y + TitleBarHeight(); return ImRect/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
MenuColumns	imgui/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;            \/\/ Simplified columns storage for menu ite/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiMenuColumns
MenuItem	imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItem	imgui/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
Merge	imgui/imgui_draw.cpp	/^void ImDrawListSplitter::Merge(ImDrawList* draw_list)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
MergeMode	imgui/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so yo/;"	m	struct:ImFontConfig	typeref:typename:bool
MetalBuffer	imgui/examples/imgui_impl_metal.mm	/^@implementation MetalBuffer$/;"	I
MetalBuffer	imgui/examples/imgui_impl_metal.mm	/^@interface MetalBuffer : NSObject$/;"	i
MetalContext	imgui/examples/imgui_impl_metal.mm	/^@implementation MetalContext$/;"	I
MetalContext	imgui/examples/imgui_impl_metal.mm	/^@interface MetalContext : NSObject$/;"	i
MetricsActiveAllocations	imgui/imgui.h	/^    int         MetricsActiveAllocations;       \/\/ Number of active allocations, updated by Me/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsActiveWindows	imgui/imgui.h	/^    int         MetricsActiveWindows;           \/\/ Number of active windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsHelpMarker	imgui/imgui.cpp	/^static void MetricsHelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
MetricsRenderIndices	imgui/imgui.h	/^    int         MetricsRenderIndices;           \/\/ Indices output during last call to Render()/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderVertices	imgui/imgui.h	/^    int         MetricsRenderVertices;          \/\/ Vertices output during last call to Render(/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderWindows	imgui/imgui.h	/^    int         MetricsRenderWindows;           \/\/ Number of visible windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsTotalSurface	imgui/imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Tot/;"	m	struct:ImFont	typeref:typename:int
Min	imgui/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect	typeref:typename:ImVec2
MinImageCount	imgui/examples/imgui_impl_vulkan.h	/^    uint32_t            MinImageCount;          \/\/ >= 2$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
Mode	imgui/imgui_demo.cpp	/^            enum Mode$/;"	g	function:ShowDemoWindowWidgets	file:
Mode_Copy	imgui/imgui_demo.cpp	/^                Mode_Copy,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Move	imgui/imgui_demo.cpp	/^                Mode_Move,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Swap	imgui/imgui_demo.cpp	/^                Mode_Swap$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
MonoHinting	imgui/misc/freetype/imgui_freetype.h	/^        MonoHinting     = 1 << 4,   \/\/ Strong hinting algorithm that should only be used for m/;"	e	enum:ImGuiFreeType::RasterizerFlags
Monochrome	imgui/misc/freetype/imgui_freetype.h	/^        Monochrome      = 1 << 7    \/\/ Disable anti-aliasing. Combine this with MonoHinting fo/;"	e	enum:ImGuiFreeType::RasterizerFlags
MouseClicked	imgui/imgui.h	/^    bool        MouseClicked[5];                \/\/ Mouse button went from !Down to Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseClickedPos	imgui/imgui.h	/^    ImVec2      MouseClickedPos[5];             \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseClickedTime	imgui/imgui.h	/^    double      MouseClickedTime[5];            \/\/ Time of last click (used to figure out doub/;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseCursor	imgui/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseCursor
MouseCursorScale	imgui/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.M/;"	m	struct:ImGuiStyle	typeref:typename:float
MouseDelta	imgui/imgui.h	/^    ImVec2      MouseDelta;                     \/\/ Mouse delta. Note that this is zero if eith/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseDoubleClickMaxDist	imgui/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClickTime	imgui/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-cli/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClicked	imgui/imgui.h	/^    bool        MouseDoubleClicked[5];          \/\/ Has mouse button been double-clicked?$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDown	imgui/imgui.h	/^    bool        MouseDown[5];                   \/\/ Mouse buttons: 0=left, 1=right, 2=middle + /;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownDuration	imgui/imgui.h	/^    float       MouseDownDuration[5];           \/\/ Duration the mouse button has been down (0./;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownDurationPrev	imgui/imgui.h	/^    float       MouseDownDurationPrev[5];       \/\/ Previous time the mouse button has been dow/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownOwned	imgui/imgui.h	/^    bool        MouseDownOwned[5];              \/\/ Track if button was clicked inside a dear i/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownWasDoubleClick	imgui/imgui.h	/^    bool        MouseDownWasDoubleClick[5];     \/\/ Track if button down was a double-click$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDragMaxDistanceAbs	imgui/imgui.h	/^    ImVec2      MouseDragMaxDistanceAbs[5];     \/\/ Maximum distance, absolute, on each axis, o/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseDragMaxDistanceSqr	imgui/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];     \/\/ Squared maximum distance of how much mouse /;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDragThreshold	imgui/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold be/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDrawCursor	imgui/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw/;"	m	struct:ImGuiIO	typeref:typename:bool
MousePos	imgui/imgui.h	/^    ImVec2      MousePos;                       \/\/ Mouse position, in pixels. Set to ImVec2(-F/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MousePosPrev	imgui/imgui.h	/^    ImVec2      MousePosPrev;                   \/\/ Previous mouse position (note that MouseDel/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseReleased	imgui/imgui.h	/^    bool        MouseReleased[5];               \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseWheel	imgui/imgui.h	/^    float       MouseWheel;                     \/\/ Mouse wheel Vertical: 1 unit scrolls about /;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheelH	imgui/imgui.h	/^    float       MouseWheelH;                    \/\/ Mouse wheel Horizontal. Most users don't ha/;"	m	struct:ImGuiIO	typeref:typename:float
MoveId	imgui/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
MovingWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
MyDocument	imgui/imgui_demo.cpp	/^    MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f,1.0f,1.0f,1/;"	f	struct:MyDocument	file:
MyDocument	imgui/imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
MyInputTextMultiline	imgui/imgui_demo.cpp	/^                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, cons/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
MyResizeCallback	imgui/imgui_demo.cpp	/^                static int MyResizeCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
NAV_MAP_KEY	imgui/imgui.cpp	/^        #define NAV_MAP_KEY(/;"	d	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	imgui/imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the hig/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	imgui/imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the win/;"	v	typeref:typename:const float	file:
NSCursor	imgui/examples/imgui_impl_osx.mm	/^@interface NSCursor()$/;"	i	category:id
NSHumanReadableCopyright	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>NSHumanReadableCopyright<\/key>$/;"	k
NSMainStoryboardFile	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>NSMainStoryboardFile<\/key>$/;"	k
NSPrincipalClass	imgui/examples/example_apple_metal/macOS/Info-macOS.plist	/^	<key>NSPrincipalClass<\/key>$/;"	k
NUM_BACK_BUFFERS	imgui/examples/example_win32_directx12/main.cpp	/^static int const                    NUM_BACK_BUFFERS = 3;$/;"	v	typeref:typename:int const	file:
NUM_FRAMES_IN_FLIGHT	imgui/examples/example_win32_directx12/main.cpp	/^static int const                    NUM_FRAMES_IN_FLIGHT = 3;$/;"	v	typeref:typename:int const	file:
Name	imgui/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig	typeref:typename:char[40]
Name	imgui/imgui_demo.cpp	/^    const char* Name;           \/\/ Document title$/;"	m	struct:MyDocument	typeref:typename:const char *	file:
Name	imgui/imgui_internal.h	/^    char*                   Name;                               \/\/ Window name, owned by the w/;"	m	struct:ImGuiWindow	typeref:typename:char *
NameBufLen	imgui/imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name/;"	m	struct:ImGuiWindow	typeref:typename:int
NameOffset	imgui/imgui_internal.h	/^    int                 NameOffset;             \/\/ When Window==NULL, offset to name within pa/;"	m	struct:ImGuiTabItem	typeref:typename:int
NavActivateDownId	imgui/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsNavInputDown(ImGuiNavI/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateId	imgui/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && IsN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivatePressedId	imgui/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsNavInputPressed(ImGuiN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActive	imgui/imgui.h	/^    bool        NavActive;                      \/\/ Directional navigation is currently allowed/;"	m	struct:ImGuiIO	typeref:typename:bool
NavAnyRequest	imgui/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavIni/;"	m	struct:ImGuiContext	typeref:typename:bool
NavCalcPreferredRefPos	imgui/imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui	typeref:typename:ImVec2	file:
NavClampRectToVisibleAreaForMoveDir	imgui/imgui.cpp	/^static void inline NavClampRectToVisibleAreaForMoveDir(ImGuiDir move_dir, ImRect& r, const ImRec/;"	f	typeref:typename:void	file:
NavDisableHighlight	imgui/imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mous/;"	m	struct:ImGuiContext	typeref:typename:bool
NavDisableMouseHover	imgui/imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using game/;"	m	struct:ImGuiContext	typeref:typename:bool
NavFocusScopeId	imgui/imgui_internal.h	/^    ImGuiID                 NavFocusScopeId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavFocusScopeIdCurrent	imgui/imgui_internal.h	/^    ImGuiID                 NavFocusScopeIdCurrent; \/\/ Current focus scope ID while appending$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiID
NavHasScroll	imgui/imgui_internal.h	/^    bool                    NavHasScroll;           \/\/ Set when scrolling can be used (ScrollM/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavHideHighlightOneFrame	imgui/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavId	imgui/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavIdIsAlive	imgui/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen th/;"	m	struct:ImGuiContext	typeref:typename:bool
NavIdTabCounter	imgui/imgui_internal.h	/^    int                     NavIdTabCounter;                    \/\/ == NavWindow->DC.FocusIdxTa/;"	m	struct:ImGuiContext	typeref:typename:int
NavInitRequest	imgui/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing /;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequestFromMove	imgui/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitResultId	imgui/imgui_internal.h	/^    ImGuiID                 NavInitResultId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavInitResultRectRel	imgui/imgui_internal.h	/^    ImRect                  NavInitResultRectRel;$/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavInitWindow	imgui/imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui	typeref:typename:void
NavInputId	imgui/imgui_internal.h	/^    ImGuiID                 NavInputId;                         \/\/ ~~ IsNavInputPressed(ImGuiN/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavInputSource	imgui/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? T/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
NavInputs	imgui/imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT]; \/\/ Gamepad inputs. Cleared back to zero by End/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavInputsDownDuration	imgui/imgui.h	/^    float       NavInputsDownDuration[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavInputsDownDurationPrev	imgui/imgui.h	/^    float       NavInputsDownDurationPrev[ImGuiNavInput_COUNT];$/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavJustMovedToFocusScopeId	imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToFocusScopeId;         \/\/ Just navigated to this focu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToId	imgui/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustTabbedId	imgui/imgui_internal.h	/^    ImGuiID                 NavJustTabbedId;                    \/\/ Just tabbed to this id.$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavLastChildNavWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar,/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
NavLastIds	imgui/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this w/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID[]
NavLayer	imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Layer we are navigating on./;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavLayer
NavLayerActiveMask	imgui/imgui_internal.h	/^    int                     NavLayerActiveMask;     \/\/ Which layer have been written to (resul/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
NavLayerActiveMaskNext	imgui/imgui_internal.h	/^    int                     NavLayerActiveMaskNext; \/\/ Which layer have been written to (buffe/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
NavLayerCurrent	imgui/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiNavLayer
NavLayerCurrentMask	imgui/imgui_internal.h	/^    int                     NavLayerCurrentMask;    \/\/ = (1 << NavLayerCurrent) used by ItemAd/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
NavMousePosDirty	imgui/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mou/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveClipDir	imgui/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;                     \/\/ FIXME-NAV: Describe the pur/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDir	imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDirLast	imgui/imgui_internal.h	/^    ImGuiDir                NavMoveDir, NavMoveDirLast;         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveFromClampedRefRect	imgui/imgui_internal.h	/^    bool                    NavMoveFromClampedRefRect;          \/\/ Set by manual scrolling, if/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveRequest	imgui/imgui_internal.h	/^    bool                    NavMoveRequest;                     \/\/ Move request for this frame$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveRequestButNoResultYet	imgui/imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui	typeref:typename:bool
NavMoveRequestCancel	imgui/imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestFlags	imgui/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveRequestFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavMoveRequestForward	imgui/imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, const ImRect& bb_rel, Im/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestForward	imgui/imgui_internal.h	/^    ImGuiNavForward         NavMoveRequestForward;              \/\/ None \/ ForwardQueued \/ Fo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavForward
NavMoveRequestTryWrapping	imgui/imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags move_flags)$/;"	f	class:ImGui	typeref:typename:void
NavMoveResultLocal	imgui/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocal;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveResult
NavMoveResultLocalVisibleSet	imgui/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultLocalVisibleSet;       \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveResult
NavMoveResultOther	imgui/imgui_internal.h	/^    ImGuiNavMoveResult      NavMoveResultOther;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveResult
NavNextActivateId	imgui/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavProcessItem	imgui/imgui.cpp	/^static void ImGui::NavProcessItem(ImGuiWindow* window, const ImRect& nav_bb, const ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void	file:
NavRectRel	imgui/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in win/;"	m	struct:ImGuiWindow	typeref:typename:ImRect[]
NavRestoreLastChildNavWindow	imgui/imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
NavRestoreLayer	imgui/imgui.cpp	/^static void NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	typeref:typename:void	file:
NavSaveLastChildNavWindowIntoParent	imgui/imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)$/;"	f	class:ImGui	typeref:typename:void	file:
NavScoreItem	imgui/imgui.cpp	/^static bool ImGui::NavScoreItem(ImGuiNavMoveResult* result, ImRect cand)$/;"	f	class:ImGui	typeref:typename:bool	file:
NavScoreItemDistInterval	imgui/imgui.cpp	/^static float inline NavScoreItemDistInterval(float a0, float a1, float b0, float b1)$/;"	f	typeref:typename:float	file:
NavScoringCount	imgui/imgui_internal.h	/^    int                     NavScoringCount;                    \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext	typeref:typename:int
NavScoringRectScreen	imgui/imgui_internal.h	/^    ImRect                  NavScoringRectScreen;               \/\/ Rectangle used for scoring,/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavUpdate	imgui/imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateAnyRequestFlag	imgui/imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateMoveResult	imgui/imgui.cpp	/^static void ImGui::NavUpdateMoveResult()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdatePageUpPageDown	imgui/imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown()$/;"	f	class:ImGui	typeref:typename:float	file:
NavUpdateWindowing	imgui/imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateWindowingHighlightWindow	imgui/imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	typeref:typename:void	file:
NavUpdateWindowingOverlay	imgui/imgui.cpp	/^void ImGui::NavUpdateWindowingOverlay()$/;"	f	class:ImGui	typeref:typename:void
NavVisible	imgui/imgui.h	/^    bool        NavVisible;                     \/\/ Directional navigation is visible and allow/;"	m	struct:ImGuiIO	typeref:typename:bool
NavWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigati/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingHighlightAlpha	imgui/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingList	imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingList;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTarget	imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ When selecting a window (ho/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTargetAnim	imgui/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTimer	imgui/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingToggleLayer	imgui/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NewFrame	imgui/imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui	typeref:typename:void
NewFrameSanityChecks	imgui/imgui.cpp	/^static void NewFrameSanityChecks()$/;"	f	typeref:typename:void	file:
NewLine	imgui/imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui	typeref:typename:void
NextColumn	imgui/imgui_widgets.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui	typeref:typename:void
NextItemData	imgui/imgui_internal.h	/^    ImGuiNextItemData       NextItemData;                       \/\/ Storage for SetNextItem** f/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextItemData
NextSelectedTabId	imgui/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
NextWidth	imgui/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float
NextWidths	imgui/imgui_internal.h	/^    float       Pos[3], NextWidths[3];$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float[3][3]
NextWindowData	imgui/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow**/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextWindowData
NoAutoHint	imgui/misc/freetype/imgui_freetype.h	/^        NoAutoHint      = 1 << 1,   \/\/ Disable auto-hinter.$/;"	e	enum:ImGuiFreeType::RasterizerFlags
NoHinting	imgui/misc/freetype/imgui_freetype.h	/^        NoHinting       = 1 << 0,   \/\/ Disable hinting. This generally generates 'blurrier' bi/;"	e	enum:ImGuiFreeType::RasterizerFlags
NodeColumns	imgui/imgui.cpp	/^        static void NodeColumns(const ImGuiColumns* columns)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NodeDrawList	imgui/imgui.cpp	/^        static void NodeDrawList(ImGuiWindow* window, ImDrawList* draw_list, const char* label)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NodeStorage	imgui/imgui.cpp	/^        static void NodeStorage(ImGuiStorage* storage, const char* label)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NodeTabBar	imgui/imgui.cpp	/^        static void NodeTabBar(ImGuiTabBar* tab_bar)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NodeWindow	imgui/imgui.cpp	/^        static void NodeWindow(ImGuiWindow* window, const char* label)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NodeWindows	imgui/imgui.cpp	/^        static void NodeWindows(ImVector<ImGuiWindow*>& windows, const char* label)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:void	file:
NotifyOfDocumentsClosedElsewhere	imgui/imgui_demo.cpp	/^static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)$/;"	f	typeref:typename:void	file:
OBJS	imgui/examples/example_emscripten/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui/examples/example_glfw_metal/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui/examples/example_glfw_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui/examples/example_glfw_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui/examples/example_glut_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui/examples/example_null/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui/examples/example_sdl_opengl2/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	imgui/examples/example_sdl_opengl3/Makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OBJS	makefile	/^OBJS = $(addsuffix .o, $(basename $(notdir $(SOURCES))))$/;"	m
OPEN_FAILURE	sqlite_routines.h	/^  OPEN_FAILURE,$/;"	e	enum:__anoned97ed650103
OUT_DIR	imgui/examples/example_sdl_directx11/build_win32.bat	/^set OUT_DIR=Debug$/;"	v
OUT_DIR	imgui/examples/example_sdl_opengl2/build_win32.bat	/^set OUT_DIR=Debug$/;"	v
OUT_DIR	imgui/examples/example_sdl_opengl3/build_win32.bat	/^set OUT_DIR=Debug$/;"	v
OUT_EXE	imgui/examples/example_sdl_directx11/build_win32.bat	/^set OUT_EXE=example_sdl_directx11$/;"	v
OUT_EXE	imgui/examples/example_sdl_opengl2/build_win32.bat	/^set OUT_EXE=example_sdl_opengl2$/;"	v
OUT_EXE	imgui/examples/example_sdl_opengl3/build_win32.bat	/^set OUT_EXE=example_sdl_opengl3$/;"	v
Oblique	imgui/misc/freetype/imgui_freetype.h	/^        Oblique         = 1 << 6,   \/\/ Styling: Should we slant the font, emulating italic sty/;"	e	enum:ImGuiFreeType::RasterizerFlags
OffMaxX	imgui/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiColumns	typeref:typename:float
OffMinX	imgui/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiColumns	typeref:typename:float
Offset	imgui/imgui.cpp	/^    ImU32           Offset;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImU32	file:
Offset	imgui/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem	typeref:typename:float
OffsetMax	imgui/imgui_internal.h	/^    float               OffsetMax;              \/\/ Distance from BarRect.Min.x, locked during /;"	m	struct:ImGuiTabBar	typeref:typename:float
OffsetMaxIdeal	imgui/imgui_internal.h	/^    float               OffsetMaxIdeal;         \/\/ Ideal offset if all tabs were visible and n/;"	m	struct:ImGuiTabBar	typeref:typename:float
OffsetNextTab	imgui/imgui_internal.h	/^    float               OffsetNextTab;          \/\/ Distance from BarRect.Min.x, incremented wi/;"	m	struct:ImGuiTabBar	typeref:typename:float
OffsetNorm	imgui/imgui_internal.h	/^    float               OffsetNorm;         \/\/ Column start offset, normalized 0.0 (far left) /;"	m	struct:ImGuiColumnData	typeref:typename:float
OffsetNormBeforeResize	imgui/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiColumnData	typeref:typename:float
OffsetX	imgui/misc/freetype/imgui_freetype.cpp	/^        FT_Int      OffsetX;            \/\/ The distance from the origin ("pen position") to th/;"	m	struct:__anon76bbacac0111::GlyphInfo	typeref:typename:FT_Int	file:
OffsetY	imgui/misc/freetype/imgui_freetype.cpp	/^        FT_Int      OffsetY;            \/\/ The distance from the origin to the top of the glyp/;"	m	struct:__anon76bbacac0111::GlyphInfo	typeref:typename:FT_Int	file:
On Ubuntu 14.04+ and macOS	imgui/examples/example_allegro5/README.md	/^### On Ubuntu 14.04+ and macOS$/;"	S
On Windows with Visual Studio's CLI	imgui/examples/example_allegro5/README.md	/^### On Windows with Visual Studio's CLI$/;"	S
OnKeyPressed	imgui/imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
Open	imgui/imgui_demo.cpp	/^    bool        Open;           \/\/ Set when the document is open (in this demo, we keep an arr/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenCond	imgui/imgui_internal.h	/^    ImGuiCond                   OpenCond;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiCond
OpenFrameCount	imgui/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:int
OpenMousePos	imgui/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the t/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenParentId	imgui/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate m/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
OpenPopup	imgui/imgui.cpp	/^void ImGui::OpenPopup(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupEx	imgui/imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupOnItemClick	imgui/imgui.cpp	/^bool ImGui::OpenPopupOnItemClick(const char* str_id, ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
OpenPopupPos	imgui/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typic/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenPopupStack	imgui/imgui_internal.h	/^    ImVector<ImGuiPopupData>OpenPopupStack;                     \/\/ Which popups are open (pers/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
OpenPrev	imgui/imgui_demo.cpp	/^    bool        OpenPrev;       \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenVal	imgui/imgui_internal.h	/^    bool                        OpenVal;        \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:bool
OuterAngle	imgui/imgui.cpp	/^            float  OuterAngle;$/;"	m	struct:ImGui::RenderWindowOuterBorders::ImGuiResizeBorderDef	typeref:typename:float	file:
OuterRectClipped	imgui/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ == Window->Rect() just afte/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
Overlaps	imgui/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min./;"	f	struct:ImRect	typeref:typename:bool
OversampleH	imgui/imgui.h	/^    int             OversampleH;            \/\/ 3        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
OversampleV	imgui/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
PFNGLACTIVESHADERPROGRAMPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint pipeline,GLuint program)
PFNGLACTIVETEXTUREPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture)
PFNGLATTACHSHADERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLBEGINCONDITIONALRENDERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum mode)
PFNGLBEGINQUERYINDEXEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLuint id)
PFNGLBEGINQUERYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint id)
PFNGLBEGINTRANSFORMFEEDBACKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum primitiveMode)
PFNGLBINDATTRIBLOCATIONPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint index,const GLchar * name)
PFNGLBINDBUFFERBASEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLuint buffer)
PFNGLBINDBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint buffer)
PFNGLBINDBUFFERRANGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLuint buffer,GLintptr offset,GLsizeiptr size)
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumbe/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint colorNumber,GLuint index,const GLchar * name)
PFNGLBINDFRAGDATALOCATIONPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLch/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint color,const GLchar * name)
PFNGLBINDFRAMEBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint framebuffer)
PFNGLBINDIMAGETEXTUREPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint unit,GLuint texture,GLint level,GLboolean layered,GLint layer,GLenum access,GLenum format)
PFNGLBINDPROGRAMPIPELINEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint pipeline)
PFNGLBINDRENDERBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint renderbuffer)
PFNGLBINDSAMPLERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint unit,GLuint sampler)
PFNGLBINDTEXTUREPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint texture)
PFNGLBINDTRANSFORMFEEDBACKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint id)
PFNGLBINDVERTEXARRAYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint array)
PFNGLBINDVERTEXBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr/;"	t	typeref:typename:void (APIENTRYP)(GLuint bindingindex,GLuint buffer,GLintptr offset,GLsizei stride)
PFNGLBLENDCOLORPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat /;"	t	typeref:typename:void (APIENTRYP)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
PFNGLBLENDEQUATIONIARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint buf,GLenum mode)
PFNGLBLENDEQUATIONIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint buf,GLenum mode)
PFNGLBLENDEQUATIONPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLBLENDEQUATIONSEPARATEIARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum /;"	t	typeref:typename:void (APIENTRYP)(GLuint buf,GLenum modeRGB,GLenum modeAlpha)
PFNGLBLENDEQUATIONSEPARATEIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum mod/;"	t	typeref:typename:void (APIENTRYP)(GLuint buf,GLenum modeRGB,GLenum modeAlpha)
PFNGLBLENDEQUATIONSEPARATEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum modeRGB,GLenum modeAlpha)
PFNGLBLENDFUNCIARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint buf,GLenum src,GLenum dst)
PFNGLBLENDFUNCIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint buf,GLenum src,GLenum dst)
PFNGLBLENDFUNCPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCPROC) (GLenum sfactor, GLenum dfactor);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum sfactor,GLenum dfactor)
PFNGLBLENDFUNCSEPARATEIARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRG/;"	t	typeref:typename:void (APIENTRYP)(GLuint buf,GLenum srcRGB,GLenum dstRGB,GLenum srcAlpha,GLenum dstAlpha)
PFNGLBLENDFUNCSEPARATEIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, /;"	t	typeref:typename:void (APIENTRYP)(GLuint buf,GLenum srcRGB,GLenum dstRGB,GLenum srcAlpha,GLenum dstAlpha)
PFNGLBLENDFUNCSEPARATEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha)
PFNGLBLITFRAMEBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint /;"	t	typeref:typename:void (APIENTRYP)(GLint srcX0,GLint srcY0,GLint srcX1,GLint srcY1,GLint dstX0,GLint dstY0,GLint dstX1,GLint dstY1,GLbitfield mask,GLenum filter)
PFNGLBUFFERDATAPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid *data/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizeiptr size,const GLvoid * data,GLenum usage)
PFNGLBUFFERSUBDATAPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr size,const GLvoid * data)
PFNGLCHECKFRAMEBUFFERSTATUSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);$/;"	t	typeref:typename:GLenum (APIENTRYP)(GLenum target)
PFNGLCLAMPCOLORPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum clamp)
PFNGLCLEARBUFFERDATAPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum internalformat,GLenum format,GLenum type,const void * data)
PFNGLCLEARBUFFERFIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth,/;"	t	typeref:typename:void (APIENTRYP)(GLenum buffer,GLint drawbuffer,GLfloat depth,GLint stencil)
PFNGLCLEARBUFFERFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat /;"	t	typeref:typename:void (APIENTRYP)(GLenum buffer,GLint drawbuffer,const GLfloat * value)
PFNGLCLEARBUFFERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *v/;"	t	typeref:typename:void (APIENTRYP)(GLenum buffer,GLint drawbuffer,const GLint * value)
PFNGLCLEARBUFFERSUBDATAPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLin/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum internalformat,GLintptr offset,GLsizeiptr size,GLenum format,GLenum type,const void * data)
PFNGLCLEARBUFFERUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint /;"	t	typeref:typename:void (APIENTRYP)(GLenum buffer,GLint drawbuffer,const GLuint * value)
PFNGLCLEARCOLORPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat /;"	t	typeref:typename:void (APIENTRYP)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
PFNGLCLEARDEPTHFPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat d)
PFNGLCLEARDEPTHPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARDEPTHPROC) (GLdouble depth);$/;"	t	typeref:typename:void (APIENTRYP)(GLdouble depth)
PFNGLCLEARNAMEDBUFFERDATAEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat,/;"	t	typeref:typename:void (APIENTRYP)(GLuint buffer,GLenum internalformat,GLenum format,GLenum type,const void * data)
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalform/;"	t	typeref:typename:void (APIENTRYP)(GLuint buffer,GLenum internalformat,GLenum format,GLenum type,GLsizeiptr offset,GLsizeiptr size,const void * data)
PFNGLCLEARPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLbitfield mask)
PFNGLCLEARSTENCILPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCLEARSTENCILPROC) (GLint s);$/;"	t	typeref:typename:void (APIENTRYP)(GLint s)
PFNGLCLIENTWAITSYNCPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 time/;"	t	typeref:typename:GLenum (APIENTRYP)(GLsync sync,GLbitfield flags,GLuint64 timeout)
PFNGLCOLORMASKIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean /;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLboolean r,GLboolean g,GLboolean b,GLboolean a)
PFNGLCOLORMASKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORMASKPROC) (GLboolean red, GLboolean green, GLboolean blue, GLb/;"	t	typeref:typename:void (APIENTRYP)(GLboolean red,GLboolean green,GLboolean blue,GLboolean alpha)
PFNGLCOLORP3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint color)
PFNGLCOLORP3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * color)
PFNGLCOLORP4UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint color)
PFNGLCOLORP4UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * color)
PFNGLCOMPILESHADERINCLUDEARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const G/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei count,const GLchar ** path,const GLint * length)
PFNGLCOMPILESHADERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLCOMPRESSEDTEXIMAGE1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum inter/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLint border,GLsizei imageSize,const GLvoid * data)
PFNGLCOMPRESSEDTEXIMAGE2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum inter/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLint border,GLsizei imageSize,const GLvoid * data)
PFNGLCOMPRESSEDTEXIMAGE3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum inter/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLsizei imageSize,const GLvoid * data)
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xof/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLsizei imageSize,const GLvoid * data)
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xof/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLsizei imageSize,const GLvoid * data)
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xof/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLsizei imageSize,const GLvoid * data)
PFNGLCOPYBUFFERSUBDATAPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLin/;"	t	typeref:typename:void (APIENTRYP)(GLenum readTarget,GLenum writeTarget,GLintptr readOffset,GLintptr writeOffset,GLsizeiptr size)
PFNGLCOPYIMAGESUBDATAPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcL/;"	t	typeref:typename:void (APIENTRYP)(GLuint srcName,GLenum srcTarget,GLint srcLevel,GLint srcX,GLint srcY,GLint srcZ,GLuint dstName,GLenum dstTarget,GLint dstLevel,GLint dstX,GLint dstY,GLint dstZ,GLsizei srcWidth,GLsizei srcHeight,GLsizei srcDepth)
PFNGLCOPYTEXIMAGE1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalfor/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLint border)
PFNGLCOPYTEXIMAGE2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalfor/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum internalformat,GLint x,GLint y,GLsizei width,GLsizei height,GLint border)
PFNGLCOPYTEXSUBIMAGE1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint x,GLint y,GLsizei width)
PFNGLCOPYTEXSUBIMAGE2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLCOPYTEXSUBIMAGE3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLCREATEPROGRAMPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);$/;"	t	typeref:typename:GLuint (APIENTRYP)(void)
PFNGLCREATESHADERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);$/;"	t	typeref:typename:GLuint (APIENTRYP)(GLenum type)
PFNGLCREATESHADERPROGRAMVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLch/;"	t	typeref:typename:GLuint (APIENTRYP)(GLenum type,GLsizei count,const GLchar * const * strings)
PFNGLCREATESYNCFROMCLEVENTARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context * context, stru/;"	t	typeref:typename:GLsync (APIENTRYP)(struct _cl_context * context,struct _cl_event * event,GLbitfield flags)
PFNGLCULLFACEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLCULLFACEPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLDEBUGMESSAGECALLBACKARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const GLvoid/;"	t	typeref:typename:void (APIENTRYP)(GLDEBUGPROCARB callback,const GLvoid * userParam)
PFNGLDEBUGMESSAGECALLBACKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userPa/;"	t	typeref:typename:void (APIENTRYP)(GLDEBUGPROC callback,const void * userParam)
PFNGLDEBUGMESSAGECONTROLARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum sev/;"	t	typeref:typename:void (APIENTRYP)(GLenum source,GLenum type,GLenum severity,GLsizei count,const GLuint * ids,GLboolean enabled)
PFNGLDEBUGMESSAGECONTROLPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severi/;"	t	typeref:typename:void (APIENTRYP)(GLenum source,GLenum type,GLenum severity,GLsizei count,const GLuint * ids,GLboolean enabled)
PFNGLDEBUGMESSAGEINSERTARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, /;"	t	typeref:typename:void (APIENTRYP)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * buf)
PFNGLDEBUGMESSAGEINSERTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLe/;"	t	typeref:typename:void (APIENTRYP)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * buf)
PFNGLDELETEBUFFERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * buffers)
PFNGLDELETEFRAMEBUFFERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * framebuffers)
PFNGLDELETENAMEDSTRINGARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);$/;"	t	typeref:typename:void (APIENTRYP)(GLint namelen,const GLchar * name)
PFNGLDELETEPROGRAMPIPELINESPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * pipelines)
PFNGLDELETEPROGRAMPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLDELETEQUERIESPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * ids)
PFNGLDELETERENDERBUFFERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * renderbuffers)
PFNGLDELETESAMPLERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei count,const GLuint * samplers)
PFNGLDELETESHADERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLDELETESYNCPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);$/;"	t	typeref:typename:void (APIENTRYP)(GLsync sync)
PFNGLDELETETEXTURESPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * textures)
PFNGLDELETETRANSFORMFEEDBACKSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * ids)
PFNGLDELETEVERTEXARRAYSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * arrays)
PFNGLDEPTHFUNCPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHFUNCPROC) (GLenum func);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum func)
PFNGLDEPTHMASKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHMASKPROC) (GLboolean flag);$/;"	t	typeref:typename:void (APIENTRYP)(GLboolean flag)
PFNGLDEPTHRANGEARRAYVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble /;"	t	typeref:typename:void (APIENTRYP)(GLuint first,GLsizei count,const GLdouble * v)
PFNGLDEPTHRANGEFPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat n,GLfloat f)
PFNGLDEPTHRANGEINDEXEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble n,GLdouble f)
PFNGLDEPTHRANGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDEPTHRANGEPROC) (GLdouble near, GLdouble far);$/;"	t	typeref:typename:void (APIENTRYP)(GLdouble near,GLdouble far)
PFNGLDETACHSHADERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLDISABLEIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index)
PFNGLDISABLEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLDISABLEVERTEXATTRIBARRAYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLDISPATCHCOMPUTEINDIRECTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);$/;"	t	typeref:typename:void (APIENTRYP)(GLintptr indirect)
PFNGLDISPATCHCOMPUTEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLu/;"	t	typeref:typename:void (APIENTRYP)(GLuint num_groups_x,GLuint num_groups_y,GLuint num_groups_z)
PFNGLDRAWARRAYSINDIRECTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const GLvoid *indirect);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,const GLvoid * indirect)
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLint first,GLsizei count,GLsizei instancecount,GLuint baseinstance)
PFNGLDRAWARRAYSINSTANCEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, /;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLint first,GLsizei count,GLsizei instancecount)
PFNGLDRAWARRAYSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWARRAYSPROC) (GLenum mode, GLint first, GLsizei count);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLint first,GLsizei count)
PFNGLDRAWBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLDRAWBUFFERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLenum * bufs)
PFNGLDRAWELEMENTSBASEVERTEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum typ/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const GLvoid * indices,GLint basevertex)
PFNGLDRAWELEMENTSINDIRECTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const GLvoid */;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLenum type,const GLvoid * indirect)
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count,/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei instancecount,GLuint baseinstance)
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsi/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLsizei instancecount,GLint basevertex,GLuint baseinstance)
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const GLvoid * indices,GLsizei instancecount,GLint basevertex)
PFNGLDRAWELEMENTSINSTANCEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const GLvoid * indices,GLsizei instancecount)
PFNGLDRAWELEMENTSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const G/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const GLvoid * indices)
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const GLvoid * indices,GLint basevertex)
PFNGLDRAWRANGEELEMENTSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsi/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLuint start,GLuint end,GLsizei count,GLenum type,const GLvoid * indices)
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsize/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLuint id,GLsizei instancecount)
PFNGLDRAWTRANSFORMFEEDBACKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLuint id)
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, /;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLuint id,GLuint stream,GLsizei instancecount)
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint st/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLuint id,GLuint stream)
PFNGLENABLEIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index)
PFNGLENABLEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLENABLEVERTEXATTRIBARRAYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLENDCONDITIONALRENDERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLENDQUERYINDEXEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index)
PFNGLENDQUERYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target)
PFNGLENDTRANSFORMFEEDBACKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLFENCESYNCPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);$/;"	t	typeref:typename:GLsync (APIENTRYP)(GLenum condition,GLbitfield flags)
PFNGLFINISHPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFINISHPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLFLUSHMAPPEDBUFFERRANGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsize/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr length)
PFNGLFLUSHPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLFRAMEBUFFERPARAMETERIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint para/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint param)
PFNGLFRAMEBUFFERRENDERBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLe/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum renderbuffertarget,GLuint renderbuffer)
PFNGLFRAMEBUFFERTEXTURE1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level)
PFNGLFRAMEBUFFERTEXTURE2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level)
PFNGLFRAMEBUFFERTEXTURE3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum textarget,GLuint texture,GLint level,GLint zoffset)
PFNGLFRAMEBUFFERTEXTURELAYERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLu/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLuint texture,GLint level,GLint layer)
PFNGLFRAMEBUFFERTEXTUREPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint t/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLuint texture,GLint level)
PFNGLFRONTFACEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLFRONTFACEPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLGENBUFFERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * buffers)
PFNGLGENERATEMIPMAPPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target)
PFNGLGENFRAMEBUFFERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * framebuffers)
PFNGLGENPROGRAMPIPELINESPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * pipelines)
PFNGLGENQUERIESPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * ids)
PFNGLGENRENDERBUFFERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * renderbuffers)
PFNGLGENSAMPLERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei count,GLuint * samplers)
PFNGLGENTEXTURESPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * textures)
PFNGLGENTRANSFORMFEEDBACKSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * ids)
PFNGLGENVERTEXARRAYSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * arrays)
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferI/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint bufferIndex,GLenum pname,GLint * params)
PFNGLGETACTIVEATTRIBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLint * size,GLenum * type,GLchar * name)
PFNGLGETACTIVESUBROUTINENAMEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum shadertype,GLuint index,GLsizei bufsize,GLsizei * length,GLchar * name)
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertyp/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum shadertype,GLuint index,GLenum pname,GLint * values)
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadert/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum shadertype,GLuint index,GLsizei bufsize,GLsizei * length,GLchar * name)
PFNGLGETACTIVEUNIFORMBLOCKIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIn/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint uniformBlockIndex,GLenum pname,GLint * params)
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlock/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint uniformBlockIndex,GLsizei bufSize,GLsizei * length,GLchar * uniformBlockName)
PFNGLGETACTIVEUNIFORMNAMEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint uniformIndex,GLsizei bufSize,GLsizei * length,GLchar * uniformName)
PFNGLGETACTIVEUNIFORMPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSiz/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLint * size,GLenum * type,GLchar * name)
PFNGLGETACTIVEUNIFORMSIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, con/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei uniformCount,const GLuint * uniformIndices,GLenum pname,GLint * params)
PFNGLGETATTACHEDSHADERSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei maxCount,GLsizei * count,GLuint * obj)
PFNGLGETATTRIBLOCATIONPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETBOOLEANI_VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLboolean * data)
PFNGLGETBOOLEANVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANVPROC) (GLenum pname, GLboolean *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLboolean * params)
PFNGLGETBUFFERPARAMETERI64VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 */;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint64 * params)
PFNGLGETBUFFERPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *para/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETBUFFERPOINTERVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid* *param/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLvoid ** params)
PFNGLGETBUFFERSUBDATAPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr s/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr size,GLvoid * data)
PFNGLGETCOMPRESSEDTEXIMAGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLvoid * img)
PFNGLGETDEBUGMESSAGELOGARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufsize, GLenum/;"	t	typeref:typename:GLuint (APIENTRYP)(GLuint count,GLsizei bufsize,GLenum * sources,GLenum * types,GLuint * ids,GLenum * severities,GLsizei * lengths,GLchar * messageLog)
PFNGLGETDEBUGMESSAGELOGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufsize, GLenum *s/;"	t	typeref:typename:GLuint (APIENTRYP)(GLuint count,GLsizei bufsize,GLenum * sources,GLenum * types,GLuint * ids,GLenum * severities,GLsizei * lengths,GLchar * messageLog)
PFNGLGETDOUBLEI_VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLdouble * data)
PFNGLGETDOUBLEVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEVPROC) (GLenum pname, GLdouble *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLdouble * params)
PFNGLGETERRORPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);$/;"	t	typeref:typename:GLenum (APIENTRYP)(void)
PFNGLGETFLOATI_VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLfloat * data)
PFNGLGETFLOATVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFLOATVPROC) (GLenum pname, GLfloat *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLfloat * params)
PFNGLGETFRAGDATAINDEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETFRAGDATALOCATIONPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum att/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum attachment,GLenum pname,GLint * params)
PFNGLGETFRAMEBUFFERPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETGRAPHICSRESETSTATUSARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);$/;"	t	typeref:typename:GLenum (APIENTRYP)(void)
PFNGLGETINTEGER64I_VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint64 * data)
PFNGLGETINTEGER64VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint64 * params)
PFNGLGETINTEGERI_VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint * data)
PFNGLGETINTEGERVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint * params)
PFNGLGETINTERNALFORMATI64VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum internalformat,GLenum pname,GLsizei bufSize,GLint64 * params)
PFNGLGETINTERNALFORMATIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLe/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum internalformat,GLenum pname,GLsizei bufSize,GLint * params)
PFNGLGETMULTISAMPLEFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLfloat * val)
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum /;"	t	typeref:typename:void (APIENTRYP)(GLuint framebuffer,GLenum pname,GLint * params)
PFNGLGETNAMEDSTRINGARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei /;"	t	typeref:typename:void (APIENTRYP)(GLint namelen,const GLchar * name,GLsizei bufSize,GLint * stringlen,GLchar * string)
PFNGLGETNAMEDSTRINGIVARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum/;"	t	typeref:typename:void (APIENTRYP)(GLint namelen,const GLchar * name,GLenum pname,GLint * params)
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei b/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint lod,GLsizei bufSize,GLvoid * img)
PFNGLGETNTEXIMAGEARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GL/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum format,GLenum type,GLsizei bufSize,GLvoid * img)
PFNGLGETNUNIFORMDVARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufS/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei bufSize,GLdouble * params)
PFNGLGETNUNIFORMFVARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufS/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei bufSize,GLfloat * params)
PFNGLGETNUNIFORMIVARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufS/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei bufSize,GLint * params)
PFNGLGETNUNIFORMUIVARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei buf/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei bufSize,GLuint * params)
PFNGLGETOBJECTLABELPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSiz/;"	t	typeref:typename:void (APIENTRYP)(GLenum identifier,GLuint name,GLsizei bufSize,GLsizei * length,GLchar * label)
PFNGLGETOBJECTPTRLABELPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei */;"	t	typeref:typename:void (APIENTRYP)(const void * ptr,GLsizei bufSize,GLsizei * length,GLchar * label)
PFNGLGETPOINTERVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPOINTERVPROC) (GLenum pname, GLvoid* *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLvoid ** params)
PFNGLGETPROGRAMBINARYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *le/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei bufSize,GLsizei * length,GLenum * binaryFormat,GLvoid * binary)
PFNGLGETPROGRAMINFOLOGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *l/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETPROGRAMINTERFACEIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum programInterface,GLenum pname,GLint * params)
PFNGLGETPROGRAMIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum pname,GLint * params)
PFNGLGETPROGRAMPIPELINEINFOLOGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, G/;"	t	typeref:typename:void (APIENTRYP)(GLuint pipeline,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETPROGRAMPIPELINEIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *pa/;"	t	typeref:typename:void (APIENTRYP)(GLuint pipeline,GLenum pname,GLint * params)
PFNGLGETPROGRAMRESOURCEINDEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInter/;"	t	typeref:typename:GLuint (APIENTRYP)(GLuint program,GLenum programInterface,const GLchar * name)
PFNGLGETPROGRAMRESOURCEIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface,/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum programInterface,GLuint index,GLsizei propCount,const GLenum * props,GLsizei bufSize,GLsizei * length,GLint * params)
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum progr/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,GLenum programInterface,const GLchar * name)
PFNGLGETPROGRAMRESOURCELOCATIONPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInt/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,GLenum programInterface,const GLchar * name)
PFNGLGETPROGRAMRESOURCENAMEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterfac/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum programInterface,GLuint index,GLsizei bufSize,GLsizei * length,GLchar * name)
PFNGLGETPROGRAMSTAGEIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum p/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum shadertype,GLenum pname,GLint * values)
PFNGLGETQUERYINDEXEDIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLenum pname,GLint * params)
PFNGLGETQUERYIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETQUERYOBJECTI64VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum pname,GLint64 * params)
PFNGLGETQUERYOBJECTIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum pname,GLint * params)
PFNGLGETQUERYOBJECTUI64VPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum pname,GLuint64 * params)
PFNGLGETQUERYOBJECTUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum pname,GLuint * params)
PFNGLGETRENDERBUFFERPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETSAMPLERPARAMETERFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat */;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLfloat * params)
PFNGLGETSAMPLERPARAMETERIIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *p/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLint * params)
PFNGLGETSAMPLERPARAMETERIUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint /;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLuint * params)
PFNGLGETSAMPLERPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *pa/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLint * params)
PFNGLGETSHADERINFOLOGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *len/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETSHADERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLenum pname,GLint * params)
PFNGLGETSHADERPRECISIONFORMATPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiont/;"	t	typeref:typename:void (APIENTRYP)(GLenum shadertype,GLenum precisiontype,GLint * range,GLint * precision)
PFNGLGETSHADERSOURCEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *leng/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * source)
PFNGLGETSTRINGIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name,GLuint index)
PFNGLGETSTRINGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name)
PFNGLGETSUBROUTINEINDEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const/;"	t	typeref:typename:GLuint (APIENTRYP)(GLuint program,GLenum shadertype,const GLchar * name)
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shaderty/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,GLenum shadertype,const GLchar * name)
PFNGLGETSYNCIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei/;"	t	typeref:typename:void (APIENTRYP)(GLsync sync,GLenum pname,GLsizei bufSize,GLsizei * length,GLint * values)
PFNGLGETTEXIMAGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum format,GLenum type,GLvoid * pixels)
PFNGLGETTEXLEVELPARAMETERFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC) (GLenum target, GLint level, GLenum pna/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum pname,GLfloat * params)
PFNGLGETTEXLEVELPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC) (GLenum target, GLint level, GLenum pna/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLenum pname,GLint * params)
PFNGLGETTEXPARAMETERFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *param/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLfloat * params)
PFNGLGETTEXPARAMETERIIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETTEXPARAMETERIUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *para/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLuint * params)
PFNGLGETTEXPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTEXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint * params)
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint index,GLsizei bufSize,GLsizei * length,GLsizei * size,GLenum * type,GLchar * name)
PFNGLGETUNIFORMBLOCKINDEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformB/;"	t	typeref:typename:GLuint (APIENTRYP)(GLuint program,const GLchar * uniformBlockName)
PFNGLGETUNIFORMDVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLdouble * params)
PFNGLGETUNIFORMFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params)/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLfloat * params)
PFNGLGETUNIFORMINDICESPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei uniformCount,const GLchar * const * uniformNames,GLuint * uniformIndices)
PFNGLGETUNIFORMIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLint * params)
PFNGLGETUNIFORMLOCATIONPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETUNIFORMSUBROUTINEUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GL/;"	t	typeref:typename:void (APIENTRYP)(GLenum shadertype,GLint location,GLuint * params)
PFNGLGETUNIFORMUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params)/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLuint * params)
PFNGLGETVERTEXATTRIBDVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *param/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLdouble * params)
PFNGLGETVERTEXATTRIBFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLfloat * params)
PFNGLGETVERTEXATTRIBIIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params)/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLint * params)
PFNGLGETVERTEXATTRIBIUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *param/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLuint * params)
PFNGLGETVERTEXATTRIBIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLint * params)
PFNGLGETVERTEXATTRIBLDVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *para/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLdouble * params)
PFNGLGETVERTEXATTRIBPOINTERVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, GLvoid* */;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLvoid ** pointer)
PFNGLHINTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLHINTPROC) (GLenum target, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum mode)
PFNGLINVALIDATEBUFFERDATAPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint buffer)
PFNGLINVALIDATEBUFFERSUBDATAPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsiz/;"	t	typeref:typename:void (APIENTRYP)(GLuint buffer,GLintptr offset,GLsizeiptr length)
PFNGLINVALIDATEFRAMEBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei numAttachments,const GLenum * attachments)
PFNGLINVALIDATESUBFRAMEBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachment/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei numAttachments,const GLenum * attachments,GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLINVALIDATETEXIMAGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint texture,GLint level)
PFNGLINVALIDATETEXSUBIMAGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoff/;"	t	typeref:typename:void (APIENTRYP)(GLuint texture,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth)
PFNGLISBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint buffer)
PFNGLISENABLEDIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum target,GLuint index)
PFNGLISENABLEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum cap)
PFNGLISFRAMEBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint framebuffer)
PFNGLISNAMEDSTRINGARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLint namelen,const GLchar * name)
PFNGLISPROGRAMPIPELINEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint pipeline)
PFNGLISPROGRAMPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint program)
PFNGLISQUERYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint id)
PFNGLISRENDERBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint renderbuffer)
PFNGLISSAMPLERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint sampler)
PFNGLISSHADERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint shader)
PFNGLISSYNCPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLsync sync)
PFNGLISTEXTUREPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTEXTUREPROC) (GLuint texture);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint texture)
PFNGLISTRANSFORMFEEDBACKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint id)
PFNGLISVERTEXARRAYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint array)
PFNGLLINEWIDTHPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLLINEWIDTHPROC) (GLfloat width);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat width)
PFNGLLINKPROGRAMPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLLOGICOPPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLLOGICOPPROC) (GLenum opcode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum opcode)
PFNGLMAPBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);$/;"	t	typeref:typename:GLvoid * (APIENTRYP)(GLenum target,GLenum access)
PFNGLMAPBUFFERRANGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr /;"	t	typeref:typename:GLvoid * (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr length,GLbitfield access)
PFNGLMEMORYBARRIERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);$/;"	t	typeref:typename:void (APIENTRYP)(GLbitfield barriers)
PFNGLMINSAMPLESHADINGARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat value)
PFNGLMINSAMPLESHADINGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLfloat value);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat value)
PFNGLMULTIDRAWARRAYSINDIRECTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GL/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,const void * indirect,GLsizei drawcount,GLsizei stride)
PFNGLMULTIDRAWARRAYSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsize/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,const GLint * first,const GLsizei * count,GLsizei drawcount)
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,const GLsizei * count,GLenum type,const GLvoid * const * indices,GLsizei drawcount,const GLint * basevertex)
PFNGLMULTIDRAWELEMENTSINDIRECTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const voi/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLenum type,const void * indirect,GLsizei drawcount,GLsizei stride)
PFNGLMULTIDRAWELEMENTSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum t/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,const GLsizei * count,GLenum type,const GLvoid * const * indices,GLsizei drawcount)
PFNGLMULTITEXCOORDP1UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords)/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,GLuint coords)
PFNGLMULTITEXCOORDP1UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint /;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,const GLuint * coords)
PFNGLMULTITEXCOORDP2UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords)/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,GLuint coords)
PFNGLMULTITEXCOORDP2UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint /;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,const GLuint * coords)
PFNGLMULTITEXCOORDP3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords)/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,GLuint coords)
PFNGLMULTITEXCOORDP3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint /;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,const GLuint * coords)
PFNGLMULTITEXCOORDP4UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords)/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,GLuint coords)
PFNGLMULTITEXCOORDP4UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint /;"	t	typeref:typename:void (APIENTRYP)(GLenum texture,GLenum type,const GLuint * coords)
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pnam/;"	t	typeref:typename:void (APIENTRYP)(GLuint framebuffer,GLenum pname,GLint param)
PFNGLNAMEDSTRINGARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLint namelen,const GLchar * name,GLint stringlen,const GLchar * string)
PFNGLNORMALP3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLNORMALP3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLOBJECTLABELPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, c/;"	t	typeref:typename:void (APIENTRYP)(GLenum identifier,GLuint name,GLsizei length,const GLchar * label)
PFNGLOBJECTPTRLABELPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar /;"	t	typeref:typename:void (APIENTRYP)(const void * ptr,GLsizei length,const GLchar * label)
PFNGLPATCHPARAMETERFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,const GLfloat * values)
PFNGLPATCHPARAMETERIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint value)
PFNGLPAUSETRANSFORMFEEDBACKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLPIXELSTOREFPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREFPROC) (GLenum pname, GLfloat param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLfloat param)
PFNGLPIXELSTOREIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint param)
PFNGLPOINTPARAMETERFPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLfloat param)
PFNGLPOINTPARAMETERFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,const GLfloat * params)
PFNGLPOINTPARAMETERIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint param)
PFNGLPOINTPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,const GLint * params)
PFNGLPOINTSIZEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOINTSIZEPROC) (GLfloat size);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat size)
PFNGLPOLYGONMODEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum mode)
PFNGLPOLYGONOFFSETPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOLYGONOFFSETPROC) (GLfloat factor, GLfloat units);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat factor,GLfloat units)
PFNGLPOPDEBUGGROUPPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLPRIMITIVERESTARTINDEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLPROGRAMBINARYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const GLvo/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum binaryFormat,const GLvoid * binary,GLsizei length)
PFNGLPROGRAMPARAMETERIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum pname,GLint value)
PFNGLPROGRAMUNIFORM1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0)/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLdouble v0)
PFNGLPROGRAMUNIFORM1DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLdouble * value)
PFNGLPROGRAMUNIFORM1FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLfloat v0)
PFNGLPROGRAMUNIFORM1FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLfloat * value)
PFNGLPROGRAMUNIFORM1IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLint v0)
PFNGLPROGRAMUNIFORM1IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLint * value)
PFNGLPROGRAMUNIFORM1UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLuint v0)
PFNGLPROGRAMUNIFORM1UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei co/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLuint * value)
PFNGLPROGRAMUNIFORM2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0,/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLdouble v0,GLdouble v1)
PFNGLPROGRAMUNIFORM2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLdouble * value)
PFNGLPROGRAMUNIFORM2FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLfloat v0,GLfloat v1)
PFNGLPROGRAMUNIFORM2FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLfloat * value)
PFNGLPROGRAMUNIFORM2IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLint v0,GLint v1)
PFNGLPROGRAMUNIFORM2IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLint * value)
PFNGLPROGRAMUNIFORM2UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLuint v0,GLuint v1)
PFNGLPROGRAMUNIFORM2UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei co/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLuint * value)
PFNGLPROGRAMUNIFORM3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0,/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLdouble v0,GLdouble v1,GLdouble v2)
PFNGLPROGRAMUNIFORM3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLdouble * value)
PFNGLPROGRAMUNIFORM3FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLfloat v0,GLfloat v1,GLfloat v2)
PFNGLPROGRAMUNIFORM3FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLfloat * value)
PFNGLPROGRAMUNIFORM3IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLint v0,GLint v1,GLint v2)
PFNGLPROGRAMUNIFORM3IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLint * value)
PFNGLPROGRAMUNIFORM3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLuint v0,GLuint v1,GLuint v2)
PFNGLPROGRAMUNIFORM3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei co/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLuint * value)
PFNGLPROGRAMUNIFORM4DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0,/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLdouble v0,GLdouble v1,GLdouble v2,GLdouble v3)
PFNGLPROGRAMUNIFORM4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLdouble * value)
PFNGLPROGRAMUNIFORM4FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLfloat v0,GLfloat v1,GLfloat v2,GLfloat v3)
PFNGLPROGRAMUNIFORM4FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLfloat * value)
PFNGLPROGRAMUNIFORM4IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLint v0,GLint v1,GLint v2,GLint v3)
PFNGLPROGRAMUNIFORM4IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei cou/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLint * value)
PFNGLPROGRAMUNIFORM4UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, /;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLuint v0,GLuint v1,GLuint v2,GLuint v3)
PFNGLPROGRAMUNIFORM4UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei co/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,const GLuint * value)
PFNGLPROGRAMUNIFORMMATRIX2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsiz/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLPROGRAMUNIFORMMATRIX2FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsiz/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLPROGRAMUNIFORMMATRIX3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsiz/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLPROGRAMUNIFORMMATRIX3FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsiz/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLPROGRAMUNIFORMMATRIX4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsiz/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLPROGRAMUNIFORMMATRIX4FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsiz/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLPROVOKINGVERTEXPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLPUSHDEBUGGROUPPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, cons/;"	t	typeref:typename:void (APIENTRYP)(GLenum source,GLuint id,GLsizei length,const GLchar * message)
PFNGLQUERYCOUNTERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint id,GLenum target)
PFNGLREADBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLREADBUFFERPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLREADNPIXELSARBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei heigh/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLsizei bufSize,GLvoid * data)
PFNGLREADPIXELSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, G/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,GLvoid * pixels)
PFNGLRELEASESHADERCOMPILERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height)
PFNGLRENDERBUFFERSTORAGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLs/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum internalformat,GLsizei width,GLsizei height)
PFNGLRESUMETRANSFORMFEEDBACKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLSAMPLECOVERAGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert);$/;"	t	typeref:typename:void (APIENTRYP)(GLfloat value,GLboolean invert)
PFNGLSAMPLEMASKIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLbitfield mask)
PFNGLSAMPLERPARAMETERFPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLfloat param)
PFNGLSAMPLERPARAMETERFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloa/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,const GLfloat * param)
PFNGLSAMPLERPARAMETERIIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,const GLint * param)
PFNGLSAMPLERPARAMETERIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,GLint param)
PFNGLSAMPLERPARAMETERIUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLui/;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,const GLuint * param)
PFNGLSAMPLERPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint /;"	t	typeref:typename:void (APIENTRYP)(GLuint sampler,GLenum pname,const GLint * param)
PFNGLSCISSORARRAYVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint first,GLsizei count,const GLint * v)
PFNGLSCISSORINDEXEDPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsize/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint left,GLint bottom,GLsizei width,GLsizei height)
PFNGLSCISSORINDEXEDVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLSCISSORPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLSECONDARYCOLORP3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint color)
PFNGLSECONDARYCOLORP3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * color)
PFNGLSHADERBINARYPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum bin/;"	t	typeref:typename:void (APIENTRYP)(GLsizei count,const GLuint * shaders,GLenum binaryformat,const GLvoid * binary,GLsizei length)
PFNGLSHADERSOURCEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar* cons/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei count,const GLchar * const * string,const GLint * length)
PFNGLSHADERSTORAGEBLOCKBINDINGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlock/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint storageBlockIndex,GLuint storageBlockBinding)
PFNGLSTENCILFUNCPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCPROC) (GLenum func, GLint ref, GLuint mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum func,GLint ref,GLuint mask)
PFNGLSTENCILFUNCSEPARATEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLui/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum func,GLint ref,GLuint mask)
PFNGLSTENCILMASKPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKPROC) (GLuint mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint mask)
PFNGLSTENCILMASKSEPARATEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLuint mask)
PFNGLSTENCILOPPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILOPPROC) (GLenum fail, GLenum zfail, GLenum zpass);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum fail,GLenum zfail,GLenum zpass)
PFNGLSTENCILOPSEPARATEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, G/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum sfail,GLenum dpfail,GLenum dppass)
PFNGLTEXBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum internalformat,GLuint buffer)
PFNGLTEXBUFFERRANGEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint b/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum internalformat,GLuint buffer,GLintptr offset,GLsizeiptr size)
PFNGLTEXCOORDP1UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLTEXCOORDP1UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLTEXCOORDP2UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLTEXCOORDP2UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLTEXCOORDP3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLTEXCOORDP3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLTEXCOORDP4UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint coords)
PFNGLTEXCOORDP4UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * coords)
PFNGLTEXIMAGE1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE1DPROC) (GLenum target, GLint level, GLint internalformat, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLint border,GLenum format,GLenum type,const GLvoid * pixels)
PFNGLTEXIMAGE2DMULTISAMPLEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint i/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei samples,GLint internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations)
PFNGLTEXIMAGE2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const GLvoid * pixels)
PFNGLTEXIMAGE3DMULTISAMPLEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint i/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei samples,GLint internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations)
PFNGLTEXIMAGE3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLsizei depth,GLint border,GLenum format,GLenum type,const GLvoid * pixels)
PFNGLTEXPARAMETERFPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLfloat param)
PFNGLTEXPARAMETERFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *pa/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,const GLfloat * params)
PFNGLTEXPARAMETERIIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *par/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,const GLint * params)
PFNGLTEXPARAMETERIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint param)
PFNGLTEXPARAMETERIUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *p/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,const GLuint * params)
PFNGLTEXPARAMETERIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *para/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,const GLint * params)
PFNGLTEXSTORAGE1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalfo/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei levels,GLenum internalformat,GLsizei width)
PFNGLTEXSTORAGE2DMULTISAMPLEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations)
PFNGLTEXSTORAGE2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalfo/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height)
PFNGLTEXSTORAGE3DMULTISAMPLEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations)
PFNGLTEXSTORAGE3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalfo/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth)
PFNGLTEXSUBIMAGE1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsi/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLsizei width,GLenum format,GLenum type,const GLvoid * pixels)
PFNGLTEXSUBIMAGE2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLin/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLsizei width,GLsizei height,GLenum format,GLenum type,const GLvoid * pixels)
PFNGLTEXSUBIMAGE3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLin/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint xoffset,GLint yoffset,GLint zoffset,GLsizei width,GLsizei height,GLsizei depth,GLenum format,GLenum type,const GLvoid * pixels)
PFNGLTEXTUREBUFFERRANGEEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum i/;"	t	typeref:typename:void (APIENTRYP)(GLuint texture,GLenum target,GLenum internalformat,GLuint buffer,GLintptr offset,GLsizeiptr size)
PFNGLTEXTURESTORAGE1DEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei le/;"	t	typeref:typename:void (APIENTRYP)(GLuint texture,GLenum target,GLsizei levels,GLenum internalformat,GLsizei width)
PFNGLTEXTURESTORAGE2DEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei le/;"	t	typeref:typename:void (APIENTRYP)(GLuint texture,GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height)
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target,/;"	t	typeref:typename:void (APIENTRYP)(GLuint texture,GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLboolean fixedsamplelocations)
PFNGLTEXTURESTORAGE3DEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei le/;"	t	typeref:typename:void (APIENTRYP)(GLuint texture,GLenum target,GLsizei levels,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth)
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target,/;"	t	typeref:typename:void (APIENTRYP)(GLuint texture,GLenum target,GLsizei samples,GLenum internalformat,GLsizei width,GLsizei height,GLsizei depth,GLboolean fixedsamplelocations)
PFNGLTEXTUREVIEWPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture/;"	t	typeref:typename:void (APIENTRYP)(GLuint texture,GLenum target,GLuint origtexture,GLenum internalformat,GLuint minlevel,GLuint numlevels,GLuint minlayer,GLuint numlayers)
PFNGLTRANSFORMFEEDBACKVARYINGSPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, cons/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei count,const GLchar * const * varyings,GLenum bufferMode)
PFNGLUNIFORM1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLdouble x)
PFNGLUNIFORM1DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *val/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLdouble * value)
PFNGLUNIFORM1FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLfloat v0)
PFNGLUNIFORM1FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *valu/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLfloat * value)
PFNGLUNIFORM1IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0)
PFNGLUNIFORM1IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value)/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLint * value)
PFNGLUNIFORM1UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLuint v0)
PFNGLUNIFORM1UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *valu/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLuint * value)
PFNGLUNIFORM2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLdouble x,GLdouble y)
PFNGLUNIFORM2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *val/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLdouble * value)
PFNGLUNIFORM2FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLfloat v0,GLfloat v1)
PFNGLUNIFORM2FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *valu/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLfloat * value)
PFNGLUNIFORM2IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0,GLint v1)
PFNGLUNIFORM2IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value)/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLint * value)
PFNGLUNIFORM2UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLuint v0,GLuint v1)
PFNGLUNIFORM2UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *valu/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLuint * value)
PFNGLUNIFORM3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z)/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLdouble x,GLdouble y,GLdouble z)
PFNGLUNIFORM3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *val/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLdouble * value)
PFNGLUNIFORM3FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLfloat v0,GLfloat v1,GLfloat v2)
PFNGLUNIFORM3FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *valu/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLfloat * value)
PFNGLUNIFORM3IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0,GLint v1,GLint v2)
PFNGLUNIFORM3IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value)/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLint * value)
PFNGLUNIFORM3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLuint v0,GLuint v1,GLuint v2)
PFNGLUNIFORM3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *valu/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLuint * value)
PFNGLUNIFORM4DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z,/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLdouble x,GLdouble y,GLdouble z,GLdouble w)
PFNGLUNIFORM4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *val/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLdouble * value)
PFNGLUNIFORM4FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2,/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLfloat v0,GLfloat v1,GLfloat v2,GLfloat v3)
PFNGLUNIFORM4FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *valu/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLfloat * value)
PFNGLUNIFORM4IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0,GLint v1,GLint v2,GLint v3)
PFNGLUNIFORM4IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value)/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLint * value)
PFNGLUNIFORM4UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, G/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLuint v0,GLuint v1,GLuint v2,GLuint v3)
PFNGLUNIFORM4UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *valu/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,const GLuint * value)
PFNGLUNIFORMBLOCKBINDINGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex,/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint uniformBlockIndex,GLuint uniformBlockBinding)
PFNGLUNIFORMMATRIX2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLUNIFORMMATRIX2FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX2X3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLUNIFORMMATRIX2X3FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX2X4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLUNIFORMMATRIX2X4FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLUNIFORMMATRIX3FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX3X2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLUNIFORMMATRIX3X2FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX3X4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLUNIFORMMATRIX3X4FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLUNIFORMMATRIX4FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX4X2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLUNIFORMMATRIX4X2FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMMATRIX4X3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLdouble * value)
PFNGLUNIFORMMATRIX4X3FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean t/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUNIFORMSUBROUTINESUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const/;"	t	typeref:typename:void (APIENTRYP)(GLenum shadertype,GLsizei count,const GLuint * indices)
PFNGLUNMAPBUFFERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum target)
PFNGLUSEPROGRAMPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLUSEPROGRAMSTAGESPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint p/;"	t	typeref:typename:void (APIENTRYP)(GLuint pipeline,GLbitfield stages,GLuint program)
PFNGLVALIDATEPROGRAMPIPELINEPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint pipeline)
PFNGLVALIDATEPROGRAMPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingin/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint bindingindex,GLuint buffer,GLintptr offset,GLsizei stride)
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attrib/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint attribindex,GLuint bindingindex)
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribi/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLboolean normalized,GLuint relativeoffset)
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attrib/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attrib/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindi/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint bindingindex,GLuint divisor)
PFNGLVERTEXATTRIB1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x)
PFNGLVERTEXATTRIB1DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIB1FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLfloat x)
PFNGLVERTEXATTRIB1FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLfloat * v)
PFNGLVERTEXATTRIB1SPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLshort x)
PFNGLVERTEXATTRIB1SVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x,GLdouble y)
PFNGLVERTEXATTRIB2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIB2FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLfloat x,GLfloat y)
PFNGLVERTEXATTRIB2FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLfloat * v)
PFNGLVERTEXATTRIB2SPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLshort x,GLshort y)
PFNGLVERTEXATTRIB2SVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x,GLdouble y,GLdouble z)
PFNGLVERTEXATTRIB3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIB3FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLfloat x,GLfloat y,GLfloat z)
PFNGLVERTEXATTRIB3FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLfloat * v)
PFNGLVERTEXATTRIB3SPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z)/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLshort x,GLshort y,GLshort z)
PFNGLVERTEXATTRIB3SVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB4BVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLbyte * v)
PFNGLVERTEXATTRIB4DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)
PFNGLVERTEXATTRIB4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIB4FPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z,/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLfloat x,GLfloat y,GLfloat z,GLfloat w)
PFNGLVERTEXATTRIB4FVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLfloat * v)
PFNGLVERTEXATTRIB4IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIB4NBVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLbyte * v)
PFNGLVERTEXATTRIB4NIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIB4NSVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB4NUBPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte /;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLubyte x,GLubyte y,GLubyte z,GLubyte w)
PFNGLVERTEXATTRIB4NUBVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLubyte * v)
PFNGLVERTEXATTRIB4NUIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIB4NUSVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLushort * v)
PFNGLVERTEXATTRIB4SPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z,/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLshort x,GLshort y,GLshort z,GLshort w)
PFNGLVERTEXATTRIB4SVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIB4UBVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLubyte * v)
PFNGLVERTEXATTRIB4UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIB4USVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLushort * v)
PFNGLVERTEXATTRIBBINDINGPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint attribindex,GLuint bindingindex)
PFNGLVERTEXATTRIBDIVISORPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint divisor)
PFNGLVERTEXATTRIBFORMATPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum typ/;"	t	typeref:typename:void (APIENTRYP)(GLuint attribindex,GLint size,GLenum type,GLboolean normalized,GLuint relativeoffset)
PFNGLVERTEXATTRIBI1IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint x)
PFNGLVERTEXATTRIBI1IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIBI1UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint x)
PFNGLVERTEXATTRIBI1UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIBI2IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint x,GLint y)
PFNGLVERTEXATTRIBI2IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIBI2UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint x,GLuint y)
PFNGLVERTEXATTRIBI2UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIBI3IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint x,GLint y,GLint z)
PFNGLVERTEXATTRIBI3IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIBI3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint x,GLuint y,GLuint z)
PFNGLVERTEXATTRIBI3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIBI4BVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLbyte * v)
PFNGLVERTEXATTRIBI4IPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLin/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint x,GLint y,GLint z,GLint w)
PFNGLVERTEXATTRIBI4IVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLint * v)
PFNGLVERTEXATTRIBI4SVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLshort * v)
PFNGLVERTEXATTRIBI4UBVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLubyte * v)
PFNGLVERTEXATTRIBI4UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, /;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLuint x,GLuint y,GLuint z,GLuint w)
PFNGLVERTEXATTRIBI4UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLuint * v)
PFNGLVERTEXATTRIBI4USVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLushort * v)
PFNGLVERTEXATTRIBIFORMATPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum ty/;"	t	typeref:typename:void (APIENTRYP)(GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)
PFNGLVERTEXATTRIBIPOINTERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, G/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint size,GLenum type,GLsizei stride,const GLvoid * pointer)
PFNGLVERTEXATTRIBL1DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x)
PFNGLVERTEXATTRIBL1DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIBL2DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x,GLdouble y)
PFNGLVERTEXATTRIBL2DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIBL3DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdoubl/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x,GLdouble y,GLdouble z)
PFNGLVERTEXATTRIBL3DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIBL4DPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdoubl/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLdouble x,GLdouble y,GLdouble z,GLdouble w)
PFNGLVERTEXATTRIBL4DVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLdouble * v)
PFNGLVERTEXATTRIBLFORMATPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum ty/;"	t	typeref:typename:void (APIENTRYP)(GLuint attribindex,GLint size,GLenum type,GLuint relativeoffset)
PFNGLVERTEXATTRIBLPOINTERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, G/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint size,GLenum type,GLsizei stride,const GLvoid * pointer)
PFNGLVERTEXATTRIBP1UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normali/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,GLuint value)
PFNGLVERTEXATTRIBP1UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normal/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)
PFNGLVERTEXATTRIBP2UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normali/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,GLuint value)
PFNGLVERTEXATTRIBP2UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normal/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)
PFNGLVERTEXATTRIBP3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normali/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,GLuint value)
PFNGLVERTEXATTRIBP3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normal/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)
PFNGLVERTEXATTRIBP4UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normali/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,GLuint value)
PFNGLVERTEXATTRIBP4UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normal/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum type,GLboolean normalized,const GLuint * value)
PFNGLVERTEXATTRIBPOINTERPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,const GLvoid * pointer)
PFNGLVERTEXBINDINGDIVISORPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint bindingindex,GLuint divisor)
PFNGLVERTEXP2UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint value)
PFNGLVERTEXP2UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * value)
PFNGLVERTEXP3UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint value)
PFNGLVERTEXP3UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * value)
PFNGLVERTEXP4UIPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,GLuint value)
PFNGLVERTEXP4UIVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum type,const GLuint * value)
PFNGLVIEWPORTARRAYVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v)/;"	t	typeref:typename:void (APIENTRYP)(GLuint first,GLsizei count,const GLfloat * v)
PFNGLVIEWPORTINDEXEDFPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat /;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLfloat x,GLfloat y,GLfloat w,GLfloat h)
PFNGLVIEWPORTINDEXEDFVPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,const GLfloat * v)
PFNGLVIEWPORTPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLWAITSYNCPROC	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);$/;"	t	typeref:typename:void (APIENTRYP)(GLsync sync,GLbitfield flags,GLuint64 timeout)
PS	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10PixelShader*          PS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10PixelShader *	file:
PS	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11PixelShader*          PS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11PixelShader *	file:
PSInstances	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   \//;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ClassInstance * [256]	file:
PSInstancesCount	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
PSSampler	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10SamplerState*         PSSampler;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10SamplerState *	file:
PSSampler	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11SamplerState*         PSSampler;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11SamplerState *	file:
PSShaderResource	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10ShaderResourceView*   PSShaderResource;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10ShaderResourceView *	file:
PSShaderResource	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11ShaderResourceView*   PSShaderResource;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ShaderResourceView *	file:
PackRange	imgui/imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentiall/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_pack_range	file:
PackedChars	imgui/imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_packedchar *	file:
PairCompareByID	imgui/imgui.cpp	/^        static int IMGUI_CDECL PairCompareByID(const void* lhs, const void* rhs)$/;"	f	struct:ImGuiStorage::BuildSortByKey::StaticFunc	typeref:typename:int IMGUI_CDECL	file:
ParentLayoutType	imgui/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the tim/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
ParentWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popu/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
PassFilter	imgui/imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
PatchFormatStringFloatToInt	imgui/imgui_widgets.cpp	/^static const char* PatchFormatStringFloatToInt(const char* fmt)$/;"	f	typeref:typename:const char *	file:
PathArcTo	imgui/imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num/;"	f	class:ImDrawList	typeref:typename:void
PathArcToFast	imgui/imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCurveTo	imgui/imgui_draw.cpp	/^void ImDrawList::PathBezierCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num/;"	f	class:ImDrawList	typeref:typename:void
PathBezierToCasteljau	imgui/imgui_draw.cpp	/^static void PathBezierToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2, float y2/;"	f	typeref:typename:void	file:
PathClear	imgui/imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0/;"	f	struct:ImDrawList	typeref:typename:void
PathFillConvex	imgui/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyF/;"	f	struct:ImDrawList	typeref:typename:void
PathLineTo	imgui/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_bac/;"	f	struct:ImDrawList	typeref:typename:void
PathLineToMergeDuplicate	imgui/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size/;"	f	struct:ImDrawList	typeref:typename:void
PathRect	imgui/imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawCornerFlags ro/;"	f	class:ImDrawList	typeref:typename:void
PathStroke	imgui/imgui.h	/^    inline    void  PathStroke(ImU32 col, bool closed, float thickness = 1.0f)  { AddPolyline(_P/;"	f	struct:ImDrawList	typeref:typename:void
PhysicalDevice	imgui/examples/imgui_impl_vulkan.h	/^    VkPhysicalDevice    PhysicalDevice;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPhysicalDevice
PipelineCache	imgui/examples/imgui_impl_vulkan.h	/^    VkPipelineCache     PipelineCache;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkPipelineCache
PixelHeight	imgui/misc/freetype/imgui_freetype.cpp	/^        uint32_t    PixelHeight;        \/\/ Size this font was generated with.$/;"	m	struct:__anon76bbacac0111::FontInfo	typeref:typename:uint32_t	file:
PixelSnapH	imgui/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel bounda/;"	m	struct:ImFontConfig	typeref:typename:bool
PlatformImeLastPos	imgui/imgui_internal.h	/^    ImVec2                  PlatformImeLastPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
PlatformImePos	imgui/imgui_internal.h	/^    ImVec2                  PlatformImePos;                     \/\/ Cursor position request & l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
PlotEx	imgui/imgui_widgets.cpp	/^void ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_o/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	imgui/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* /;"	f	class:ImGui	typeref:typename:void
PlotLines	imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offse/;"	f	class:ImGui	typeref:typename:void
PlotLines	imgui/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data/;"	f	class:ImGui	typeref:typename:void
Plot_ArrayGetter	imgui/imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:float	file:
PopAllowKeyboardFocus	imgui/imgui.cpp	/^void ImGui::PopAllowKeyboardFocus()$/;"	f	class:ImGui	typeref:typename:void
PopButtonRepeat	imgui/imgui.cpp	/^void ImGui::PopButtonRepeat()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	imgui/imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	imgui/imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
PopColumnsBackground	imgui/imgui_widgets.cpp	/^void ImGui::PopColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PopFocusScope	imgui/imgui.cpp	/^void ImGui::PopFocusScope()$/;"	f	class:ImGui	typeref:typename:void
PopFont	imgui/imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui	typeref:typename:void
PopID	imgui/imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui	typeref:typename:void
PopItemFlag	imgui/imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui	typeref:typename:void
PopItemWidth	imgui/imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui	typeref:typename:void
PopStyleColor	imgui/imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui	typeref:typename:void
PopStyleVar	imgui/imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui	typeref:typename:void
PopTextWrapPos	imgui/imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui	typeref:typename:void
PopTextureID	imgui/imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
PopupBorderSize	imgui/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windo/;"	m	struct:ImGuiStyle	typeref:typename:float
PopupId	imgui/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
PopupId	imgui/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
PopupRounding	imgui/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note /;"	m	struct:ImGuiStyle	typeref:typename:float
Pos	imgui.ini	/^Pos=106,341$/;"	k	section:Window
Pos	imgui.ini	/^Pos=343,168$/;"	k	section:Window
Pos	imgui.ini	/^Pos=37,39$/;"	k	section:Window
Pos	imgui.ini	/^Pos=413,70$/;"	k	section:Window
Pos	imgui.ini	/^Pos=58,20$/;"	k	section:Window
Pos	imgui.ini	/^Pos=60,60$/;"	k	section:Window
Pos	imgui.ini	/^Pos=618,2$/;"	k	section:Window
Pos	imgui.ini	/^Pos=96,371$/;"	k	section:Window
Pos	imgui/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
Pos	imgui/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Pos	imgui/imgui_internal.h	/^    ImVec2ih    Pos;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Pos	imgui/imgui_internal.h	/^    float       Pos[3], NextWidths[3];$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float[3]
PosCond	imgui/imgui_internal.h	/^    ImGuiCond                   PosCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
PosPivotVal	imgui/imgui_internal.h	/^    ImVec2                      PosPivotVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosVal	imgui/imgui_internal.h	/^    ImVec2                      PosVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PresentMode	imgui/examples/imgui_impl_vulkan.h	/^    VkPresentModeKHR    PresentMode;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkPresentModeKHR
PrevFrameVisible	imgui/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
PrevLineSize	imgui/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
PrevLineTextBaseOffset	imgui/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
Preview	imgui/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
PrimQuadUV	imgui/imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, /;"	f	class:ImDrawList	typeref:typename:void
PrimRect	imgui/imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
PrimRectUV	imgui/imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
PrimReserve	imgui/imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimUnreserve	imgui/imgui_draw.cpp	/^void ImDrawList::PrimUnreserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimVtx	imgui/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)     { PrimWriteIdx((/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteIdx	imgui/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                 { *_IdxWritePtr /;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteVtx	imgui/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col){ _VtxWritePtr->/;"	f	struct:ImDrawList	typeref:typename:void
PrimitiveTopology	imgui/examples/imgui_impl_dx10.cpp	/^        D3D10_PRIMITIVE_TOPOLOGY    PrimitiveTopology;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:D3D10_PRIMITIVE_TOPOLOGY	file:
PrimitiveTopology	imgui/examples/imgui_impl_dx11.cpp	/^        D3D11_PRIMITIVE_TOPOLOGY    PrimitiveTopology;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:D3D11_PRIMITIVE_TOPOLOGY	file:
PrintFmt	imgui/imgui_internal.h	/^    const char* PrintFmt;       \/\/ Default printf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
PrivateClipboard	imgui/imgui_internal.h	/^    ImVector<char>          PrivateClipboard;                   \/\/ If no custom clipboard hand/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
ProgressBar	imgui/imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui	typeref:typename:void
Ptr	imgui/imgui_internal.h	/^    void*           Ptr;                \/\/ Either field can be set, not both. e.g. Dock node t/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:void *
PushAllowKeyboardFocus	imgui/imgui.cpp	/^void ImGui::PushAllowKeyboardFocus(bool allow_keyboard_focus)$/;"	f	class:ImGui	typeref:typename:void
PushButtonRepeat	imgui/imgui.cpp	/^void ImGui::PushButtonRepeat(bool repeat)$/;"	f	class:ImGui	typeref:typename:void
PushClipRect	imgui/imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersec/;"	f	class:ImGui	typeref:typename:void
PushClipRect	imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRect(ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rec/;"	f	class:ImDrawList	typeref:typename:void
PushClipRectFullScreen	imgui/imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList	typeref:typename:void
PushColumnClipRect	imgui/imgui_widgets.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui	typeref:typename:void
PushColumnsBackground	imgui/imgui_widgets.cpp	/^void ImGui::PushColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PushFocusScope	imgui/imgui.cpp	/^void ImGui::PushFocusScope(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushFont	imgui/imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui/imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui/imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	imgui/imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui	typeref:typename:void
PushItemFlag	imgui/imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
PushItemWidth	imgui/imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
PushMultiItemsWidths	imgui/imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui	typeref:typename:void
PushOverrideID	imgui/imgui.cpp	/^void ImGui::PushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	imgui/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	imgui/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui	typeref:typename:void
PushTextWrapPos	imgui/imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:void
PushTextureID	imgui/imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
Q&A: Basics	imgui/docs/FAQ.md	/^# Q&A: Basics$/;"	c
Q&A: Community	imgui/docs/FAQ.md	/^# Q&A: Community$/;"	c
Q&A: Concerns	imgui/docs/FAQ.md	/^# Q&A: Concerns$/;"	c
Q&A: Fonts, Text	imgui/docs/FAQ.md	/^# Q&A: Fonts, Text$/;"	c
Q&A: Integration	imgui/docs/FAQ.md	/^# Q&A: Integration$/;"	c
Q&A: Usage	imgui/docs/FAQ.md	/^# Q&A: Usage$/;"	c
Q. What is this library called?	imgui/docs/FAQ.md	/^### Q. What is this library called?$/;"	S
Q: Can you create elaborate/serious tools with Dear ImGui?	imgui/docs/FAQ.md	/^### Q: Can you create elaborate\/serious tools with Dear ImGui?$/;"	S
Q: Can you reskin the look of Dear ImGui?	imgui/docs/FAQ.md	/^### Q: Can you reskin the look of Dear ImGui?$/;"	S
Q: How can I display an image? What is ImTextureID, how does it work?	imgui/docs/FAQ.md	/^### Q: How can I display an image? What is ImTextureID, how does it work?$/;"	S
Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyrillic?	imgui/docs/FAQ.md	/^### Q: How can I display and input non-Latin characters such as Chinese, Japanese, Korean, Cyril/;"	S
Q: How can I display custom shapes? (using low-level ImDrawList API)	imgui/docs/FAQ.md	/^### Q: How can I display custom shapes? (using low-level ImDrawList API)$/;"	S
Q: How can I easily use icons in my application?	imgui/docs/FAQ.md	/^### Q: How can I easily use icons in my application?$/;"	S
Q: How can I enable keyboard or gamepad controls?	imgui/docs/FAQ.md	/^### Q: How can I enable keyboard or gamepad controls?$/;"	S
Q: How can I help?	imgui/docs/FAQ.md	/^### Q: How can I help?$/;"	S
Q: How can I interact with standard C++ types (such as std::string and std::vector)?	imgui/docs/FAQ.md	/^### Q: How can I interact with standard C++ types (such as std::string and std::vector)?$/;"	S
Q: How can I load a different font than the default?	imgui/docs/FAQ.md	/^### Q: How can I load a different font than the default?$/;"	S
Q: How can I load multiple fonts?	imgui/docs/FAQ.md	/^### Q: How can I load multiple fonts?$/;"	S
Q: How can I tell whether to dispatch mouse/keyboard to Dear ImGui or to my application?	imgui/docs/FAQ.md	/^### Q: How can I tell whether to dispatch mouse\/keyboard to Dear ImGui or to my application?$/;"	S
Q: How can I use my own math types instead of ImVec2/ImVec4?	imgui/docs/FAQ.md	/^### Q: How can I use my own math types instead of ImVec2\/ImVec4?$/;"	S
Q: How can I use this on a machine without mouse, keyboard or screen? (input share, remote display)	imgui/docs/FAQ.md	/^### Q: How can I use this on a machine without mouse, keyboard or screen? (input share, remote d/;"	S
Q: I integrated Dear ImGui in my engine and some elements are clipping or disappearing when I move windows around..	imgui/docs/FAQ.md	/^### Q: I integrated Dear ImGui in my engine and some elements are clipping or disappearing when /;"	S
Q: I integrated Dear ImGui in my engine and the text or lines are blurry..	imgui/docs/FAQ.md	/^### Q: I integrated Dear ImGui in my engine and the text or lines are blurry..$/;"	S
Q: Where is the documentation?	imgui/docs/FAQ.md	/^### Q: Where is the documentation?$/;"	S
Q: Which version should I get?	imgui/docs/FAQ.md	/^### Q: Which version should I get?$/;"	S
Q: Who uses Dear ImGui?	imgui/docs/FAQ.md	/^### Q: Who uses Dear ImGui?$/;"	S
Q: Why are multiple widgets reacting when I interact with a single one? <br>Q: How can I have multiple widgets with the same label or with an empty label?	imgui/docs/FAQ.md	/^### Q: Why are multiple widgets reacting when I interact with a single one? <br>Q: How can I hav/;"	S
Q: Why using C++ (as opposed to C)?	imgui/docs/FAQ.md	/^### Q: Why using C++ (as opposed to C)?$/;"	S
Queue	imgui/examples/imgui_impl_vulkan.h	/^    VkQueue             Queue;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:VkQueue
QueueFamily	imgui/examples/imgui_impl_vulkan.h	/^    uint32_t            QueueFamily;$/;"	m	struct:ImGui_ImplVulkan_InitInfo	typeref:typename:uint32_t
RS	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10RasterizerState*      RS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10RasterizerState *	file:
RS	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11RasterizerState*      RS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11RasterizerState *	file:
RadioButton	imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui	typeref:typename:bool
RadioButton	imgui/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui	typeref:typename:bool
RasterizerFlags	imgui/imgui.h	/^    unsigned int    RasterizerFlags;        \/\/ 0x00     \/\/ Settings for custom font rasteriz/;"	m	struct:ImFontConfig	typeref:typename:unsigned int
RasterizerFlags	imgui/misc/freetype/imgui_freetype.h	/^    enum RasterizerFlags$/;"	g	namespace:ImGuiFreeType
RasterizerMultiply	imgui/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Brighten (>1.0f) or darken (<1.0f/;"	m	struct:ImFontConfig	typeref:typename:float
ReadLineFn	imgui/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, con/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,void * entry,const char * line)
ReadOpenFn	imgui/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void * (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,const char * name)
Rect	imgui/imgui_internal.h	/^    ImRect      Rect() const                { return ImRect(Pos.x, Pos.y, Pos.x+Size.x, Pos.y+Si/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
RectRel	imgui/imgui_internal.h	/^    ImRect          RectRel;            \/\/ Best candidate bounding box in window relative spac/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImRect
Rects	imgui/imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcData	typeref:typename:stbrp_rect *	file:
Rects	imgui/misc/freetype/imgui_freetype.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:stbrp_rect *	file:
RefFrame	imgui/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
Remove	imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Buf[idx].~T(); *(int*)&Buf[idx] = FreeIdx;/;"	f	struct:ImPool	typeref:typename:void
Remove	imgui/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool	typeref:typename:void
Render	imgui/imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	imgui/imgui.cpp	/^void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	imgui/imgui_internal.h	/^    inline void RenderArrow(ImVec2 pos, ImGuiDir dir, float scale=1.0f) { ImGuiWindow* window = /;"	f	namespace:ImGui	typeref:typename:void
RenderArrowPointingAt	imgui/imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir di/;"	f	class:ImGui	typeref:typename:void
RenderArrowsForVerticalBar	imgui/imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float /;"	f	typeref:typename:void	file:
RenderBullet	imgui/imgui.cpp	/^void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderBullet	imgui/imgui_internal.h	/^    inline void RenderBullet(ImVec2 pos)                                { ImGuiWindow* window = /;"	f	namespace:ImGui	typeref:typename:void
RenderChar	imgui/imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c) con/;"	f	class:ImFont	typeref:typename:void
RenderCheckMark	imgui/imgui.cpp	/^void ImGui::RenderCheckMark(ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui	typeref:typename:void
RenderColorRectWithAlphaCheckerboard	imgui/imgui_widgets.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImVec2 p_min, ImVec2 p_max, ImU32 col, float gr/;"	f	class:ImGui	typeref:typename:void
RenderCompleteSemaphore	imgui/examples/imgui_impl_vulkan.h	/^    VkSemaphore         RenderCompleteSemaphore;$/;"	m	struct:ImGui_ImplVulkanH_FrameSemaphores	typeref:typename:VkSemaphore
RenderDrawListsFn	imgui/imgui.h	/^    void        (*RenderDrawListsFn)(ImDrawData* data);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(ImDrawData * data)
RenderDrawListsFnUnused	imgui/imgui.h	/^    void*       RenderDrawListsFnUnused;$/;"	m	struct:ImGuiIO	typeref:typename:void *
RenderFrame	imgui/imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderFrameBorder	imgui/imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderGlyphAndGetInfo	imgui/misc/freetype/imgui_freetype.cpp	/^    const FT_Bitmap* FreeTypeFont::RenderGlyphAndGetInfo(GlyphInfo* out_glyph_info)$/;"	f	class:__anon76bbacac0111::FreeTypeFont	typeref:typename:const FT_Bitmap *
RenderMode	imgui/misc/freetype/imgui_freetype.cpp	/^        FT_Render_Mode  RenderMode;$/;"	m	struct:__anon76bbacac0111::FreeTypeFont	typeref:typename:FT_Render_Mode	file:
RenderMouseCursor	imgui/imgui_draw.cpp	/^void ImGui::RenderMouseCursor(ImDrawList* draw_list, ImVec2 pos, float scale, ImGuiMouseCursor m/;"	f	class:ImGui	typeref:typename:void
RenderNavHighlight	imgui/imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui	typeref:typename:void
RenderPass	imgui/examples/imgui_impl_vulkan.h	/^    VkRenderPass        RenderPass;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkRenderPass
RenderRectFilledRangeH	imgui/imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x/;"	f	class:ImGui	typeref:typename:void
RenderText	imgui/imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_/;"	f	class:ImGui	typeref:typename:void
RenderText	imgui/imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& /;"	f	class:ImFont	typeref:typename:void
RenderTextClipped	imgui/imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, co/;"	f	class:ImGui	typeref:typename:void
RenderTextClippedEx	imgui/imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_/;"	f	class:ImGui	typeref:typename:void
RenderTextEllipsis	imgui/imgui.cpp	/^void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_m/;"	f	class:ImGui	typeref:typename:void
RenderTextWrapped	imgui/imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_wid/;"	f	class:ImGui	typeref:typename:void
RenderWindowDecorations	imgui/imgui.cpp	/^void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool titl/;"	f	class:ImGui	typeref:typename:void
RenderWindowOuterBorders	imgui/imgui.cpp	/^static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderWindowTitleBarContents	imgui/imgui.cpp	/^void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, cons/;"	f	class:ImGui	typeref:typename:void
Renderer	imgui/examples/example_apple_metal/Shared/Renderer.h	/^@interface Renderer : NSObject <MTKViewDelegate>$/;"	i	protocols:MTKViewDelegate
Renderer	imgui/examples/example_apple_metal/Shared/Renderer.mm	/^@implementation Renderer$/;"	I
Renderer	imgui/examples/example_apple_metal/Shared/Renderer.mm	/^@interface Renderer ()$/;"	i	category:nonatomic	protocols:MTLDevice
ReorderRequestDir	imgui/imgui_internal.h	/^    ImS8                ReorderRequestDir;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
ReorderRequestTabId	imgui/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Reserve	imgui/imgui_internal.h	/^    void        Reserve(int capacity)               { Buf.reserve(capacity); Map.Data.reserve(ca/;"	f	struct:ImPool	typeref:typename:void
ResetDevice	imgui/examples/example_win32_directx9/main.cpp	/^void ResetDevice()$/;"	f	typeref:typename:void
ResetMouseDragDelta	imgui/imgui.cpp	/^void ImGui::ResetMouseDragDelta(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:void
Resize	imgui/imgui_internal.h	/^    void            Resize(int sz)          { Storage.resize((sz + 31) >> 5); memset(Storage.Dat/;"	f	struct:ImBoolVector	typeref:typename:void
ResizeBorderHeld	imgui/imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held f/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeSwapChain	imgui/examples/example_win32_directx12/main.cpp	/^void ResizeSwapChain(HWND hWnd, int width, int height)$/;"	f	typeref:typename:void
Restore	imgui/imgui_internal.h	/^    void Restore() const    { ImGuiWindow* window = GImGui->CurrentWindow; window->DC.LastItemId/;"	f	struct:ImGuiItemHoveredDataBackup	typeref:typename:void
RootWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForNav	imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForTitleBarHighlight	imgui/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RoundScalarWithFormatT	imgui/imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui	typeref:typename:TYPE
SDL_Event	imgui/examples/imgui_impl_sdl.h	/^typedef union SDL_Event SDL_Event;$/;"	t	typeref:union:SDL_Event
SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE	imgui/examples/imgui_impl_sdl.cpp	/^#define SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE /;"	d	file:
SDL_HAS_VULKAN	imgui/examples/imgui_impl_sdl.cpp	/^#define SDL_HAS_VULKAN /;"	d	file:
SHADER_H	shader_class.h	/^#define SHADER_H$/;"	d
SONG_EXISTS	sqlite_routines.h	/^  SONG_EXISTS,$/;"	e	enum:__anoned97ed650103
SOURCES	imgui/examples/example_emscripten/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui/examples/example_glfw_metal/Makefile	/^SOURCES = main.mm$/;"	m
SOURCES	imgui/examples/example_glfw_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui/examples/example_glfw_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui/examples/example_glut_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui/examples/example_null/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui/examples/example_sdl_directx11/build_win32.bat	/^set SOURCES=main.cpp ..\\imgui_impl_sdl.cpp ..\\imgui_impl_dx11.cpp ..\\..\\imgui*.cpp$/;"	v
SOURCES	imgui/examples/example_sdl_opengl2/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui/examples/example_sdl_opengl2/build_win32.bat	/^set SOURCES=main.cpp ..\\imgui_impl_sdl.cpp ..\\imgui_impl_opengl2.cpp ..\\..\\imgui*.cpp$/;"	v
SOURCES	imgui/examples/example_sdl_opengl3/Makefile	/^SOURCES = main.cpp$/;"	m
SOURCES	imgui/examples/example_sdl_opengl3/build_win32.bat	/^set SOURCES=main.cpp ..\\imgui_impl_sdl.cpp ..\\imgui_impl_opengl3.cpp ..\\..\\imgui*.cpp ..\\li/;"	v
SOURCES	makefile	/^SOURCES = main.cpp$/;"	m
SQL_ERROR	sqlite_routines.h	/^  SQL_ERROR,$/;"	e	enum:__anoned97ed650103
STBRP_ASSERT	imgui/imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	imgui/imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_ASSERT	imgui/misc/freetype/imgui_freetype.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_DEF	imgui/imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anond298c5900103
STBRP_HEURISTIC_Skyline_BL_sortHeight	imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anond298c5900103
STBRP_HEURISTIC_Skyline_default	imgui/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anond298c5900103
STBRP_SORT	imgui/imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	imgui/imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	imgui/imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP_STATIC	imgui/misc/freetype/imgui_freetype.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	imgui/imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	imgui/imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	imgui/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anond298c5900203
STBRP__MAXVAL	imgui/imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	imgui/imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	imgui/imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	imgui/imstb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	imgui/imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	imgui/imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	imgui/imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	imgui/imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anonea0503650c03
STBTT_MAC_EID_CHINESE_TRAD	imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anonea0503650c03
STBTT_MAC_EID_GREEK	imgui/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anonea0503650c03
STBTT_MAC_EID_HEBREW	imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anonea0503650c03
STBTT_MAC_EID_JAPANESE	imgui/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anonea0503650c03
STBTT_MAC_EID_KOREAN	imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anonea0503650c03
STBTT_MAC_EID_ROMAN	imgui/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anonea0503650c03
STBTT_MAC_EID_RUSSIAN	imgui/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anonea0503650c03
STBTT_MAC_LANG_ARABIC	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_CHINESE_TRAD	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_DUTCH	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_ENGLISH	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_FRENCH	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_GERMAN	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_HEBREW	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_ITALIAN	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_JAPANESE	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_KOREAN	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_RUSSIAN	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_SPANISH	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anonea0503650e03
STBTT_MAC_LANG_SWEDISH	imgui/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anonea0503650e03
STBTT_MAX_OVERSAMPLE	imgui/imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	imgui/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anonea0503650b03
STBTT_MS_EID_SYMBOL	imgui/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anonea0503650b03
STBTT_MS_EID_UNICODE_BMP	imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anonea0503650b03
STBTT_MS_EID_UNICODE_FULL	imgui/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anonea0503650b03
STBTT_MS_LANG_CHINESE	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_DUTCH	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_ENGLISH	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_FRENCH	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_GERMAN	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_HEBREW	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_ITALIAN	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_JAPANESE	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_KOREAN	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_RUSSIAN	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_SPANISH	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anonea0503650d03
STBTT_MS_LANG_SWEDISH	imgui/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anonea0503650d03
STBTT_PLATFORM_ID_ISO	imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anonea0503650903
STBTT_PLATFORM_ID_MAC	imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anonea0503650903
STBTT_PLATFORM_ID_MICROSOFT	imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anonea0503650903
STBTT_PLATFORM_ID_UNICODE	imgui/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anonea0503650903
STBTT_POINT_SIZE	imgui/imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	imgui/imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	imgui/imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anonea0503650a03
STBTT_UNICODE_EID_UNICODE_1_0	imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anonea0503650a03
STBTT_UNICODE_EID_UNICODE_1_1	imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anonea0503650a03
STBTT_UNICODE_EID_UNICODE_2_0_BMP	imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anonea0503650a03
STBTT_UNICODE_EID_UNICODE_2_0_FULL	imgui/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anonea0503650a03
STBTT__COMPARE	imgui/imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	imgui/imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	imgui/imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__NOTUSED	imgui/imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	imgui/imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	imgui/imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	imgui/imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	imgui/imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	imgui/imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	imgui/imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	imgui/imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	imgui/imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	imgui/imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	imgui/imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	imgui/imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	imgui/imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	imgui/imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	imgui/imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	imgui/imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	imgui/imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	imgui/imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	imgui/imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	imgui/imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	imgui/imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	imgui/imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	imgui/imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	imgui/imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	imgui/imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	imgui/imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	imgui/imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	imgui/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anonea0503650603
STBTT_vcurve	imgui/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anonea0503650603
STBTT_vline	imgui/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anonea0503650603
STBTT_vmove	imgui/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anonea0503650603
STB_INCLUDE_STB_RECT_PACK_H	imgui/imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	imgui/imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_IMPLEMENTATION	imgui/misc/freetype/imgui_freetype.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	imgui/imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_SPRINTF_IMPLEMENTATION	imgui/imgui.cpp	/^#define STB_SPRINTF_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_CHARTYPE	imgui/imgui_internal.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_CHARTYPE	imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_CHARTYPE /;"	d
STB_TEXTEDIT_DELETECHARS	imgui/imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(STB_TEXTEDIT_STRING* obj, int pos, int n)$/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_GETCHAR	imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const STB_TEXTEDIT_STRING* obj, int idx)                    /;"	f	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_GETWIDTH	imgui/imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(STB_TEXTEDIT_STRING* obj, int line_start_idx, int char_idx)/;"	f	namespace:ImStb	typeref:typename:float	file:
STB_TEXTEDIT_GETWIDTH_NEWLINE	imgui/imgui_internal.h	/^#define STB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
STB_TEXTEDIT_IMPLEMENTATION	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_INSERTCHARS	imgui/imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(STB_TEXTEDIT_STRING* obj, int pos, const ImWchar* new_text,/;"	f	namespace:ImStb	typeref:typename:bool	file:
STB_TEXTEDIT_KEYTOTEXT	imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                  /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_KEYTYPE	imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_REDO	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	imgui/imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, STB_TEXTEDIT_STRING* obj, int line_star/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_MOVEWORDLEFT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)   { idx--; while (/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT	imgui/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	imgui/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(STB_TEXTEDIT_STRING* obj, int idx)  { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_NEWLINE	imgui/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	v	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_POSITIONTYPE	imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_POSITIONTYPE /;"	d
STB_TEXTEDIT_STRING	imgui/imgui_internal.h	/^#define STB_TEXTEDIT_STRING /;"	d
STB_TEXTEDIT_STRINGLEN	imgui/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const STB_TEXTEDIT_STRING* obj)                           /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_UNDOCHARCOUNT	imgui/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOCHARCOUNT	imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOCHARCOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	imgui/imgui_internal.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_UNDOSTATECOUNT	imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_UNDOSTATECOUNT /;"	d
STB_TEXTEDIT_memmove	imgui/imstb_textedit.h	/^#define STB_TEXTEDIT_memmove /;"	d
STB_TEXT_HAS_SELECTION	imgui/imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	imgui/imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	imgui/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anon22a5596e0308
STB__SCRAMBLE	imgui/misc/fonts/binary_to_compressed_c.cpp	/^#define STB__SCRAMBLE(/;"	d	file:
STB__TRY	imgui/misc/fonts/binary_to_compressed_c.cpp	/^#define STB__TRY(/;"	d	file:
SUCCESS	sqlite_routines.h	/^  SUCCESS = 0,$/;"	e	enum:__anoned97ed650103
SafeRelease	imgui/examples/imgui_impl_dx12.cpp	/^static void SafeRelease(T*& res)$/;"	f	typeref:typename:void	file:
SameLine	imgui/imgui.cpp	/^void ImGui::SameLine(float offset_from_start_x, float spacing_w)$/;"	f	class:ImGui	typeref:typename:void
SampleMask	imgui/examples/imgui_impl_dx10.cpp	/^        UINT                        SampleMask;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
SampleMask	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        SampleMask;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
SaveIniSettingsToDisk	imgui/imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToMemory	imgui/imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui	typeref:typename:const char *
Saw	imgui/imgui_demo.cpp	/^            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Scale	imgui/imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Bas/;"	m	struct:ImFont	typeref:typename:float
ScaleAllSizes	imgui/imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle	typeref:typename:void
ScaleClipRects	imgui/imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData	typeref:typename:void
ScanFmt	imgui/imgui_internal.h	/^    const char* ScanFmt;        \/\/ Default scanf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
ScissorRects	imgui/examples/imgui_impl_dx10.cpp	/^        D3D10_RECT                  ScissorRects[D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:D3D10_RECT[]	file:
ScissorRects	imgui/examples/imgui_impl_dx11.cpp	/^        D3D11_RECT                  ScissorRects[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:D3D11_RECT[]	file:
ScissorRectsCount	imgui/examples/imgui_impl_dx10.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
ScissorRectsCount	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
Scroll	imgui/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollMax	imgui/imgui_internal.h	/^    ImVec2                  ScrollMax;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTarget	imgui/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. sto/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetCenterRatio	imgui/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that targe/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollToBottom	imgui/imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
ScrollToBringRectIntoView	imgui/imgui.cpp	/^ImVec2 ImGui::ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& item_rect)$/;"	f	class:ImGui	typeref:typename:ImVec2
ScrollX	imgui/imgui_internal.h	/^    float                   ScrollX;                \/\/ horizontal scrolling\/offset$/;"	m	struct:ImGuiInputTextState	typeref:typename:float
Scrollbar	imgui/imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
ScrollbarClickDeltaToGrabCenter	imgui/imgui_internal.h	/^    float                   ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and /;"	m	struct:ImGuiContext	typeref:typename:float
ScrollbarEx	imgui/imgui_widgets.cpp	/^bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, float* p_scroll_v, f/;"	f	class:ImGui	typeref:typename:bool
ScrollbarRounding	imgui/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSize	imgui/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the /;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSizes	imgui/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by scrollbars on/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollbarX	imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollbarY	imgui/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollingAnim	imgui/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingSpeed	imgui/imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTarget	imgui/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTargetDistToVisibility	imgui/imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SelectAll	imgui/imgui_internal.h	/^    void        SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end /;"	f	struct:ImGuiInputTextState	typeref:typename:void
Selectable	imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec/;"	f	class:ImGui	typeref:typename:bool
Selectable	imgui/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
SelectableTextAlign	imgui/imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text when selectable is/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SelectedAllMouseLock	imgui/imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
SelectedTabId	imgui/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab\/window$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
SelectionEnd	imgui/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionStart	imgui/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SemaphoreIndex	imgui/examples/imgui_impl_vulkan.h	/^    uint32_t            SemaphoreIndex;         \/\/ Current set of swapchain wait semaphores we/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:uint32_t
Separator	imgui/imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui	typeref:typename:void
SeparatorEx	imgui/imgui_widgets.cpp	/^void ImGui::SeparatorEx(ImGuiSeparatorFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetActiveID	imgui/imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetAllInt	imgui/imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetAllocatorFunctions	imgui/imgui.cpp	/^void ImGui::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void (*free_f/;"	f	class:ImGui	typeref:typename:void
SetAllocatorFunctions	imgui/misc/freetype/imgui_freetype.cpp	/^void ImGuiFreeType::SetAllocatorFunctions(void* (*alloc_func)(size_t sz, void* user_data), void /;"	f	class:ImGuiFreeType	typeref:typename:void
SetBit	imgui/imgui.h	/^    inline void     SetBit(int n)       { int off = (n >> 5); ImU32 mask = 1u << (n & 31); UsedC/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
SetBit	imgui/imgui_internal.h	/^    void            SetBit(int n, bool v)   { int off = (n >> 5); int mask = 1 << (n & 31); if (/;"	f	struct:ImBoolVector	typeref:typename:void
SetBool	imgui/imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetCircleSegmentMaxError	imgui/imgui_draw.cpp	/^void ImDrawListSharedData::SetCircleSegmentMaxError(float max_error)$/;"	f	class:ImDrawListSharedData	typeref:typename:void
SetClipboardText	imgui/imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui	typeref:typename:void
SetClipboardTextFn	imgui/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(void * user_data,const char * text)
SetClipboardTextFn_DefaultImpl	imgui/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void*, const char* text)$/;"	f	typeref:typename:void	file:
SetColorEditOptions	imgui/imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetColumnOffset	imgui/imgui_widgets.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui	typeref:typename:void
SetColumnWidth	imgui/imgui_widgets.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentChannel	imgui/imgui_draw.cpp	/^void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SetCurrentContext	imgui/imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentFont	imgui/imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentWindow	imgui/imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetCursorPos	imgui/imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosX	imgui/imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosY	imgui/imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosYAndSetupDummyPrevLine	imgui/imgui.cpp	/^static void SetCursorPosYAndSetupDummyPrevLine(float pos_y, float line_height)$/;"	f	typeref:typename:void	file:
SetCursorScreenPos	imgui/imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
SetDragDropPayload	imgui/imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond c/;"	f	class:ImGui	typeref:typename:bool
SetFallbackChar	imgui/imgui_draw.cpp	/^void ImFont::SetFallbackChar(ImWchar c)$/;"	f	class:ImFont	typeref:typename:void
SetFloat	imgui/imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetFocusID	imgui/imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetHSV	imgui/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRG/;"	f	struct:ImColor	typeref:typename:void
SetHoveredID	imgui/imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetInt	imgui/imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetItemAllowOverlap	imgui/imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetItemDefaultFocus	imgui/imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui	typeref:typename:void
SetKeyboardFocusHere	imgui/imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui	typeref:typename:void
SetMouseCursor	imgui/imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui	typeref:typename:void
SetNavID	imgui/imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, int nav_layer, ImGuiID focus_scope_id)$/;"	f	class:ImGui	typeref:typename:void
SetNavIDWithRectRel	imgui/imgui.cpp	/^void ImGui::SetNavIDWithRectRel(ImGuiID id, int nav_layer, ImGuiID focus_scope_id, const ImRect&/;"	f	class:ImGui	typeref:typename:void
SetNextItemOpen	imgui/imgui_widgets.cpp	/^void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemWidth	imgui/imgui.cpp	/^void ImGui::SetNextItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
SetNextTreeNodeOpen	imgui/imgui.h	/^    static inline void  SetNextTreeNodeOpen(bool open, ImGuiCond cond = 0) { SetNextItemOpen(ope/;"	f	namespace:ImGui	typeref:typename:void
SetNextWindowBgAlpha	imgui/imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowCollapsed	imgui/imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentSize	imgui/imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowFocus	imgui/imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPos	imgui/imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSize	imgui/imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSizeConstraints	imgui/imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSi/;"	f	class:ImGui	typeref:typename:void
SetPixelHeight	imgui/misc/freetype/imgui_freetype.cpp	/^    void FreeTypeFont::SetPixelHeight(int pixel_height)$/;"	f	class:__anon76bbacac0111::FreeTypeFont	typeref:typename:void
SetScrollFromPosX	imgui/imgui.cpp	/^void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	imgui/imgui.cpp	/^void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	imgui/imgui.cpp	/^void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	imgui/imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHere	imgui/imgui.h	/^    static inline void  SetScrollHere(float center_ratio=0.5f){ SetScrollHereY(center_ratio); }$/;"	f	namespace:ImGui	typeref:typename:void
SetScrollHereX	imgui/imgui.cpp	/^void ImGui::SetScrollHereX(float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereY	imgui/imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	imgui/imgui.cpp	/^void ImGui::SetScrollX(ImGuiWindow* window, float new_scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	imgui/imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	imgui/imgui.cpp	/^void ImGui::SetScrollY(ImGuiWindow* window, float new_scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	imgui/imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetStateStorage	imgui/imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui	typeref:typename:void
SetTabItemClosed	imgui/imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SetTexID	imgui/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas	typeref:typename:void
SetTooltip	imgui/imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetTooltipV	imgui/imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetVoidPtr	imgui/imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetWindowCollapsed	imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	imgui/imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsedAllowFlags	imgui/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags;       \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond
SetWindowConditionAllowFlags	imgui/imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	typeref:typename:void	file:
SetWindowFocus	imgui/imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetWindowFocus	imgui/imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui	typeref:typename:void
SetWindowFontScale	imgui/imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	imgui/imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	imgui/imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	imgui/imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPosAllowFlags	imgui/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags;             \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond
SetWindowPosPivot	imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowPosVal	imgui/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowSize	imgui/imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	imgui/imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	imgui/imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSizeAllowFlags	imgui/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags;            \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond
SettingsDirtyTimer	imgui/imgui_internal.h	/^    float                   SettingsDirtyTimer;                 \/\/ Save .ini Settings to memor/;"	m	struct:ImGuiContext	typeref:typename:float
SettingsHandlers	imgui/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler>      SettingsHandlers;       \/\/ List of .ini settings handl/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiSettingsHandler>
SettingsIniData	imgui/imgui_internal.h	/^    ImGuiTextBuffer         SettingsIniData;                    \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
SettingsLoaded	imgui/imgui_internal.h	/^    bool                    SettingsLoaded;$/;"	m	struct:ImGuiContext	typeref:typename:bool
SettingsOffset	imgui/imgui_internal.h	/^    int                     SettingsOffset;                     \/\/ Offset into SettingsWindows/;"	m	struct:ImGuiWindow	typeref:typename:int
SettingsWindows	imgui/imgui_internal.h	/^    ImChunkStream<ImGuiWindowSettings>  SettingsWindows;        \/\/ ImGuiWindow .ini settings e/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiWindowSettings>
SetupDrawData	imgui/imgui.cpp	/^static void SetupDrawData(ImVector<ImDrawList*>* draw_lists, ImDrawData* draw_data)$/;"	f	typeref:typename:void	file:
SetupVulkan	imgui/examples/example_glfw_vulkan/main.cpp	/^static void SetupVulkan(const char** extensions, uint32_t extensions_count)$/;"	f	typeref:typename:void	file:
SetupVulkan	imgui/examples/example_sdl_vulkan/main.cpp	/^static void SetupVulkan(const char** extensions, uint32_t extensions_count)$/;"	f	typeref:typename:void	file:
SetupVulkanWindow	imgui/examples/example_glfw_vulkan/main.cpp	/^static void SetupVulkanWindow(ImGui_ImplVulkanH_Window* wd, VkSurfaceKHR surface, int width, int/;"	f	typeref:typename:void	file:
SetupVulkanWindow	imgui/examples/example_sdl_vulkan/main.cpp	/^static void SetupVulkanWindow(ImGui_ImplVulkanH_Window* wd, VkSurfaceKHR surface, int width, int/;"	f	typeref:typename:void	file:
ShadeVertsLinearColorGradientKeepAlpha	imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, in/;"	f	class:ImGui	typeref:typename:void
ShadeVertsLinearUV	imgui/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, cons/;"	f	class:ImGui	typeref:typename:void
Shader	shader_class.h	/^    Shader(const char* vertexPath, const char* fragmentPath)$/;"	f	class:Shader
Shader	shader_class.h	/^class Shader$/;"	c
ShowAboutWindow	imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowAboutWindow	imgui/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	imgui/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindowColumns	imgui/imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	typeref:typename:void	file:
ShowDemoWindowLayout	imgui/imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	typeref:typename:void	file:
ShowDemoWindowMisc	imgui/imgui_demo.cpp	/^static void ShowDemoWindowMisc()$/;"	f	typeref:typename:void	file:
ShowDemoWindowPopups	imgui/imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	typeref:typename:void	file:
ShowDemoWindowWidgets	imgui/imgui_demo.cpp	/^static void ShowDemoWindowWidgets()$/;"	f	typeref:typename:void	file:
ShowDummyObject	imgui/imgui_demo.cpp	/^        static void ShowDummyObject(const char* prefix, int uid)$/;"	f	struct:ShowExampleAppPropertyEditor::funcs	typeref:typename:void	file:
ShowExampleAppAutoResize	imgui/imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConsole	imgui/imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConstrainedResize	imgui/imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppCustomRendering	imgui/imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppDocuments	imgui/imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppLayout	imgui/imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLog	imgui/imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLongText	imgui/imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppMainMenuBar	imgui/imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	typeref:typename:void	file:
ShowExampleAppPropertyEditor	imgui/imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppSimpleOverlay	imgui/imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppWindowTitles	imgui/imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	typeref:typename:void	file:
ShowExampleMenuFile	imgui/imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	typeref:typename:void	file:
ShowFontSelector	imgui/imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	imgui/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	imgui/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool*) { }$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	imgui/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleSelector	imgui/imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
ShowUserGuide	imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui	typeref:typename:void
ShowUserGuide	imgui/imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui	typeref:typename:void
ShrinkWidthBuffer	imgui/imgui_internal.h	/^    ImVector<ImGuiShrinkWidthItem>  ShrinkWidthBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiShrinkWidthItem>
ShrinkWidthItemComparer	imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ShrinkWidths	imgui/imgui_widgets.cpp	/^void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)$/;"	f	class:ImGui	typeref:typename:void
Shutdown	imgui/imgui.cpp	/^void ImGui::Shutdown(ImGuiContext* context)$/;"	f	class:ImGui	typeref:typename:void
Sin	imgui/imgui_demo.cpp	/^            static float Sin(void*, int i) { return sinf(i * 0.1f); }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Size	imgui.ini	/^Size=1206,595$/;"	k	section:Window
Size	imgui.ini	/^Size=1283,478$/;"	k	section:Window
Size	imgui.ini	/^Size=332,502$/;"	k	section:Window
Size	imgui.ini	/^Size=345,81$/;"	k	section:Window
Size	imgui.ini	/^Size=400,400$/;"	k	section:Window
Size	imgui.ini	/^Size=550,680$/;"	k	section:Window
Size	imgui.ini	/^Size=722,380$/;"	k	section:Window
Size	imgui.ini	/^Size=945,452$/;"	k	section:Window
Size	imgui/imgui.h	/^    int                 Size;$/;"	m	struct:ImVector	typeref:typename:int
Size	imgui/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Size	imgui/imgui_internal.h	/^    ImVec2ih    Size;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Size	imgui/imgui_internal.h	/^    size_t      Size;           \/\/ Size in byte$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:size_t
SizeCallback	imgui/imgui_internal.h	/^    ImGuiSizeCallback           SizeCallback;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiSizeCallback
SizeCallbackUserData	imgui/imgui_internal.h	/^    void*                       SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:void *
SizeCond	imgui/imgui_internal.h	/^    ImGuiCond                   SizeCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
SizeConstraintRect	imgui/imgui_internal.h	/^    ImRect                      SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImRect
SizeFull	imgui/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SizePixels	imgui/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (mo/;"	m	struct:ImFontConfig	typeref:typename:float
SizeVal	imgui/imgui_internal.h	/^    ImVec2                      SizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
SkipItems	imgui/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely b/;"	m	struct:ImGuiWindow	typeref:typename:bool
SliderAngle	imgui/imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_ma/;"	f	class:ImGui	typeref:typename:bool
SliderBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, con/;"	f	class:ImGui	typeref:typename:bool
SliderBehaviorT	imgui/imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, cons/;"	f	class:ImGui	typeref:typename:bool
SliderCalcRatioFromValueT	imgui/imgui_widgets.cpp	/^float ImGui::SliderCalcRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, /;"	f	class:ImGui	typeref:typename:float
SliderFloat	imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* forma/;"	f	class:ImGui	typeref:typename:bool
SliderFloat2	imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat3	imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat4	imgui/imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderInt	imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format)$/;"	f	class:ImGui	typeref:typename:bool
SliderInt2	imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format)$/;"	f	class:ImGui	typeref:typename:bool
SliderInt3	imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format)$/;"	f	class:ImGui	typeref:typename:bool
SliderInt4	imgui/imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format)$/;"	f	class:ImGui	typeref:typename:bool
SliderScalar	imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p/;"	f	class:ImGui	typeref:typename:bool
SliderScalarN	imgui/imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, c/;"	f	class:ImGui	typeref:typename:bool
SmallButton	imgui/imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
SourceId	imgui/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceParentId	imgui/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceWindow	imgui/imgui_internal.h	/^    ImGuiWindow*        SourceWindow;   \/\/ Set on OpenPopup() copy of NavWindow at the time of/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Spacing	imgui/imgui_internal.h	/^    float       Spacing;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float
Spacing	imgui/imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui	typeref:typename:void
Split	imgui/imgui_draw.cpp	/^void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
Splitter	imgui/imgui_internal.h	/^    ImDrawListSplitter  Splitter;$/;"	m	struct:ImGuiColumns	typeref:typename:ImDrawListSplitter
SplitterBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* /;"	f	class:ImGui	typeref:typename:bool
Sponsors	imgui/docs/README.md	/^### Sponsors$/;"	S
Square	imgui/imgui_demo.cpp	/^        static void Square(ImGuiSizeCallbackData* data) { data->DesiredSize.x = data->DesiredSiz/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
SrcCount	imgui/imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
SrcCount	imgui/misc/freetype/imgui_freetype.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstDataFT	typeref:typename:int	file:
SrcRanges	imgui/imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcData	typeref:typename:const ImWchar *	file:
SrcRanges	imgui/misc/freetype/imgui_freetype.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcDataFT	typeref:typename:const ImWchar *	file:
StackSizesBackup	imgui/imgui_internal.h	/^    short                   StackSizesBackup[6];    \/\/ Store size of various stacks for assert/;"	m	struct:ImGuiWindowTempData	typeref:typename:short[6]
StartLockWheelingWindow	imgui/imgui.cpp	/^static void StartLockWheelingWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
StartMouseMovingWindow	imgui/imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
StartPosY	imgui/imgui.h	/^    float   StartPosY;$/;"	m	struct:ImGuiListClipper	typeref:typename:float
StateStorage	imgui/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiStorage
StateStorage	imgui/imgui_internal.h	/^    ImGuiStorage*           StateStorage;           \/\/ Current persistent per-window storage (/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiStorage *
StaticFunc	imgui/imgui.cpp	/^    struct StaticFunc$/;"	s	function:ImGuiStorage::BuildSortByKey	file:
Stb	imgui/imgui_internal.h	/^    ImStb::STB_TexteditState Stb;                   \/\/ state for stb_textedit.h$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImStb::STB_TexteditState
StbFindState	imgui/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anon22a5596e0508
StbTexteditRow	imgui/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anon22a5596e0408
StbUndoRecord	imgui/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anon22a5596e0108
StbUndoState	imgui/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anon22a5596e0208
StencilRef	imgui/examples/imgui_impl_dx10.cpp	/^        UINT                        StencilRef;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
StencilRef	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        StencilRef;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
Step	imgui/imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper	typeref:typename:bool
Step	imgui/imgui_demo.cpp	/^        static void Step(ImGuiSizeCallbackData* data)   { float step = (float)(int)(intptr_t)dat/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
StepNo	imgui/imgui.h	/^    int     StepNo;$/;"	m	struct:ImGuiListClipper	typeref:typename:int
Storage	imgui/imgui_internal.h	/^    ImVector<int>   Storage;$/;"	m	struct:ImBoolVector	typeref:typename:ImVector<int>
Str	imgui/misc/cpp/imgui_stdlib.cpp	/^    std::string*            Str;$/;"	m	struct:InputTextCallback_UserData	typeref:typename:std::string *	file:
Strdup	imgui/imgui_demo.cpp	/^    static char* Strdup(const char *str)                             { size_t len = strlen(str) /;"	f	struct:ExampleAppConsole	typeref:typename:char *	file:
Stricmp	imgui/imgui_demo.cpp	/^    static int   Stricmp(const char* str1, const char* str2)         { int d; while ((d = touppe/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Stride	imgui/imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:int	file:
Strnicmp	imgui/imgui_demo.cpp	/^    static int   Strnicmp(const char* str1, const char* str2, int n) { int d = 0; while (n > 0 &/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Strtrim	imgui/imgui_demo.cpp	/^    static void  Strtrim(char* str)                                  { char* str_end = str + str/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Style	imgui/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStyle
StyleColorsClassic	imgui/imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsDark	imgui/imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsLight	imgui/imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleModifiers	imgui/imgui_internal.h	/^    ImVector<ImGuiStyleMod> StyleModifiers;                     \/\/ Stack for PushStyleVar()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiStyleMod>
Support, Frequently Asked Questions (FAQ)	imgui/docs/README.md	/^### Support, Frequently Asked Questions (FAQ)$/;"	S
Surface	imgui/examples/imgui_impl_vulkan.h	/^    VkSurfaceKHR        Surface;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSurfaceKHR
SurfaceFormat	imgui/examples/imgui_impl_vulkan.h	/^    VkSurfaceFormatKHR  SurfaceFormat;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSurfaceFormatKHR
Swapchain	imgui/examples/imgui_impl_vulkan.h	/^    VkSwapchainKHR      Swapchain;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:VkSwapchainKHR
TODO: What to work on next	notes.md	/^## TODO: What to work on next$/;"	s
TODO: bugs	notes.md	/^## TODO: bugs $/;"	s
TODO: optimizations (speed!!!!!)	notes.md	/^## TODO: optimizations (speed!!!!!)$/;"	s
TODO: usability	notes.md	/^## TODO: usability$/;"	s
TRT_BackgroundClipRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsClipRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsContentHeadersDesired	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsContentHeadersUsed	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsContentRowsFrozen	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsContentRowsUnfrozen	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_ColumnsRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_Count	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_HostClipRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_InnerClipRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_OuterRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TRT_WorkRect	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0203	file:
TabBarCalcMaxTabWidth	imgui/imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarCalcTabID	imgui/imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:ImU32	file:
TabBarCloseTab	imgui/imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarFindTabByID	imgui/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarLayout	imgui/imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarQueueChangeTabOrder	imgui/imgui_widgets.cpp	/^void ImGui::TabBarQueueChangeTabOrder(ImGuiTabBar* tab_bar, const ImGuiTabItem* tab, int dir)$/;"	f	class:ImGui	typeref:typename:void
TabBarRemoveTab	imgui/imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:void
TabBarScrollClamp	imgui/imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarScrollToTab	imgui/imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarScrollingButtons	imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBarTabListPopupButton	imgui/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBars	imgui/imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTabBar>
TabBorderSize	imgui/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle	typeref:typename:float
TabItemBackground	imgui/imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, /;"	f	class:ImGui	typeref:typename:void
TabItemCalcSize	imgui/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemComparerByVisibleOffset	imgui/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByVisibleOffset(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemEx	imgui/imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabItemLabelAndCloseButton	imgui/imgui_widgets.cpp	/^bool ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabRounding	imgui/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
Tabs	imgui/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVector<ImGuiTabItem>
TabsNames	imgui/imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTextBuffer
TempBuffer	imgui/imgui_internal.h	/^    char                    TempBuffer[1024*3+1];               \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext	typeref:typename:char[]
TempInputTextId	imgui/imgui_internal.h	/^    ImGuiID                 TempInputTextId;                    \/\/ Temporary text input when C/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TempInputTextIsActive	imgui/imgui_internal.h	/^    inline bool             TempInputTextIsActive(ImGuiID id) { ImGuiContext& g = *GImGui; retur/;"	f	namespace:ImGui	typeref:typename:bool
TempInputTextScalar	imgui/imgui_widgets.cpp	/^bool ImGui::TempInputTextScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType d/;"	f	class:ImGui	typeref:typename:bool
Test code	imgui/misc/freetype/README.md	/^### Test code$/;"	S
Test code Usage	imgui/misc/freetype/README.md	/^### Test code Usage$/;"	S
TexDesiredWidth	imgui/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Bu/;"	m	struct:ImFontAtlas	typeref:typename:int
TexGlyphPadding	imgui/imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture i/;"	m	struct:ImFontAtlas	typeref:typename:int
TexHeight	imgui/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build(/;"	m	struct:ImFontAtlas	typeref:typename:int
TexID	imgui/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once /;"	m	struct:ImFontAtlas	typeref:typename:ImTextureID
TexPixelsAlpha8	imgui/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned char *
TexPixelsRGBA32	imgui/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int *
TexUvScale	imgui/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	imgui/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	imgui/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2
TexWidth	imgui/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build()/;"	m	struct:ImFontAtlas	typeref:typename:int
Text	imgui/imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextA	imgui/imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ temporary UTF8 buffer for callbacks and/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextAIsValid	imgui/imgui_internal.h	/^    bool                    TextAIsValid;           \/\/ temporary UTF8 buffer is not initially /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
TextColored	imgui/imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextColoredV	imgui/imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextDisabled	imgui/imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextDisabledV	imgui/imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextEditCallback	imgui/imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEditCallbackStub	imgui/imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data) \/\/ In C++11 you are bett/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEx	imgui/imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui	typeref:typename:void
TextFilters	imgui/imgui_demo.cpp	/^            struct TextFilters { static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)/;"	s	function:ShowDemoWindowWidgets	file:
TextUnformatted	imgui/imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
TextV	imgui/imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextW	imgui/imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<ImWchar>
TextWrapPos	imgui/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ == TextWrapPosStack.back() [empty == -1/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
TextWrapPosStack	imgui/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
TextWrapped	imgui/imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextWrappedV	imgui/imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextureId	imgui/imgui.h	/^    ImTextureID     TextureId;              \/\/ User-provided texture ID. Set by user in Imfont/;"	m	struct:ImDrawCmd	typeref:typename:ImTextureID
Time	imgui/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext	typeref:typename:double
TitleBarHeight	imgui/imgui_internal.h	/^    float       TitleBarHeight() const      { ImGuiContext& g = *GImGui; return (Flags & ImGuiWi/;"	f	struct:ImGuiWindow	typeref:typename:float
TitleBarRect	imgui/imgui_internal.h	/^    ImRect      TitleBarRect() const        { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos./;"	f	struct:ImGuiWindow	typeref:typename:ImRect
TooltipOverrideCount	imgui/imgui_internal.h	/^    int                     TooltipOverrideCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
TotalIdxCount	imgui/imgui.h	/^    int             TotalIdxCount;          \/\/ For convenience, sum of all ImDrawList's IdxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalVtxCount	imgui/imgui.h	/^    int             TotalVtxCount;          \/\/ For convenience, sum of all ImDrawList's VtxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TouchExtraPadding	imgui/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based sy/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Translate	imgui/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; /;"	f	struct:ImRect	typeref:typename:void
TranslateX	imgui/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect	typeref:typename:void
TranslateY	imgui/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect	typeref:typename:void
TreeAdvanceToLabelPos	imgui/imgui.h	/^    static inline void  TreeAdvanceToLabelPos()               { SetCursorPosX(GetCursorPosX() + /;"	f	namespace:ImGui	typeref:typename:void
TreeDepth	imgui/imgui_internal.h	/^    int                     TreeDepth;              \/\/ Current tree depth.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
TreeJumpToParentOnPopMask	imgui/imgui_internal.h	/^    ImU32                   TreeJumpToParentOnPopMask; \/\/ Store a copy of !g.NavIdIsAlive for /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
TreeNode	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehavior	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehaviorIsOpen	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	imgui/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreePop	imgui/imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui	typeref:typename:void
TreePush	imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
TreePush	imgui/imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
TreePushOverrideID	imgui/imgui_widgets.cpp	/^void ImGui::TreePushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Type	imgui/imgui.cpp	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiStyleVarInfo	typeref:typename:ImGuiDataType	file:
TypeHash	imgui/imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName)$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:ImGuiID
TypeName	imgui/imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed character/;"	m	struct:ImGuiSettingsHandler	typeref:typename:const char *
U0	imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
U1	imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
UILaunchStoryboardName	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UILaunchStoryboardName<\/key>$/;"	k
UIMainStoryboardFile	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIMainStoryboardFile<\/key>$/;"	k
UIRequiredDeviceCapabilities	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIRequiredDeviceCapabilities<\/key>$/;"	k
UIRequiresFullScreen	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIRequiresFullScreen<\/key>$/;"	k
UIStatusBarHidden	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UIStatusBarHidden<\/key>$/;"	k
UISupportedInterfaceOrientations	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UISupportedInterfaceOrientations<\/key>$/;"	k
UISupportedInterfaceOrientations~ipad	imgui/examples/example_apple_metal/iOS/Info-iOS.plist	/^	<key>UISupportedInterfaceOrientations~ipad<\/key>$/;"	k
UNAME_S	imgui/examples/example_emscripten/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	imgui/examples/example_glfw_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	imgui/examples/example_glfw_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	imgui/examples/example_glut_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	imgui/examples/example_null/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	imgui/examples/example_sdl_opengl2/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	imgui/examples/example_sdl_opengl3/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UNAME_S	makefile	/^UNAME_S := $(shell uname -s)$/;"	m
USE_FILE_SYSTEM	imgui/examples/example_emscripten/Makefile	/^USE_FILE_SYSTEM ?= 0$/;"	m
USYNERGY_CLIPBOARD_FORMAT_BITMAP	imgui/examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_BITMAP				= 1,			\/* Bitmap format, BMP 24\/32bpp, BI_RGB *\/$/;"	e	enum:uSynergyClipboardFormat
USYNERGY_CLIPBOARD_FORMAT_HTML	imgui/examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_HTML					= 2,			\/* HTML format, HTML fragment, UTF-8, newline is LF /;"	e	enum:uSynergyClipboardFormat
USYNERGY_CLIPBOARD_FORMAT_TEXT	imgui/examples/libs/usynergy/uSynergy.h	/^	USYNERGY_CLIPBOARD_FORMAT_TEXT					= 0,			\/* Text format, UTF-8, newline is LF *\/$/;"	e	enum:uSynergyClipboardFormat
USYNERGY_FALSE	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_FALSE	/;"	d
USYNERGY_IDLE_TIMEOUT	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_IDLE_TIMEOUT	/;"	d
USYNERGY_IS_PACKET	imgui/examples/libs/usynergy/uSynergy.c	/^#define USYNERGY_IS_PACKET(/;"	d	file:
USYNERGY_MODIFIER_ALT	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_ALT	/;"	d
USYNERGY_MODIFIER_ALT_GR	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_ALT_GR	/;"	d
USYNERGY_MODIFIER_CAPSLOCK	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_CAPSLOCK	/;"	d
USYNERGY_MODIFIER_CTRL	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_CTRL	/;"	d
USYNERGY_MODIFIER_LEVEL5LOCK	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_LEVEL5LOCK	/;"	d
USYNERGY_MODIFIER_META	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_META	/;"	d
USYNERGY_MODIFIER_NUMLOCK	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_NUMLOCK	/;"	d
USYNERGY_MODIFIER_SCROLLOCK	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_SCROLLOCK	/;"	d
USYNERGY_MODIFIER_SHIFT	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_SHIFT	/;"	d
USYNERGY_MODIFIER_WIN	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_MODIFIER_WIN	/;"	d
USYNERGY_NUM_JOYSTICKS	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_NUM_JOYSTICKS	/;"	d
USYNERGY_PROTOCOL_MAJOR	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_PROTOCOL_MAJOR	/;"	d
USYNERGY_PROTOCOL_MINOR	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_PROTOCOL_MINOR	/;"	d
USYNERGY_RECEIVE_BUFFER_SIZE	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_RECEIVE_BUFFER_SIZE	/;"	d
USYNERGY_REPLY_BUFFER_SIZE	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_REPLY_BUFFER_SIZE	/;"	d
USYNERGY_TRACE_BUFFER_SIZE	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_TRACE_BUFFER_SIZE	/;"	d
USYNERGY_TRUE	imgui/examples/libs/usynergy/uSynergy.h	/^#define				USYNERGY_TRUE	/;"	d
Unindent	imgui/imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
UnpackAccumulativeOffsetsIntoRanges	imgui/imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_of/;"	f	typeref:typename:void	file:
UnpackBoolVectorToFlatIndexList	imgui/imgui_draw.cpp	/^static void UnpackBoolVectorToFlatIndexList(const ImBoolVector* in, ImVector<int>* out)$/;"	f	typeref:typename:void	file:
Upcoming Changes	imgui/docs/README.md	/^### Upcoming Changes$/;"	S
Update	imgui/imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(int count, float spacing, bool clear)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
UpdateClipRect	imgui/imgui_draw.cpp	/^void ImDrawList::UpdateClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
UpdateDebugToolItemPicker	imgui/imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker()$/;"	f	class:ImGui	typeref:typename:void
UpdateHoveredWindowAndCaptureFlags	imgui/imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui	typeref:typename:void
UpdateManualResize	imgui/imgui.cpp	/^static bool ImGui::UpdateManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int* bor/;"	f	class:ImGui	typeref:typename:bool	file:
UpdateMouseInputs	imgui/imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseMovingWindowEndFrame	imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseMovingWindowNewFrame	imgui/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseWheel	imgui/imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
UpdateTextureID	imgui/imgui_draw.cpp	/^void ImDrawList::UpdateTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
UpdateWindowParentAndRootLinks	imgui/imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
Usage	imgui/docs/README.md	/^### Usage$/;"	S
Usage	imgui/misc/freetype/README.md	/^### Usage$/;"	S
UsedChars	imgui/imgui.h	/^    ImVector<ImU32> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=u/;"	m	struct:ImFontGlyphRangesBuilder	typeref:typename:ImVector<ImU32>
UserCallback	imgui/imgui.h	/^    ImDrawCallback  UserCallback;           \/\/ If != NULL, call the function instead of render/;"	m	struct:ImDrawCmd	typeref:typename:ImDrawCallback
UserCallback	imgui/imgui_internal.h	/^    ImGuiInputTextCallback  UserCallback;           \/\/ "$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextCallback
UserCallbackData	imgui/imgui.h	/^    void*           UserCallbackData;       \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd	typeref:typename:void *
UserCallbackData	imgui/imgui_internal.h	/^    void*                   UserCallbackData;       \/\/ "$/;"	m	struct:ImGuiInputTextState	typeref:typename:void *
UserData	imgui/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:void *
UserData	imgui/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data f/;"	m	struct:ImGuiIO	typeref:typename:void *
UserData	imgui/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:void *
UserData	imgui/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void *
UserFlags	imgui/imgui_internal.h	/^    ImGuiInputTextFlags     UserFlags;              \/\/ Temporarily set while we call user's ca/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextFlags
UserFlags	imgui/misc/freetype/imgui_freetype.cpp	/^        unsigned int    UserFlags;          \/\/ = ImFontConfig::RasterizerFlags$/;"	m	struct:__anon76bbacac0111::FreeTypeFont	typeref:typename:unsigned int	file:
V0	imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
V1	imgui/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
VERTEX_CONSTANT_BUFFER	imgui/examples/imgui_impl_dx10.cpp	/^struct VERTEX_CONSTANT_BUFFER$/;"	s	file:
VERTEX_CONSTANT_BUFFER	imgui/examples/imgui_impl_dx11.cpp	/^struct VERTEX_CONSTANT_BUFFER$/;"	s	file:
VERTEX_CONSTANT_BUFFER	imgui/examples/imgui_impl_dx12.cpp	/^struct VERTEX_CONSTANT_BUFFER$/;"	s	file:
VS	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10VertexShader*         VS;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10VertexShader *	file:
VS	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11VertexShader*         VS;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11VertexShader *	file:
VSConstantBuffer	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10Buffer ***	file:
VSConstantBuffer	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11Buffer ***	file:
VSInstances	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11ClassInstance         *PSInstances[256], *VSInstances[256], *GSInstances[256];   \//;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11ClassInstance * [256]* [256]	file:
VSInstancesCount	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        PSInstancesCount, VSInstancesCount, GSInstancesCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
VSliderFloat	imgui/imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_m/;"	f	class:ImGui	typeref:typename:bool
VSliderInt	imgui/imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, cons/;"	f	class:ImGui	typeref:typename:bool
VSliderScalar	imgui/imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* /;"	f	class:ImGui	typeref:typename:bool
Valid	imgui/imgui.h	/^    bool            Valid;                  \/\/ Only valid after Render() is called and before /;"	m	struct:ImDrawData	typeref:typename:bool
Value	imgui/imgui.h	/^    ImVec4              Value;$/;"	m	struct:ImColor	typeref:typename:ImVec4
Value	imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui	typeref:typename:void
Value	imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui	typeref:typename:void
Value	imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui	typeref:typename:void
Value	imgui/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui	typeref:typename:void
Values	imgui/imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:const float *	file:
VarIdx	imgui/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod	typeref:typename:ImGuiStyleVar
VertexBuffer	imgui/examples/imgui_impl_dx10.cpp	/^        ID3D10Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:ID3D10Buffer **	file:
VertexBuffer	imgui/examples/imgui_impl_dx11.cpp	/^        ID3D11Buffer*               IndexBuffer, *VertexBuffer, *VSConstantBuffer;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:ID3D11Buffer **	file:
VertexBuffer	imgui/examples/imgui_impl_dx12.cpp	/^    ID3D12Resource*     VertexBuffer;$/;"	m	struct:FrameResources	typeref:typename:ID3D12Resource *	file:
VertexBuffer	imgui/examples/imgui_impl_vulkan.cpp	/^    VkBuffer            VertexBuffer;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkBuffer	file:
VertexBufferMemory	imgui/examples/imgui_impl_vulkan.cpp	/^    VkDeviceMemory      VertexBufferMemory;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkDeviceMemory	file:
VertexBufferOffset	imgui/examples/imgui_impl_dx10.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
VertexBufferOffset	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
VertexBufferSize	imgui/examples/imgui_impl_dx12.cpp	/^    int                 VertexBufferSize;$/;"	m	struct:FrameResources	typeref:typename:int	file:
VertexBufferSize	imgui/examples/imgui_impl_vulkan.cpp	/^    VkDeviceSize        VertexBufferSize;$/;"	m	struct:ImGui_ImplVulkanH_FrameRenderBuffers	typeref:typename:VkDeviceSize	file:
VertexBufferStride	imgui/examples/imgui_impl_dx10.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
VertexBufferStride	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        IndexBufferOffset, VertexBufferStride, VertexBufferOffset;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
ViewController	imgui/examples/example_apple_metal/Shared/ViewController.h	/^@interface ViewController : NSViewController$/;"	i
ViewController	imgui/examples/example_apple_metal/Shared/ViewController.h	/^@interface ViewController : UIViewController$/;"	i
ViewController	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^@implementation ViewController$/;"	I
ViewController	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^@interface ViewController ()$/;"	i	category:nonatomic
Viewports	imgui/examples/imgui_impl_dx10.cpp	/^        D3D10_VIEWPORT              Viewports[D3D10_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PI/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:D3D10_VIEWPORT[]	file:
Viewports	imgui/examples/imgui_impl_dx11.cpp	/^        D3D11_VIEWPORT              Viewports[D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PI/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:D3D11_VIEWPORT[]	file:
ViewportsCount	imgui/examples/imgui_impl_dx10.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX10_RenderDrawData::BACKUP_DX10_STATE	typeref:typename:UINT	file:
ViewportsCount	imgui/examples/imgui_impl_dx11.cpp	/^        UINT                        ScissorRectsCount, ViewportsCount;$/;"	m	struct:ImGui_ImplDX11_RenderDrawData::BACKUP_DX11_STATE	typeref:typename:UINT	file:
VisibleTabId	imgui/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
VisibleTabWasSubmitted	imgui/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
VtxBuffer	imgui/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawVert>
VtxOffset	imgui/imgui.h	/^    unsigned int    VtxOffset;              \/\/ Start offset in vertex buffer. Pre-1.71 or with/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
WIN32_LEAN_AND_MEAN	imgui/examples/imgui_impl_win32.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	imgui/examples/libs/gl3w/GL/gl3w.c	/^#define WIN32_LEAN_AND_MEAN /;"	d	file:
WIN32_LEAN_AND_MEAN	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WIN32_LEAN_AND_MEAN	imgui/imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER	imgui/imgui.cpp	/^static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 2.00f;    \/\/ Lock scrolled windo/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	imgui/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS	imgui/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_HALF_THICKNESS = 4.0f;     \/\/ Extend outside and /;"	v	typeref:typename:const float	file:
WINGDIAPI	imgui/examples/imgui_impl_opengl2.cpp	/^#define WINGDIAPI /;"	d	file:
WINGDIAPI	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define WINGDIAPI /;"	d
WM_MOUSEHWHEEL	imgui/examples/imgui_impl_win32.cpp	/^#define WM_MOUSEHWHEEL /;"	d	file:
WRT_Content	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_ContentRegionRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_Count	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_InnerClipRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_InnerRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_OuterRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_OuterRectClipped	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WRT_WorkRect	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anonfb6a37db0103	file:
WaitForLastSubmittedFrame	imgui/examples/example_win32_directx12/main.cpp	/^void WaitForLastSubmittedFrame()$/;"	f	typeref:typename:void
WaitForNextFrameResources	imgui/examples/example_win32_directx12/main.cpp	/^FrameContext* WaitForNextFrameResources()$/;"	f	typeref:typename:FrameContext *
WantCaptureKeyboard	imgui/imgui.h	/^    bool        WantCaptureKeyboard;            \/\/ When io.WantCaptureKeyboard is true, imgui /;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureKeyboardNextFrame	imgui/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouse	imgui/imgui.h	/^    bool        WantCaptureMouse;               \/\/ When io.WantCaptureMouse is true, imgui wil/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouseNextFrame	imgui/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture via Captur/;"	m	struct:ImGuiContext	typeref:typename:int
WantClose	imgui/imgui_demo.cpp	/^    bool        WantClose;      \/\/ Set when the document$/;"	m	struct:MyDocument	typeref:typename:bool	file:
WantCollapseToggle	imgui/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WantLayout	imgui/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WantSaveIniSettings	imgui/imgui.h	/^    bool        WantSaveIniSettings;            \/\/ When manual .ini load\/save is active (io.I/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSetMousePos	imgui/imgui.h	/^    bool        WantSetMousePos;                \/\/ MousePos has been altered, back-end should /;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInput	imgui/imgui.h	/^    bool        WantTextInput;                  \/\/ Mobile\/console: when io.WantTextInput is t/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInputNextFrame	imgui/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WasActive	imgui/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WheelingWindow	imgui/imgui_internal.h	/^    ImGuiWindow*            WheelingWindow;                     \/\/ Track the window we started/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
WheelingWindowRefMousePos	imgui/imgui_internal.h	/^    ImVec2                  WheelingWindowRefMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindowTimer	imgui/imgui_internal.h	/^    float                   WheelingWindowTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
Width	imgui/examples/imgui_impl_vulkan.h	/^    int                 Width;$/;"	m	struct:ImGui_ImplVulkanH_Window	typeref:typename:int
Width	imgui/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Width	imgui/imgui_internal.h	/^    float                       Width;          \/\/ Set by SetNextItemWidth()$/;"	m	struct:ImGuiNextItemData	typeref:typename:float
Width	imgui/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem	typeref:typename:float
Width	imgui/imgui_internal.h	/^    float           Width;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Width	imgui/imgui_internal.h	/^    float       Width, NextWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:float
Width	imgui/misc/freetype/imgui_freetype.cpp	/^        int         Width;              \/\/ Glyph's width in pixels.$/;"	m	struct:__anon76bbacac0111::GlyphInfo	typeref:typename:int	file:
Window	imgui.ini	/^[Window][Dear ImGui Demo]$/;"	s
Window	imgui.ini	/^[Window][Debug##Default]$/;"	s
Window	imgui.ini	/^[Window][Hello, world!]$/;"	s
Window	imgui.ini	/^[Window][Main Window]$/;"	s
Window	imgui.ini	/^[Window][Schedule]$/;"	s
Window	imgui.ini	/^[Window][file menu]$/;"	s
Window	imgui.ini	/^[Window][image menu]$/;"	s
Window	imgui.ini	/^[Window][img_test]$/;"	s
Window	imgui/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if u/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Window	imgui/imgui_internal.h	/^    ImGuiWindow*    Window;             \/\/ Best candidate window$/;"	m	struct:ImGuiNavMoveResult	typeref:typename:ImGuiWindow *
WindowBorderSize	imgui/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally s/;"	m	struct:ImGuiStyle	typeref:typename:float
WindowBorderSize	imgui/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the t/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowMenuButtonPosition	imgui/imgui.h	/^    ImGuiDir    WindowMenuButtonPosition;   \/\/ Side of the collapsing\/docking button in the t/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
WindowMinSize	imgui/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	imgui/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	imgui/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
WindowRounding	imgui/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f /;"	m	struct:ImGuiStyle	typeref:typename:float
WindowRounding	imgui/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowSettingsHandler_ReadLine	imgui/imgui.cpp	/^static void WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, co/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadOpen	imgui/imgui.cpp	/^static void* WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* na/;"	f	typeref:typename:void *	file:
WindowSettingsHandler_WriteAll	imgui/imgui.cpp	/^static void WindowSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImG/;"	f	typeref:typename:void	file:
WindowTitleAlign	imgui/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Windows	imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsActiveCount	imgui/imgui_internal.h	/^    int                     WindowsActiveCount;                 \/\/ Number of unique windows su/;"	m	struct:ImGuiContext	typeref:typename:int
WindowsById	imgui/imgui_internal.h	/^    ImGuiStorage            WindowsById;                        \/\/ Map window's ImGuiID to ImG/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStorage
WindowsFocusOrder	imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Windows, sorted in focus or/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsTempSortBuffer	imgui/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsTempSortBuffer;              \/\/ Temporary buffer used in En/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WithinEndChild	imgui/imgui_internal.h	/^    bool                    WithinEndChild;                     \/\/ Set within EndChild()$/;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScope	imgui/imgui_internal.h	/^    bool                    WithinFrameScope;                   \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScopeWithImplicitWindow	imgui/imgui_internal.h	/^    bool                    WithinFrameScopeWithImplicitWindow; \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WndProc	imgui/examples/example_win32_directx10/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	imgui/examples/example_win32_directx11/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	imgui/examples/example_win32_directx12/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WndProc	imgui/examples/example_win32_directx9/main.cpp	/^LRESULT WINAPI WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)$/;"	f	typeref:typename:LRESULT WINAPI
WorkRect	imgui/imgui_internal.h	/^    ImRect                  WorkRect;                           \/\/ Cover the whole scrolling r/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
WriteAccessed	imgui/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget/;"	m	struct:ImGuiWindow	typeref:typename:bool
WriteAllFn	imgui/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer*/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,ImGuiTextBuffer * out_buf)
X	imgui/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
X0	imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
X1	imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y	imgui/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Y0	imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y1	imgui/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
[Return to Index](#index)	imgui/docs/FAQ.md	/^##### [Return to Index](#index)$/;"	T
_CRT_SECURE_NO_WARNINGS	imgui/examples/imgui_impl_opengl3.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/imgui_demo.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	imgui/misc/fonts/binary_to_compressed_c.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_Channels	imgui/imgui.h	/^    ImVector<ImDrawChannel>     _Channels;   \/\/ Draw channels (not resized down so _Count migh/;"	m	struct:ImDrawListSplitter	typeref:typename:ImVector<ImDrawChannel>
_ClipRectStack	imgui/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec4>
_CmdBuffer	imgui/imgui.h	/^    ImVector<ImDrawCmd>         _CmdBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawCmd>
_Count	imgui/imgui.h	/^    int                         _Count;      \/\/ Number of active channels (1+)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Current	imgui/imgui.h	/^    int                         _Current;    \/\/ Current channel number (0)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Data	imgui/imgui.h	/^    const ImDrawListSharedData* _Data;          \/\/ Pointer to shared draw data (you can use Im/;"	m	struct:ImDrawList	typeref:typename:const ImDrawListSharedData *
_IdxBuffer	imgui/imgui.h	/^    ImVector<ImDrawIdx>         _IdxBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawIdx>
_IdxWritePtr	imgui/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawIdx *
_OwnerName	imgui/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debuggin/;"	m	struct:ImDrawList	typeref:typename:const char *
_Path	imgui/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec2>
_Splitter	imgui/imgui.h	/^    ImDrawListSplitter      _Splitter;          \/\/ [Internal] for channels api$/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSplitter
_TextureIdStack	imgui/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImTextureID>
_VtxCurrentIdx	imgui/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] Generally == VtxBuffer.Size unle/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxCurrentOffset	imgui/imgui.h	/^    unsigned int            _VtxCurrentOffset;  \/\/ [Internal] Always 0 unless 'Flags & ImDrawL/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxWritePtr	imgui/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawVert *
_WIN32	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^ #define _WIN32$/;"	d
__STB_INCLUDE_STB_TRUETYPE_H__	imgui/imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__anon1345ae40010a	imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	u	struct:ImGuiStorage::ImGuiStoragePair
__anon1561e7070108	imgui/examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	s
__anon1561e7070208	imgui/examples/libs/usynergy/uSynergy.h	/^{$/;"	s
__anon22a5596e0108	imgui/imstb_textedit.h	/^{$/;"	s
__anon22a5596e0208	imgui/imstb_textedit.h	/^{$/;"	s
__anon22a5596e0308	imgui/imstb_textedit.h	/^{$/;"	s
__anon22a5596e0408	imgui/imstb_textedit.h	/^{$/;"	s
__anon22a5596e0508	imgui/imstb_textedit.h	/^{$/;"	s
__anon23d609b20108	imgui/examples/libs/gl3w/GL/gl3w.c	/^static struct {$/;"	s	file:
__anon3b5b11db0102	main.cpp	/^  glbinding::initialize([](const char *name) {$/;"	f	function:main	file:
__anon6baf93470102	imgui/examples/example_sdl_opengl3/main.cpp	/^    glbinding::initialize([](const char* name) { return (glbinding::ProcAddress)SDL_GL_GetProcAd/;"	f	function:main	file:
__anon76bbacac0111	imgui/misc/freetype/imgui_freetype.cpp	/^{$/;"	n	file:
__anonbeb7bd740102	imgui/examples/example_glfw_opengl3/main.cpp	/^    glbinding::initialize([](const char* name) { return (glbinding::ProcAddress)glfwGetProcAddre/;"	f	function:main	file:
__anond298c5900103	imgui/imstb_rectpack.h	/^{$/;"	g
__anond298c5900203	imgui/imstb_rectpack.h	/^{$/;"	g
__anond298c5900308	imgui/imstb_rectpack.h	/^{$/;"	s
__anond8e796fc010a	imgui/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	u	struct:ImGuiStyleMod
__anonea0503650108	imgui/imstb_truetype.h	/^{$/;"	s
__anonea0503650208	imgui/imstb_truetype.h	/^{$/;"	s
__anonea0503650308	imgui/imstb_truetype.h	/^{$/;"	s
__anonea0503650408	imgui/imstb_truetype.h	/^{$/;"	s
__anonea0503650508	imgui/imstb_truetype.h	/^{$/;"	s
__anonea0503650603	imgui/imstb_truetype.h	/^   enum {$/;"	g
__anonea0503650708	imgui/imstb_truetype.h	/^   {$/;"	s
__anonea0503650808	imgui/imstb_truetype.h	/^{$/;"	s
__anonea0503650903	imgui/imstb_truetype.h	/^enum { \/\/ platformID$/;"	g
__anonea0503650a03	imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_UNICODE$/;"	g
__anonea0503650b03	imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MICROSOFT$/;"	g
__anonea0503650c03	imgui/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MAC; same as Script Manager codes$/;"	g
__anonea0503650d03	imgui/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MICROSOFT; same as LCID...$/;"	g
__anonea0503650e03	imgui/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MAC$/;"	g
__anonea0503650f08	imgui/imstb_truetype.h	/^{$/;"	s
__anonea0503651008	imgui/imstb_truetype.h	/^{$/;"	s
__anonea0503651108	imgui/imstb_truetype.h	/^{$/;"	s
__anonea0503651208	imgui/imstb_truetype.h	/^{$/;"	s
__anoned97ed650103	sqlite_routines.h	/^typedef enum{$/;"	g
__anonfb6a37db0103	imgui/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	g	function:ImGui::ShowMetricsWindow	file:
__anonfb6a37db0203	imgui/imgui.cpp	/^    enum { TRT_OuterRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_BackgroundClipR/;"	g	function:ImGui::ShowMetricsWindow	file:
__gl3w_h_	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define __gl3w_h_$/;"	d
__gl_h_	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define __gl_h_$/;"	d
__glcorearb_h_	imgui/examples/libs/gl3w/GL/glcorearb.h	/^#define __glcorearb_h_$/;"	d
__glsl_shader_frag_spv	imgui/examples/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_frag_spv[] =$/;"	v	typeref:typename:uint32_t[]	file:
__glsl_shader_vert_spv	imgui/examples/imgui_impl_vulkan.cpp	/^static uint32_t __glsl_shader_vert_spv[] =$/;"	v	typeref:typename:uint32_t[]	file:
_glfw3_h_	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^#define _glfw3_h_$/;"	d
_glfw3_native_h_	imgui/examples/libs/glfw/include/GLFW/glfw3native.h	/^#define _glfw3_native_h_$/;"	d
_grow_capacity	imgui/imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Cap/;"	f	struct:ImVector	typeref:typename:int
_renderPipelineStateForFramebufferDescriptor:device:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
_windowResizeEastWestCursor	imgui/examples/imgui_impl_osx.mm	/^+ (id)_windowResizeEastWestCursor;$/;"	c	interface:NSCursor	category:id
_windowResizeNorthEastSouthWestCursor	imgui/examples/imgui_impl_osx.mm	/^+ (id)_windowResizeNorthEastSouthWestCursor;$/;"	c	interface:NSCursor	category:id
_windowResizeNorthSouthCursor	imgui/examples/imgui_impl_osx.mm	/^+ (id)_windowResizeNorthSouthCursor;$/;"	c	interface:NSCursor	category:id
acceptsFirstResponder	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleView
active_head	imgui/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
align	imgui/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context	typeref:typename:int
all	imgui/examples/example_emscripten/Makefile	/^all: $(EXE)$/;"	t
all	imgui/examples/example_glfw_metal/Makefile	/^all: $(EXE)$/;"	t
all	imgui/examples/example_glfw_opengl2/Makefile	/^all: $(EXE)$/;"	t
all	imgui/examples/example_glfw_opengl3/Makefile	/^all: $(EXE)$/;"	t
all	imgui/examples/example_glut_opengl2/Makefile	/^all: $(EXE)$/;"	t
all	imgui/examples/example_null/Makefile	/^all: $(EXE)$/;"	t
all	imgui/examples/example_sdl_opengl2/Makefile	/^all: $(EXE)$/;"	t
all	imgui/examples/example_sdl_opengl3/Makefile	/^all: $(EXE)$/;"	t
all	makefile	/^all: $(EXE)$/;"	t
alloc_chunk	imgui/imgui_internal.h	/^    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = ((HDR_SZ + sz) + 3u) & ~3u; in/;"	f	struct:ImChunkStream	typeref:typename:T *
alloca	imgui/imgui_draw.cpp	/^#define alloca /;"	d	file:
animationTimer	imgui/examples/example_apple_opengl2/main.mm	/^    NSTimer*    animationTimer;$/;"	E	interface:ImGuiExampleView
animationTimerFired:	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleView
append	imgui/imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendf	imgui/imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendfv	imgui/imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
applicationDidFinishLaunching:	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleAppDelegate
applicationShouldTerminateAfterLastWindowClosed:	imgui/examples/example_apple_metal/Shared/AppDelegate.m	/^- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication *)sender {$/;"	m	implementation:AppDelegate
applicationShouldTerminateAfterLastWindowClosed:	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleAppDelegate
array_of_unicode_codepoints	imgui/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode co/;"	m	struct:__anonea0503650508	typeref:typename:int *
b	imgui/imgui.h	/^        const char*     b;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
back	imgui/imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:T &
back	imgui/imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:const T &
background_id	structs.h	/^  uint64_t background_id;$/;"	m	struct:song	typeref:typename:uint64_t
baseline_y_delta	imgui/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anon22a5596e0408	typeref:typename:float
becomeFirstResponder	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleView
begin	imgui/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; /;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
begin	imgui/imgui.h	/^    inline T*           begin()                             { return Data; }$/;"	f	struct:ImVector	typeref:typename:T *
begin	imgui/imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector	typeref:typename:const T *
begin	imgui/imgui_internal.h	/^    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return /;"	f	struct:ImChunkStream	typeref:typename:T *
binary_to_compressed_c	imgui/misc/fonts/binary_to_compressed_c.cpp	/^bool binary_to_compressed_c(const char* filename, const char* symbol, bool use_base85_encoding, /;"	f	typeref:typename:bool
blue	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* blue;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned short *
blueBits	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    int blueBits;$/;"	m	struct:GLFWvidmode	typeref:typename:int
body	structs.h	/^  std::string body; \/\/ body of the song, verse, chorus, etc.$/;"	m	struct:song	typeref:typename:std::string
bottom_y	imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anonea0503651108	typeref:typename:int
bounds	imgui/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anonea0503650f08	typeref:typename:int
buffer	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, strong) id<MTLBuffer> buffer;$/;"	p	interface:MetalBuffer
bufferCache	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, strong) NSMutableArray<MetalBuffer *> *bufferCache;$/;"	p	interface:MetalContext
bundle	imgui/examples/libs/gl3w/GL/gl3w.c	/^CFBundleRef bundle;$/;"	v	typeref:typename:CFBundleRef
bundleURL	imgui/examples/libs/gl3w/GL/gl3w.c	/^CFURLRef bundleURL;$/;"	v	typeref:typename:CFURLRef
c_str	imgui/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
callback	sqlite_routines.cpp	/^static int callback(void *notUsed, int argc, char **argv, char **colname) {$/;"	f	typeref:typename:int	file:
canvas	imgui/examples/example_emscripten/shell_minimal.html	/^    <canvas class="emscripten" id="canvas" oncontextmenu="event.preventDefault()"><\/canvas>$/;"	I
capacity	imgui/imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector	typeref:typename:int
cff	imgui/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
char_storage	imgui/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anon22a5596e0108	typeref:typename:int
chardata_for_range	imgui/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anonea0503650508	typeref:typename:stbtt_packedchar *
charstrings	imgui/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
checkCompileErrors	shader_class.h	/^    void checkCompileErrors(unsigned int shader, std::string type)$/;"	f	class:Shader	typeref:typename:void
check_vk_result	imgui/examples/example_glfw_vulkan/main.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
check_vk_result	imgui/examples/example_sdl_vulkan/main.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
check_vk_result	imgui/examples/imgui_impl_vulkan.cpp	/^static void check_vk_result(VkResult err)$/;"	f	typeref:typename:void	file:
chunk_size	imgui/imgui_internal.h	/^    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }$/;"	f	struct:ImChunkStream	typeref:typename:int
clean	imgui/examples/example_emscripten/Makefile	/^clean:$/;"	t
clean	imgui/examples/example_glfw_metal/Makefile	/^clean:$/;"	t
clean	imgui/examples/example_glfw_opengl2/Makefile	/^clean:$/;"	t
clean	imgui/examples/example_glfw_opengl3/Makefile	/^clean:$/;"	t
clean	imgui/examples/example_glut_opengl2/Makefile	/^clean:$/;"	t
clean	imgui/examples/example_null/Makefile	/^clean:$/;"	t
clean	imgui/examples/example_sdl_opengl2/Makefile	/^clean:$/;"	t
clean	imgui/examples/example_sdl_opengl3/Makefile	/^clean:$/;"	t
clean	makefile	/^clean:$/;"	t
clear	imgui/imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; I/;"	f	struct:ImVector	typeref:typename:void
clear	imgui/imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
clear	imgui/imgui_internal.h	/^    void    clear()                     { Buf.clear(); }$/;"	f	struct:ImChunkStream	typeref:typename:void
clear_color	imgui/examples/example_glut_opengl2/main.cpp	/^static ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);$/;"	v	typeref:typename:ImVec4	file:
close_libgl	imgui/examples/libs/gl3w/GL/gl3w.c	/^static void close_libgl(void)$/;"	f	typeref:typename:void	file:
col	imgui/examples/imgui_impl_allegro5.cpp	/^    ALLEGRO_COLOR col;$/;"	m	struct:ImDrawVertAllegro	typeref:typename:ALLEGRO_COLOR	file:
col	imgui/examples/imgui_impl_dx9.cpp	/^    D3DCOLOR col;$/;"	m	struct:CUSTOMVERTEX	typeref:typename:D3DCOLOR	file:
col	imgui/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert	typeref:typename:ImU32
colorPixelFormat	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, assign) MTLPixelFormat colorPixelFormat;$/;"	p	interface:FramebufferDescriptor
commandQueue	imgui/examples/example_apple_metal/Shared/Renderer.mm	/^@property (nonatomic, strong) id <MTLCommandQueue> commandQueue;$/;"	p	interface:Renderer
const_iterator	imgui/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector	typeref:typename:const value_type *
contains	imgui/imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:bool
copyWithZone:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
copyright_info	structs.h	/^  std::string copyright_info;$/;"	m	struct:song	typeref:typename:std::string
copyrightbuf	main.cpp	/^std::string copyrightbuf(copyrightbuflen, '\\0' );$/;"	v	typeref:typename:std::string
copyrightbuflen	main.cpp	/^const int copyrightbuflen = 100;$/;"	v	typeref:typename:const int
curr_dir	fileMenu.cpp	/^static std::string curr_dir = "";$/;"	v	typeref:typename:std::string	file:
current_frame	imgui/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
cursor	imgui/imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anon22a5596e0308	typeref:typename:int
cursor	imgui/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anonea0503650108	typeref:typename:int
cursor_at_end_of_line	imgui/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anon22a5596e0308	typeref:typename:unsigned char
cx	imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonea0503650708	typeref:typename:stbtt_vertex_type
cx1	imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonea0503650708	typeref:typename:stbtt_vertex_type
cy	imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonea0503650708	typeref:typename:stbtt_vertex_type
cy1	imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonea0503650708	typeref:typename:stbtt_vertex_type
data	imgui/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo	typeref:typename:unsigned char *
data	imgui/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anonea0503650108	typeref:typename:unsigned char *
database design (SQLITE)	notes.md	/^## database design (SQLITE)$/;"	s
datamat	structs.h	/^  cv::Mat datamat;$/;"	m	struct:image	typeref:typename:cv::Mat
db_error	sqlite_routines.h	/^} db_error;$/;"	t	typeref:enum:__anoned97ed650103
db_name	main.cpp	/^char db_name[] = "outtest.db";$/;"	v	typeref:typename:char[]
db_name	sqlite_routines.cpp	/^static const char * db_name = "outtest.db";$/;"	v	typeref:typename:const char *	file:
dealloc	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleAppDelegate
dealloc	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleView
dear imgui	imgui/docs/README.md	/^dear imgui$/;"	c
debug_report	imgui/examples/example_glfw_vulkan/main.cpp	/^static VKAPI_ATTR VkBool32 VKAPI_CALL debug_report(VkDebugReportFlagsEXT flags, VkDebugReportObj/;"	f	typeref:typename:VKAPI_ATTR VkBool32 VKAPI_CALL	file:
debug_report	imgui/examples/example_sdl_vulkan/main.cpp	/^static VKAPI_ATTR VkBool32 VKAPI_CALL debug_report(VkDebugReportFlagsEXT flags, VkDebugReportObj/;"	f	typeref:typename:VKAPI_ATTR VkBool32 VKAPI_CALL	file:
deleteSong	sqlite_routines.cpp	/^db_error deleteSong(char*fname, std::string song_name){$/;"	f	typeref:typename:db_error
delete_length	imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anon22a5596e0108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
depthPixelFormat	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, assign) MTLPixelFormat depthPixelFormat;$/;"	p	interface:FramebufferDescriptor
depthStencilState	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, strong) id<MTLDepthStencilState> depthStencilState;$/;"	p	interface:MetalContext
dequeueReusableBufferOfLength:device:	imgui/examples/imgui_impl_metal.mm	/^- (MetalBuffer *)dequeueReusableBufferOfLength:(NSUInteger)length device:(id<MTLDevice>)device;$/;"	m	interface:MetalContext
dequeueReusableBufferOfLength:device:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
direction	imgui/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
direction	imgui/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
drawInMTKView:	imgui/examples/example_apple_metal/Shared/Renderer.mm	/^{$/;"	m	implementation:Renderer
drawRect:	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleView
drawTextOnImage	misc-util.h	/^static void drawTextOnImage(Cairo::RefPtr<Cairo::Context> cr, std::string text, double font_size/;"	f	typeref:typename:void
dx	imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
e	imgui/imgui.h	/^        const char*     e;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
empty	imgui/imgui.h	/^        bool            empty() const                   { return b == e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:bool
empty	imgui/imgui.h	/^    bool                empty() const           { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:bool
empty	imgui/imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector	typeref:typename:bool
empty	imgui/imgui_internal.h	/^    bool    empty() const               { return Buf.Size == 0; }$/;"	f	struct:ImChunkStream	typeref:typename:bool
emptyRenderPipelineStateCache	imgui/examples/imgui_impl_metal.mm	/^- (void)emptyRenderPipelineStateCache;$/;"	m	interface:MetalContext
emptyRenderPipelineStateCache	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
end	imgui/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
end	imgui/imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:T *
end	imgui/imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:const T *
end	imgui/imgui_internal.h	/^    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }$/;"	f	struct:ImChunkStream	typeref:typename:T *
enqueueReusableBuffer:	imgui/examples/imgui_impl_metal.mm	/^- (void)enqueueReusableBuffer:(MetalBuffer *)buffer;$/;"	m	interface:MetalContext
enqueueReusableBuffer:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
equal	imgui/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f	typeref:typename:int
erase	imgui/imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data+/;"	f	struct:ImVector	typeref:typename:T *
erase	imgui/imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data+/;"	f	struct:ImVector	typeref:typename:T *
erase_unsorted	imgui/imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data+/;"	f	struct:ImVector	typeref:typename:T *
example_glfw_vulkan	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^add_executable(example_glfw_vulkan ${sources} ${IMGUI_DIR}\/examples\/imgui_impl_glfw.cpp ${IMGU/;"	t
extra	imgui/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' n/;"	m	struct:stbrp_context	typeref:typename:stbrp_node[2]
ey	imgui/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdselect	imgui/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fdx	imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdy	imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fileMenu	fileMenu.cpp	/^bool fileMenu(std::string &file_name){$/;"	f	typeref:typename:bool
file_list	fileMenu.cpp	/^static std::vector<std::string> file_list = {};$/;"	v	typeref:typename:std::vector<std::string>	file:
find	imgui/imgui.h	/^    inline T*           find(const T& v)                    { T* data = Data;  const T* data_end/;"	f	struct:ImVector	typeref:typename:T *
find	imgui/imgui.h	/^    inline const T*     find(const T& v) const              { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:const T *
find_erase	imgui/imgui.h	/^    inline bool         find_erase(const T& v)              { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_erase_unsorted	imgui/imgui.h	/^    inline bool         find_erase_unsorted(const T& v)     { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
first_char	imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon22a5596e0508	typeref:typename:int
first_free	imgui/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap	typeref:typename:void *
first_unicode_codepoint_in_range	imgui/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and t/;"	m	struct:__anonea0503650508	typeref:typename:int
first_x	imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anonea0503650f08	typeref:typename:float
first_y	imgui/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anonea0503650f08	typeref:typename:float
flagsChanged:	imgui/examples/example_apple_opengl2/main.mm	/^-(void)flagsChanged:(NSEvent *)event    { ImGui_ImplOSX_HandleEvent(event, self); }$/;"	m	implementation:ImGuiExampleView
fontTexture	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, strong, nullable) id<MTLTexture> fontTexture;$/;"	p	interface:MetalContext
font_name	structs.h	/^  std::string font_name;$/;"	m	struct:song	typeref:typename:std::string
font_size	imgui/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anonea0503650508	typeref:typename:float
font_size	structs.h	/^  int font_size;$/;"	m	struct:song	typeref:typename:int
fontdicts	imgui/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fontstart	imgui/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
fragmentShaderSource	main.cpp	/^const char *fragmentShaderSource = "#version 330 core\\n"$/;"	v	typeref:typename:const char *
framebufferDescriptor	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, strong) FramebufferDescriptor *framebufferDescriptor; \/\/ framebuffer des/;"	p	interface:MetalContext
free_head	imgui/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
front	imgui/imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:T &
front	imgui/imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:const T &
full_win	misc-util.h	/^GLFWwindow *full_win = NULL;$/;"	v	typeref:typename:GLFWwindow *
funcs	imgui/imgui_demo.cpp	/^    struct funcs$/;"	s	function:ShowExampleAppPropertyEditor	file:
fx	imgui/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
g_Allocator	imgui/examples/example_glfw_vulkan/main.cpp	/^static VkAllocationCallbacks*   g_Allocator = NULL;$/;"	v	typeref:typename:VkAllocationCallbacks *	file:
g_Allocator	imgui/examples/example_sdl_vulkan/main.cpp	/^static VkAllocationCallbacks*   g_Allocator = NULL;$/;"	v	typeref:typename:VkAllocationCallbacks *	file:
g_AttribLocationProjMtx	imgui/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationTex = 0, g_AttribLocationProjMtx = 0;                       /;"	v	typeref:typename:int	file:
g_AttribLocationTex	imgui/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationTex = 0, g_AttribLocationProjMtx = 0;                       /;"	v	typeref:typename:int	file:
g_AttribLocationVtxColor	imgui/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationVtxPos = 0, g_AttribLocationVtxUV = 0, g_AttribLocationVtxCo/;"	v	typeref:typename:int	file:
g_AttribLocationVtxPos	imgui/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationVtxPos = 0, g_AttribLocationVtxUV = 0, g_AttribLocationVtxCo/;"	v	typeref:typename:int	file:
g_AttribLocationVtxUV	imgui/examples/imgui_impl_opengl3.cpp	/^static int          g_AttribLocationVtxPos = 0, g_AttribLocationVtxUV = 0, g_AttribLocationVtxCo/;"	v	typeref:typename:int	file:
g_BufferMemoryAlignment	imgui/examples/imgui_impl_vulkan.cpp	/^static VkDeviceSize             g_BufferMemoryAlignment = 256;$/;"	v	typeref:typename:VkDeviceSize	file:
g_ClientApi	imgui/examples/imgui_impl_glfw.cpp	/^static GlfwClientApi        g_ClientApi = GlfwClientApi_Unknown;$/;"	v	typeref:typename:GlfwClientApi	file:
g_ClipboardText	imgui/examples/imgui_impl_marmalade.cpp	/^static char*        g_ClipboardText = NULL;$/;"	v	typeref:typename:char *	file:
g_ClipboardTextData	imgui/examples/imgui_impl_allegro5.cpp	/^static char*                    g_ClipboardTextData = NULL;$/;"	v	typeref:typename:char *	file:
g_ClipboardTextData	imgui/examples/imgui_impl_sdl.cpp	/^static char*        g_ClipboardTextData = NULL;$/;"	v	typeref:typename:char *	file:
g_DebugReport	imgui/examples/example_glfw_vulkan/main.cpp	/^static VkDebugReportCallbackEXT g_DebugReport = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDebugReportCallbackEXT	file:
g_DebugReport	imgui/examples/example_sdl_vulkan/main.cpp	/^static VkDebugReportCallbackEXT g_DebugReport = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDebugReportCallbackEXT	file:
g_DescriptorPool	imgui/examples/example_glfw_vulkan/main.cpp	/^static VkDescriptorPool         g_DescriptorPool = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorPool	file:
g_DescriptorPool	imgui/examples/example_sdl_vulkan/main.cpp	/^static VkDescriptorPool         g_DescriptorPool = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorPool	file:
g_DescriptorSet	imgui/examples/imgui_impl_vulkan.cpp	/^static VkDescriptorSet          g_DescriptorSet = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorSet	file:
g_DescriptorSetLayout	imgui/examples/imgui_impl_vulkan.cpp	/^static VkDescriptorSetLayout    g_DescriptorSetLayout = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDescriptorSetLayout	file:
g_Device	imgui/examples/example_glfw_vulkan/main.cpp	/^static VkDevice                 g_Device = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDevice	file:
g_Device	imgui/examples/example_sdl_vulkan/main.cpp	/^static VkDevice                 g_Device = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDevice	file:
g_Display	imgui/examples/imgui_impl_allegro5.cpp	/^static ALLEGRO_DISPLAY*         g_Display = NULL;$/;"	v	typeref:typename:ALLEGRO_DISPLAY *	file:
g_ElementsHandle	imgui/examples/imgui_impl_opengl3.cpp	/^static unsigned int g_VboHandle = 0, g_ElementsHandle = 0;$/;"	v	typeref:typename:unsigned int	file:
g_FontImage	imgui/examples/imgui_impl_vulkan.cpp	/^static VkImage                  g_FontImage = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkImage	file:
g_FontMemory	imgui/examples/imgui_impl_vulkan.cpp	/^static VkDeviceMemory           g_FontMemory = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDeviceMemory	file:
g_FontSampler	imgui/examples/imgui_impl_vulkan.cpp	/^static VkSampler                g_FontSampler = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkSampler	file:
g_FontTexture	imgui/examples/imgui_impl_dx9.cpp	/^static LPDIRECT3DTEXTURE9       g_FontTexture = NULL;$/;"	v	typeref:typename:LPDIRECT3DTEXTURE9	file:
g_FontTexture	imgui/examples/imgui_impl_marmalade.cpp	/^static CIwTexture*  g_FontTexture = NULL;$/;"	v	typeref:typename:CIwTexture *	file:
g_FontTexture	imgui/examples/imgui_impl_opengl2.cpp	/^static GLuint       g_FontTexture = 0;$/;"	v	typeref:typename:GLuint	file:
g_FontTexture	imgui/examples/imgui_impl_opengl3.cpp	/^static GLuint       g_FontTexture = 0;$/;"	v	typeref:typename:GLuint	file:
g_FontView	imgui/examples/imgui_impl_vulkan.cpp	/^static VkImageView              g_FontView = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkImageView	file:
g_FragHandle	imgui/examples/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	typeref:typename:GLuint	file:
g_GLContext	imgui/examples/example_emscripten/main.cpp	/^SDL_GLContext   g_GLContext = NULL;$/;"	v	typeref:typename:SDL_GLContext
g_GlVersion	imgui/examples/imgui_impl_opengl3.cpp	/^static GLuint       g_GlVersion = 0;                \/\/ Extracted at runtime using GL_MAJOR_VER/;"	v	typeref:typename:GLuint	file:
g_GlslVersionString	imgui/examples/imgui_impl_opengl3.cpp	/^static char         g_GlslVersionString[32] = "";   \/\/ Specified by user or detected based on /;"	v	typeref:typename:char[32]	file:
g_HasGamepad	imgui/examples/imgui_impl_win32.cpp	/^static bool                 g_HasGamepad = false;$/;"	v	typeref:typename:bool	file:
g_IndexBufferSize	imgui/examples/imgui_impl_dx10.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	typeref:typename:int	file:
g_IndexBufferSize	imgui/examples/imgui_impl_dx11.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	typeref:typename:int	file:
g_IndexBufferSize	imgui/examples/imgui_impl_dx9.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	typeref:typename:int	file:
g_InstalledCallbacks	imgui/examples/imgui_impl_glfw.cpp	/^static bool                 g_InstalledCallbacks = false;$/;"	v	typeref:typename:bool	file:
g_Instance	imgui/examples/example_glfw_vulkan/main.cpp	/^static VkInstance               g_Instance = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkInstance	file:
g_Instance	imgui/examples/example_sdl_vulkan/main.cpp	/^static VkInstance               g_Instance = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkInstance	file:
g_LastMouseCursor	imgui/examples/imgui_impl_win32.cpp	/^static ImGuiMouseCursor     g_LastMouseCursor = ImGuiMouseCursor_COUNT;$/;"	v	typeref:typename:ImGuiMouseCursor	file:
g_MainWindowData	imgui/examples/example_glfw_vulkan/main.cpp	/^static ImGui_ImplVulkanH_Window g_MainWindowData;$/;"	v	typeref:typename:ImGui_ImplVulkanH_Window	file:
g_MainWindowData	imgui/examples/example_sdl_vulkan/main.cpp	/^static ImGui_ImplVulkanH_Window g_MainWindowData;$/;"	v	typeref:typename:ImGui_ImplVulkanH_Window	file:
g_MainWindowRenderBuffers	imgui/examples/imgui_impl_vulkan.cpp	/^static ImGui_ImplVulkanH_WindowRenderBuffers    g_MainWindowRenderBuffers;$/;"	v	typeref:typename:ImGui_ImplVulkanH_WindowRenderBuffers	file:
g_MinImageCount	imgui/examples/example_glfw_vulkan/main.cpp	/^static int                      g_MinImageCount = 2;$/;"	v	typeref:typename:int	file:
g_MinImageCount	imgui/examples/example_sdl_vulkan/main.cpp	/^static uint32_t                 g_MinImageCount = 2;$/;"	v	typeref:typename:uint32_t	file:
g_MouseCanUseGlobalState	imgui/examples/imgui_impl_sdl.cpp	/^static bool         g_MouseCanUseGlobalState = true;$/;"	v	typeref:typename:bool	file:
g_MouseCursorInvisible	imgui/examples/imgui_impl_allegro5.cpp	/^static ALLEGRO_MOUSE_CURSOR*    g_MouseCursorInvisible = NULL;$/;"	v	typeref:typename:ALLEGRO_MOUSE_CURSOR *	file:
g_MouseCursors	imgui/examples/imgui_impl_glfw.cpp	/^static GLFWcursor*          g_MouseCursors[ImGuiMouseCursor_COUNT] = {};$/;"	v	typeref:typename:GLFWcursor * []	file:
g_MouseCursors	imgui/examples/imgui_impl_sdl.cpp	/^static SDL_Cursor*  g_MouseCursors[ImGuiMouseCursor_COUNT] = {};$/;"	v	typeref:typename:SDL_Cursor * []	file:
g_MouseJustPressed	imgui/examples/imgui_impl_glfw.cpp	/^static bool                 g_MouseJustPressed[5] = { false, false, false, false, false };$/;"	v	typeref:typename:bool[5]	file:
g_MousePressed	imgui/examples/imgui_impl_marmalade.cpp	/^static bool         g_MousePressed[3] = { false, false, false };$/;"	v	typeref:typename:bool[3]	file:
g_MousePressed	imgui/examples/imgui_impl_sdl.cpp	/^static bool         g_MousePressed[3] = { false, false, false };$/;"	v	typeref:typename:bool[3]	file:
g_PhysicalDevice	imgui/examples/example_glfw_vulkan/main.cpp	/^static VkPhysicalDevice         g_PhysicalDevice = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPhysicalDevice	file:
g_PhysicalDevice	imgui/examples/example_sdl_vulkan/main.cpp	/^static VkPhysicalDevice         g_PhysicalDevice = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPhysicalDevice	file:
g_Pipeline	imgui/examples/imgui_impl_vulkan.cpp	/^static VkPipeline               g_Pipeline = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipeline	file:
g_PipelineCache	imgui/examples/example_glfw_vulkan/main.cpp	/^static VkPipelineCache          g_PipelineCache = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipelineCache	file:
g_PipelineCache	imgui/examples/example_sdl_vulkan/main.cpp	/^static VkPipelineCache          g_PipelineCache = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipelineCache	file:
g_PipelineCreateFlags	imgui/examples/imgui_impl_vulkan.cpp	/^static VkPipelineCreateFlags    g_PipelineCreateFlags = 0x00;$/;"	v	typeref:typename:VkPipelineCreateFlags	file:
g_PipelineLayout	imgui/examples/imgui_impl_vulkan.cpp	/^static VkPipelineLayout         g_PipelineLayout = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkPipelineLayout	file:
g_PrevUserCallbackChar	imgui/examples/imgui_impl_glfw.cpp	/^static GLFWcharfun          g_PrevUserCallbackChar = NULL;$/;"	v	typeref:typename:GLFWcharfun	file:
g_PrevUserCallbackKey	imgui/examples/imgui_impl_glfw.cpp	/^static GLFWkeyfun           g_PrevUserCallbackKey = NULL;$/;"	v	typeref:typename:GLFWkeyfun	file:
g_PrevUserCallbackMousebutton	imgui/examples/imgui_impl_glfw.cpp	/^static GLFWmousebuttonfun   g_PrevUserCallbackMousebutton = NULL;$/;"	v	typeref:typename:GLFWmousebuttonfun	file:
g_PrevUserCallbackScroll	imgui/examples/imgui_impl_glfw.cpp	/^static GLFWscrollfun        g_PrevUserCallbackScroll = NULL;$/;"	v	typeref:typename:GLFWscrollfun	file:
g_Queue	imgui/examples/example_glfw_vulkan/main.cpp	/^static VkQueue                  g_Queue = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkQueue	file:
g_Queue	imgui/examples/example_sdl_vulkan/main.cpp	/^static VkQueue                  g_Queue = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkQueue	file:
g_QueueFamily	imgui/examples/example_glfw_vulkan/main.cpp	/^static uint32_t                 g_QueueFamily = (uint32_t)-1;$/;"	v	typeref:typename:uint32_t	file:
g_QueueFamily	imgui/examples/example_sdl_vulkan/main.cpp	/^static uint32_t                 g_QueueFamily = (uint32_t)-1;$/;"	v	typeref:typename:uint32_t	file:
g_RTVFormat	imgui/examples/imgui_impl_dx12.cpp	/^static DXGI_FORMAT                  g_RTVFormat = DXGI_FORMAT_UNKNOWN;$/;"	v	typeref:typename:DXGI_FORMAT	file:
g_RenderPass	imgui/examples/imgui_impl_vulkan.cpp	/^static VkRenderPass             g_RenderPass = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkRenderPass	file:
g_RenderScale	imgui/examples/imgui_impl_marmalade.cpp	/^static ImVec2       g_RenderScale = ImVec2(1.0f,1.0f);$/;"	v	typeref:typename:ImVec2	file:
g_ShaderHandle	imgui/examples/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	typeref:typename:GLuint	file:
g_SwapChainRebuild	imgui/examples/example_glfw_vulkan/main.cpp	/^static bool                     g_SwapChainRebuild = false;$/;"	v	typeref:typename:bool	file:
g_SwapChainRebuild	imgui/examples/example_sdl_vulkan/main.cpp	/^static bool                     g_SwapChainRebuild = false;$/;"	v	typeref:typename:bool	file:
g_SwapChainResizeHeight	imgui/examples/example_glfw_vulkan/main.cpp	/^static int                      g_SwapChainResizeHeight = 0;$/;"	v	typeref:typename:int	file:
g_SwapChainResizeHeight	imgui/examples/example_sdl_vulkan/main.cpp	/^static int                      g_SwapChainResizeHeight = 0;$/;"	v	typeref:typename:int	file:
g_SwapChainResizeWidth	imgui/examples/example_glfw_vulkan/main.cpp	/^static int                      g_SwapChainResizeWidth = 0;$/;"	v	typeref:typename:int	file:
g_SwapChainResizeWidth	imgui/examples/example_sdl_vulkan/main.cpp	/^static int                      g_SwapChainResizeWidth = 0;$/;"	v	typeref:typename:int	file:
g_Texture	imgui/examples/imgui_impl_allegro5.cpp	/^static ALLEGRO_BITMAP*          g_Texture = NULL;$/;"	v	typeref:typename:ALLEGRO_BITMAP *	file:
g_TicksPerSecond	imgui/examples/imgui_impl_win32.cpp	/^static INT64                g_TicksPerSecond = 0;$/;"	v	typeref:typename:INT64	file:
g_Time	imgui/examples/imgui_impl_allegro5.cpp	/^static double                   g_Time = 0.0;$/;"	v	typeref:typename:double	file:
g_Time	imgui/examples/imgui_impl_glfw.cpp	/^static double               g_Time = 0.0;$/;"	v	typeref:typename:double	file:
g_Time	imgui/examples/imgui_impl_glut.cpp	/^static int g_Time = 0;          \/\/ Current time, in milliseconds$/;"	v	typeref:typename:int	file:
g_Time	imgui/examples/imgui_impl_marmalade.cpp	/^static double       g_Time = 0.0f;$/;"	v	typeref:typename:double	file:
g_Time	imgui/examples/imgui_impl_sdl.cpp	/^static Uint64       g_Time = 0;$/;"	v	typeref:typename:Uint64	file:
g_Time	imgui/examples/imgui_impl_win32.cpp	/^static INT64                g_Time = 0;$/;"	v	typeref:typename:INT64	file:
g_UploadBuffer	imgui/examples/imgui_impl_vulkan.cpp	/^static VkBuffer                 g_UploadBuffer = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkBuffer	file:
g_UploadBufferMemory	imgui/examples/imgui_impl_vulkan.cpp	/^static VkDeviceMemory           g_UploadBufferMemory = VK_NULL_HANDLE;$/;"	v	typeref:typename:VkDeviceMemory	file:
g_VboHandle	imgui/examples/imgui_impl_opengl3.cpp	/^static unsigned int g_VboHandle = 0, g_ElementsHandle = 0;$/;"	v	typeref:typename:unsigned int	file:
g_VertHandle	imgui/examples/imgui_impl_opengl3.cpp	/^static GLuint       g_ShaderHandle = 0, g_VertHandle = 0, g_FragHandle = 0;$/;"	v	typeref:typename:GLuint	file:
g_VertexBufferSize	imgui/examples/imgui_impl_dx10.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	typeref:typename:int	file:
g_VertexBufferSize	imgui/examples/imgui_impl_dx11.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	typeref:typename:int	file:
g_VertexBufferSize	imgui/examples/imgui_impl_dx9.cpp	/^static int                      g_VertexBufferSize = 5000, g_IndexBufferSize = 10000;$/;"	v	typeref:typename:int	file:
g_VertexDecl	imgui/examples/imgui_impl_allegro5.cpp	/^static ALLEGRO_VERTEX_DECL*     g_VertexDecl = NULL;$/;"	v	typeref:typename:ALLEGRO_VERTEX_DECL *	file:
g_VulkanInitInfo	imgui/examples/imgui_impl_vulkan.cpp	/^static ImGui_ImplVulkan_InitInfo g_VulkanInitInfo = {};$/;"	v	typeref:typename:ImGui_ImplVulkan_InitInfo	file:
g_WantUpdateHasGamepad	imgui/examples/imgui_impl_win32.cpp	/^static bool                 g_WantUpdateHasGamepad = true;$/;"	v	typeref:typename:bool	file:
g_Window	imgui/examples/example_emscripten/main.cpp	/^SDL_Window*     g_Window = NULL;$/;"	v	typeref:typename:SDL_Window *
g_Window	imgui/examples/imgui_impl_glfw.cpp	/^static GLFWwindow*          g_Window = NULL;    \/\/ Main window$/;"	v	typeref:typename:GLFWwindow *	file:
g_Window	imgui/examples/imgui_impl_sdl.cpp	/^static SDL_Window*  g_Window = NULL;$/;"	v	typeref:typename:SDL_Window *	file:
g_d3dpp	imgui/examples/example_win32_directx9/main.cpp	/^static D3DPRESENT_PARAMETERS    g_d3dpp = {};$/;"	v	typeref:typename:D3DPRESENT_PARAMETERS	file:
g_fence	imgui/examples/example_win32_directx12/main.cpp	/^static ID3D12Fence*                 g_fence = NULL;$/;"	v	typeref:typename:ID3D12Fence *	file:
g_fenceEvent	imgui/examples/example_win32_directx12/main.cpp	/^static HANDLE                       g_fenceEvent = NULL;$/;"	v	typeref:typename:HANDLE	file:
g_fenceLastSignaledValue	imgui/examples/example_win32_directx12/main.cpp	/^static UINT64                       g_fenceLastSignaledValue = 0;$/;"	v	typeref:typename:UINT64	file:
g_frameContext	imgui/examples/example_win32_directx12/main.cpp	/^static FrameContext                 g_frameContext[NUM_FRAMES_IN_FLIGHT] = {};$/;"	v	typeref:typename:FrameContext[]	file:
g_frameIndex	imgui/examples/example_win32_directx12/main.cpp	/^static UINT                         g_frameIndex = 0;$/;"	v	typeref:typename:UINT	file:
g_frameIndex	imgui/examples/imgui_impl_dx12.cpp	/^static UINT             g_frameIndex = UINT_MAX;$/;"	v	typeref:typename:UINT	file:
g_hFontSrvCpuDescHandle	imgui/examples/imgui_impl_dx12.cpp	/^static D3D12_CPU_DESCRIPTOR_HANDLE  g_hFontSrvCpuDescHandle = {};$/;"	v	typeref:typename:D3D12_CPU_DESCRIPTOR_HANDLE	file:
g_hFontSrvGpuDescHandle	imgui/examples/imgui_impl_dx12.cpp	/^static D3D12_GPU_DESCRIPTOR_HANDLE  g_hFontSrvGpuDescHandle = {};$/;"	v	typeref:typename:D3D12_GPU_DESCRIPTOR_HANDLE	file:
g_hSwapChainWaitableObject	imgui/examples/example_win32_directx12/main.cpp	/^static HANDLE                       g_hSwapChainWaitableObject = NULL;$/;"	v	typeref:typename:HANDLE	file:
g_hWnd	imgui/examples/imgui_impl_win32.cpp	/^static HWND                 g_hWnd = NULL;$/;"	v	typeref:typename:HWND	file:
g_mainRenderTargetDescriptor	imgui/examples/example_win32_directx12/main.cpp	/^static D3D12_CPU_DESCRIPTOR_HANDLE  g_mainRenderTargetDescriptor[NUM_BACK_BUFFERS] = {};$/;"	v	typeref:typename:D3D12_CPU_DESCRIPTOR_HANDLE[]	file:
g_mainRenderTargetResource	imgui/examples/example_win32_directx12/main.cpp	/^static ID3D12Resource*              g_mainRenderTargetResource[NUM_BACK_BUFFERS] = {};$/;"	v	typeref:typename:ID3D12Resource * []	file:
g_mainRenderTargetView	imgui/examples/example_sdl_directx11/main.cpp	/^static ID3D11RenderTargetView*  g_mainRenderTargetView = NULL;$/;"	v	typeref:typename:ID3D11RenderTargetView *	file:
g_mainRenderTargetView	imgui/examples/example_win32_directx10/main.cpp	/^static ID3D10RenderTargetView*  g_mainRenderTargetView = NULL;$/;"	v	typeref:typename:ID3D10RenderTargetView *	file:
g_mainRenderTargetView	imgui/examples/example_win32_directx11/main.cpp	/^static ID3D11RenderTargetView*  g_mainRenderTargetView = NULL;$/;"	v	typeref:typename:ID3D11RenderTargetView *	file:
g_numFramesInFlight	imgui/examples/imgui_impl_dx12.cpp	/^static UINT             g_numFramesInFlight = 0;$/;"	v	typeref:typename:UINT	file:
g_osdKeyboardEnabled	imgui/examples/imgui_impl_marmalade.cpp	/^static bool         g_osdKeyboardEnabled = false;$/;"	v	typeref:typename:bool	file:
g_pBlendState	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10BlendState*        g_pBlendState = NULL;$/;"	v	typeref:typename:ID3D10BlendState *	file:
g_pBlendState	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11BlendState*        g_pBlendState = NULL;$/;"	v	typeref:typename:ID3D11BlendState *	file:
g_pD3D	imgui/examples/example_win32_directx9/main.cpp	/^static LPDIRECT3D9              g_pD3D = NULL;$/;"	v	typeref:typename:LPDIRECT3D9	file:
g_pDepthStencilState	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10DepthStencilState* g_pDepthStencilState = NULL;$/;"	v	typeref:typename:ID3D10DepthStencilState *	file:
g_pDepthStencilState	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11DepthStencilState* g_pDepthStencilState = NULL;$/;"	v	typeref:typename:ID3D11DepthStencilState *	file:
g_pFactory	imgui/examples/imgui_impl_dx10.cpp	/^static IDXGIFactory*            g_pFactory = NULL;$/;"	v	typeref:typename:IDXGIFactory *	file:
g_pFactory	imgui/examples/imgui_impl_dx11.cpp	/^static IDXGIFactory*            g_pFactory = NULL;$/;"	v	typeref:typename:IDXGIFactory *	file:
g_pFontSampler	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10SamplerState*      g_pFontSampler = NULL;$/;"	v	typeref:typename:ID3D10SamplerState *	file:
g_pFontSampler	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11SamplerState*      g_pFontSampler = NULL;$/;"	v	typeref:typename:ID3D11SamplerState *	file:
g_pFontTextureResource	imgui/examples/imgui_impl_dx12.cpp	/^static ID3D12Resource*              g_pFontTextureResource = NULL;$/;"	v	typeref:typename:ID3D12Resource *	file:
g_pFontTextureView	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10ShaderResourceView*g_pFontTextureView = NULL;$/;"	v	typeref:typename:ID3D10ShaderResourceView *	file:
g_pFontTextureView	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11ShaderResourceView*g_pFontTextureView = NULL;$/;"	v	typeref:typename:ID3D11ShaderResourceView *	file:
g_pFrameResources	imgui/examples/imgui_impl_dx12.cpp	/^static FrameResources*  g_pFrameResources = NULL;$/;"	v	typeref:typename:FrameResources *	file:
g_pIB	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10Buffer*            g_pIB = NULL;$/;"	v	typeref:typename:ID3D10Buffer *	file:
g_pIB	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11Buffer*            g_pIB = NULL;$/;"	v	typeref:typename:ID3D11Buffer *	file:
g_pIB	imgui/examples/imgui_impl_dx9.cpp	/^static LPDIRECT3DINDEXBUFFER9   g_pIB = NULL;$/;"	v	typeref:typename:LPDIRECT3DINDEXBUFFER9	file:
g_pInputLayout	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10InputLayout*       g_pInputLayout = NULL;$/;"	v	typeref:typename:ID3D10InputLayout *	file:
g_pInputLayout	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11InputLayout*       g_pInputLayout = NULL;$/;"	v	typeref:typename:ID3D11InputLayout *	file:
g_pPipelineState	imgui/examples/imgui_impl_dx12.cpp	/^static ID3D12PipelineState*         g_pPipelineState = NULL;$/;"	v	typeref:typename:ID3D12PipelineState *	file:
g_pPixelShader	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10PixelShader*       g_pPixelShader = NULL;$/;"	v	typeref:typename:ID3D10PixelShader *	file:
g_pPixelShader	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11PixelShader*       g_pPixelShader = NULL;$/;"	v	typeref:typename:ID3D11PixelShader *	file:
g_pPixelShaderBlob	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10Blob*              g_pPixelShaderBlob = NULL;$/;"	v	typeref:typename:ID3D10Blob *	file:
g_pPixelShaderBlob	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D10Blob*              g_pPixelShaderBlob = NULL;$/;"	v	typeref:typename:ID3D10Blob *	file:
g_pPixelShaderBlob	imgui/examples/imgui_impl_dx12.cpp	/^static ID3D10Blob*                  g_pPixelShaderBlob = NULL;$/;"	v	typeref:typename:ID3D10Blob *	file:
g_pRasterizerState	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10RasterizerState*   g_pRasterizerState = NULL;$/;"	v	typeref:typename:ID3D10RasterizerState *	file:
g_pRasterizerState	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11RasterizerState*   g_pRasterizerState = NULL;$/;"	v	typeref:typename:ID3D11RasterizerState *	file:
g_pRootSignature	imgui/examples/imgui_impl_dx12.cpp	/^static ID3D12RootSignature*         g_pRootSignature = NULL;$/;"	v	typeref:typename:ID3D12RootSignature *	file:
g_pSwapChain	imgui/examples/example_sdl_directx11/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = NULL;$/;"	v	typeref:typename:IDXGISwapChain *	file:
g_pSwapChain	imgui/examples/example_win32_directx10/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = NULL;$/;"	v	typeref:typename:IDXGISwapChain *	file:
g_pSwapChain	imgui/examples/example_win32_directx11/main.cpp	/^static IDXGISwapChain*          g_pSwapChain = NULL;$/;"	v	typeref:typename:IDXGISwapChain *	file:
g_pSwapChain	imgui/examples/example_win32_directx12/main.cpp	/^static IDXGISwapChain3*             g_pSwapChain = NULL;$/;"	v	typeref:typename:IDXGISwapChain3 *	file:
g_pVB	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10Buffer*            g_pVB = NULL;$/;"	v	typeref:typename:ID3D10Buffer *	file:
g_pVB	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11Buffer*            g_pVB = NULL;$/;"	v	typeref:typename:ID3D11Buffer *	file:
g_pVB	imgui/examples/imgui_impl_dx9.cpp	/^static LPDIRECT3DVERTEXBUFFER9  g_pVB = NULL;$/;"	v	typeref:typename:LPDIRECT3DVERTEXBUFFER9	file:
g_pVertexConstantBuffer	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10Buffer*            g_pVertexConstantBuffer = NULL;$/;"	v	typeref:typename:ID3D10Buffer *	file:
g_pVertexConstantBuffer	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11Buffer*            g_pVertexConstantBuffer = NULL;$/;"	v	typeref:typename:ID3D11Buffer *	file:
g_pVertexShader	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10VertexShader*      g_pVertexShader = NULL;$/;"	v	typeref:typename:ID3D10VertexShader *	file:
g_pVertexShader	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11VertexShader*      g_pVertexShader = NULL;$/;"	v	typeref:typename:ID3D11VertexShader *	file:
g_pVertexShaderBlob	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10Blob*              g_pVertexShaderBlob = NULL;$/;"	v	typeref:typename:ID3D10Blob *	file:
g_pVertexShaderBlob	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D10Blob*              g_pVertexShaderBlob = NULL;$/;"	v	typeref:typename:ID3D10Blob *	file:
g_pVertexShaderBlob	imgui/examples/imgui_impl_dx12.cpp	/^static ID3D10Blob*                  g_pVertexShaderBlob = NULL;$/;"	v	typeref:typename:ID3D10Blob *	file:
g_pd3dCommandList	imgui/examples/example_win32_directx12/main.cpp	/^static ID3D12GraphicsCommandList*   g_pd3dCommandList = NULL;$/;"	v	typeref:typename:ID3D12GraphicsCommandList *	file:
g_pd3dCommandQueue	imgui/examples/example_win32_directx12/main.cpp	/^static ID3D12CommandQueue*          g_pd3dCommandQueue = NULL;$/;"	v	typeref:typename:ID3D12CommandQueue *	file:
g_pd3dDevice	imgui/examples/example_sdl_directx11/main.cpp	/^static ID3D11Device*            g_pd3dDevice = NULL;$/;"	v	typeref:typename:ID3D11Device *	file:
g_pd3dDevice	imgui/examples/example_win32_directx10/main.cpp	/^static ID3D10Device*            g_pd3dDevice = NULL;$/;"	v	typeref:typename:ID3D10Device *	file:
g_pd3dDevice	imgui/examples/example_win32_directx11/main.cpp	/^static ID3D11Device*            g_pd3dDevice = NULL;$/;"	v	typeref:typename:ID3D11Device *	file:
g_pd3dDevice	imgui/examples/example_win32_directx12/main.cpp	/^static ID3D12Device*                g_pd3dDevice = NULL;$/;"	v	typeref:typename:ID3D12Device *	file:
g_pd3dDevice	imgui/examples/example_win32_directx9/main.cpp	/^static LPDIRECT3DDEVICE9        g_pd3dDevice = NULL;$/;"	v	typeref:typename:LPDIRECT3DDEVICE9	file:
g_pd3dDevice	imgui/examples/imgui_impl_dx10.cpp	/^static ID3D10Device*            g_pd3dDevice = NULL;$/;"	v	typeref:typename:ID3D10Device *	file:
g_pd3dDevice	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11Device*            g_pd3dDevice = NULL;$/;"	v	typeref:typename:ID3D11Device *	file:
g_pd3dDevice	imgui/examples/imgui_impl_dx12.cpp	/^static ID3D12Device*                g_pd3dDevice = NULL;$/;"	v	typeref:typename:ID3D12Device *	file:
g_pd3dDevice	imgui/examples/imgui_impl_dx9.cpp	/^static LPDIRECT3DDEVICE9        g_pd3dDevice = NULL;$/;"	v	typeref:typename:LPDIRECT3DDEVICE9	file:
g_pd3dDeviceContext	imgui/examples/example_sdl_directx11/main.cpp	/^static ID3D11DeviceContext*     g_pd3dDeviceContext = NULL;$/;"	v	typeref:typename:ID3D11DeviceContext *	file:
g_pd3dDeviceContext	imgui/examples/example_win32_directx11/main.cpp	/^static ID3D11DeviceContext*     g_pd3dDeviceContext = NULL;$/;"	v	typeref:typename:ID3D11DeviceContext *	file:
g_pd3dDeviceContext	imgui/examples/imgui_impl_dx11.cpp	/^static ID3D11DeviceContext*     g_pd3dDeviceContext = NULL;$/;"	v	typeref:typename:ID3D11DeviceContext *	file:
g_pd3dRtvDescHeap	imgui/examples/example_win32_directx12/main.cpp	/^static ID3D12DescriptorHeap*        g_pd3dRtvDescHeap = NULL;$/;"	v	typeref:typename:ID3D12DescriptorHeap *	file:
g_pd3dSrvDescHeap	imgui/examples/example_win32_directx12/main.cpp	/^static ID3D12DescriptorHeap*        g_pd3dSrvDescHeap = NULL;$/;"	v	typeref:typename:ID3D12DescriptorHeap *	file:
get_proc	imgui/examples/libs/gl3w/GL/gl3w.c	/^static void *get_proc(const char *proc)$/;"	f	typeref:typename:void *	file:
gl3wActiveShaderProgram	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLACTIVESHADERPROGRAMPROC gl3wActiveShaderProgram;$/;"	v	typeref:typename:PFNGLACTIVESHADERPROGRAMPROC
gl3wActiveTexture	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLACTIVETEXTUREPROC gl3wActiveTexture;$/;"	v	typeref:typename:PFNGLACTIVETEXTUREPROC
gl3wAttachShader	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLATTACHSHADERPROC gl3wAttachShader;$/;"	v	typeref:typename:PFNGLATTACHSHADERPROC
gl3wBeginConditionalRender	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBEGINCONDITIONALRENDERPROC gl3wBeginConditionalRender;$/;"	v	typeref:typename:PFNGLBEGINCONDITIONALRENDERPROC
gl3wBeginQuery	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBEGINQUERYPROC gl3wBeginQuery;$/;"	v	typeref:typename:PFNGLBEGINQUERYPROC
gl3wBeginQueryIndexed	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBEGINQUERYINDEXEDPROC gl3wBeginQueryIndexed;$/;"	v	typeref:typename:PFNGLBEGINQUERYINDEXEDPROC
gl3wBeginTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBEGINTRANSFORMFEEDBACKPROC gl3wBeginTransformFeedback;$/;"	v	typeref:typename:PFNGLBEGINTRANSFORMFEEDBACKPROC
gl3wBindAttribLocation	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDATTRIBLOCATIONPROC gl3wBindAttribLocation;$/;"	v	typeref:typename:PFNGLBINDATTRIBLOCATIONPROC
gl3wBindBuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDBUFFERPROC gl3wBindBuffer;$/;"	v	typeref:typename:PFNGLBINDBUFFERPROC
gl3wBindBufferBase	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDBUFFERBASEPROC gl3wBindBufferBase;$/;"	v	typeref:typename:PFNGLBINDBUFFERBASEPROC
gl3wBindBufferRange	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDBUFFERRANGEPROC gl3wBindBufferRange;$/;"	v	typeref:typename:PFNGLBINDBUFFERRANGEPROC
gl3wBindFragDataLocation	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDFRAGDATALOCATIONPROC gl3wBindFragDataLocation;$/;"	v	typeref:typename:PFNGLBINDFRAGDATALOCATIONPROC
gl3wBindFragDataLocationIndexed	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDFRAGDATALOCATIONINDEXEDPROC gl3wBindFragDataLocationIndexed;$/;"	v	typeref:typename:PFNGLBINDFRAGDATALOCATIONINDEXEDPROC
gl3wBindFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDFRAMEBUFFERPROC gl3wBindFramebuffer;$/;"	v	typeref:typename:PFNGLBINDFRAMEBUFFERPROC
gl3wBindImageTexture	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDIMAGETEXTUREPROC gl3wBindImageTexture;$/;"	v	typeref:typename:PFNGLBINDIMAGETEXTUREPROC
gl3wBindProgramPipeline	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDPROGRAMPIPELINEPROC gl3wBindProgramPipeline;$/;"	v	typeref:typename:PFNGLBINDPROGRAMPIPELINEPROC
gl3wBindRenderbuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDRENDERBUFFERPROC gl3wBindRenderbuffer;$/;"	v	typeref:typename:PFNGLBINDRENDERBUFFERPROC
gl3wBindSampler	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDSAMPLERPROC gl3wBindSampler;$/;"	v	typeref:typename:PFNGLBINDSAMPLERPROC
gl3wBindTexture	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDTEXTUREPROC gl3wBindTexture;$/;"	v	typeref:typename:PFNGLBINDTEXTUREPROC
gl3wBindTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDTRANSFORMFEEDBACKPROC gl3wBindTransformFeedback;$/;"	v	typeref:typename:PFNGLBINDTRANSFORMFEEDBACKPROC
gl3wBindVertexArray	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDVERTEXARRAYPROC gl3wBindVertexArray;$/;"	v	typeref:typename:PFNGLBINDVERTEXARRAYPROC
gl3wBindVertexBuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBINDVERTEXBUFFERPROC gl3wBindVertexBuffer;$/;"	v	typeref:typename:PFNGLBINDVERTEXBUFFERPROC
gl3wBlendColor	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDCOLORPROC gl3wBlendColor;$/;"	v	typeref:typename:PFNGLBLENDCOLORPROC
gl3wBlendEquation	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONPROC gl3wBlendEquation;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONPROC
gl3wBlendEquationSeparate	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONSEPARATEPROC gl3wBlendEquationSeparate;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONSEPARATEPROC
gl3wBlendEquationSeparatei	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONSEPARATEIPROC gl3wBlendEquationSeparatei;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONSEPARATEIPROC
gl3wBlendEquationSeparateiARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONSEPARATEIARBPROC gl3wBlendEquationSeparateiARB;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONSEPARATEIARBPROC
gl3wBlendEquationi	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONIPROC gl3wBlendEquationi;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONIPROC
gl3wBlendEquationiARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDEQUATIONIARBPROC gl3wBlendEquationiARB;$/;"	v	typeref:typename:PFNGLBLENDEQUATIONIARBPROC
gl3wBlendFunc	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCPROC gl3wBlendFunc;$/;"	v	typeref:typename:PFNGLBLENDFUNCPROC
gl3wBlendFuncSeparate	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCSEPARATEPROC gl3wBlendFuncSeparate;$/;"	v	typeref:typename:PFNGLBLENDFUNCSEPARATEPROC
gl3wBlendFuncSeparatei	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCSEPARATEIPROC gl3wBlendFuncSeparatei;$/;"	v	typeref:typename:PFNGLBLENDFUNCSEPARATEIPROC
gl3wBlendFuncSeparateiARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCSEPARATEIARBPROC gl3wBlendFuncSeparateiARB;$/;"	v	typeref:typename:PFNGLBLENDFUNCSEPARATEIARBPROC
gl3wBlendFunci	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCIPROC gl3wBlendFunci;$/;"	v	typeref:typename:PFNGLBLENDFUNCIPROC
gl3wBlendFunciARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLENDFUNCIARBPROC gl3wBlendFunciARB;$/;"	v	typeref:typename:PFNGLBLENDFUNCIARBPROC
gl3wBlitFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBLITFRAMEBUFFERPROC gl3wBlitFramebuffer;$/;"	v	typeref:typename:PFNGLBLITFRAMEBUFFERPROC
gl3wBufferData	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBUFFERDATAPROC gl3wBufferData;$/;"	v	typeref:typename:PFNGLBUFFERDATAPROC
gl3wBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLBUFFERSUBDATAPROC gl3wBufferSubData;$/;"	v	typeref:typename:PFNGLBUFFERSUBDATAPROC
gl3wCheckFramebufferStatus	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCHECKFRAMEBUFFERSTATUSPROC gl3wCheckFramebufferStatus;$/;"	v	typeref:typename:PFNGLCHECKFRAMEBUFFERSTATUSPROC
gl3wClampColor	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLAMPCOLORPROC gl3wClampColor;$/;"	v	typeref:typename:PFNGLCLAMPCOLORPROC
gl3wClear	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARPROC gl3wClear;$/;"	v	typeref:typename:PFNGLCLEARPROC
gl3wClearBufferData	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERDATAPROC gl3wClearBufferData;$/;"	v	typeref:typename:PFNGLCLEARBUFFERDATAPROC
gl3wClearBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERSUBDATAPROC gl3wClearBufferSubData;$/;"	v	typeref:typename:PFNGLCLEARBUFFERSUBDATAPROC
gl3wClearBufferfi	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERFIPROC gl3wClearBufferfi;$/;"	v	typeref:typename:PFNGLCLEARBUFFERFIPROC
gl3wClearBufferfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERFVPROC gl3wClearBufferfv;$/;"	v	typeref:typename:PFNGLCLEARBUFFERFVPROC
gl3wClearBufferiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERIVPROC gl3wClearBufferiv;$/;"	v	typeref:typename:PFNGLCLEARBUFFERIVPROC
gl3wClearBufferuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARBUFFERUIVPROC gl3wClearBufferuiv;$/;"	v	typeref:typename:PFNGLCLEARBUFFERUIVPROC
gl3wClearColor	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARCOLORPROC gl3wClearColor;$/;"	v	typeref:typename:PFNGLCLEARCOLORPROC
gl3wClearDepth	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARDEPTHPROC gl3wClearDepth;$/;"	v	typeref:typename:PFNGLCLEARDEPTHPROC
gl3wClearDepthf	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARDEPTHFPROC gl3wClearDepthf;$/;"	v	typeref:typename:PFNGLCLEARDEPTHFPROC
gl3wClearNamedBufferDataEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARNAMEDBUFFERDATAEXTPROC gl3wClearNamedBufferDataEXT;$/;"	v	typeref:typename:PFNGLCLEARNAMEDBUFFERDATAEXTPROC
gl3wClearNamedBufferSubDataEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC gl3wClearNamedBufferSubDataEXT;$/;"	v	typeref:typename:PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
gl3wClearStencil	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLEARSTENCILPROC gl3wClearStencil;$/;"	v	typeref:typename:PFNGLCLEARSTENCILPROC
gl3wClientWaitSync	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCLIENTWAITSYNCPROC gl3wClientWaitSync;$/;"	v	typeref:typename:PFNGLCLIENTWAITSYNCPROC
gl3wColorMask	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORMASKPROC gl3wColorMask;$/;"	v	typeref:typename:PFNGLCOLORMASKPROC
gl3wColorMaski	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORMASKIPROC gl3wColorMaski;$/;"	v	typeref:typename:PFNGLCOLORMASKIPROC
gl3wColorP3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORP3UIPROC gl3wColorP3ui;$/;"	v	typeref:typename:PFNGLCOLORP3UIPROC
gl3wColorP3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORP3UIVPROC gl3wColorP3uiv;$/;"	v	typeref:typename:PFNGLCOLORP3UIVPROC
gl3wColorP4ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORP4UIPROC gl3wColorP4ui;$/;"	v	typeref:typename:PFNGLCOLORP4UIPROC
gl3wColorP4uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOLORP4UIVPROC gl3wColorP4uiv;$/;"	v	typeref:typename:PFNGLCOLORP4UIVPROC
gl3wCompileShader	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPILESHADERPROC gl3wCompileShader;$/;"	v	typeref:typename:PFNGLCOMPILESHADERPROC
gl3wCompileShaderIncludeARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPILESHADERINCLUDEARBPROC gl3wCompileShaderIncludeARB;$/;"	v	typeref:typename:PFNGLCOMPILESHADERINCLUDEARBPROC
gl3wCompressedTexImage1D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXIMAGE1DPROC gl3wCompressedTexImage1D;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXIMAGE1DPROC
gl3wCompressedTexImage2D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXIMAGE2DPROC gl3wCompressedTexImage2D;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXIMAGE2DPROC
gl3wCompressedTexImage3D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXIMAGE3DPROC gl3wCompressedTexImage3D;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXIMAGE3DPROC
gl3wCompressedTexSubImage1D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC gl3wCompressedTexSubImage1D;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
gl3wCompressedTexSubImage2D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC gl3wCompressedTexSubImage2D;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
gl3wCompressedTexSubImage3D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC gl3wCompressedTexSubImage3D;$/;"	v	typeref:typename:PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
gl3wCopyBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYBUFFERSUBDATAPROC gl3wCopyBufferSubData;$/;"	v	typeref:typename:PFNGLCOPYBUFFERSUBDATAPROC
gl3wCopyImageSubData	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYIMAGESUBDATAPROC gl3wCopyImageSubData;$/;"	v	typeref:typename:PFNGLCOPYIMAGESUBDATAPROC
gl3wCopyTexImage1D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXIMAGE1DPROC gl3wCopyTexImage1D;$/;"	v	typeref:typename:PFNGLCOPYTEXIMAGE1DPROC
gl3wCopyTexImage2D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXIMAGE2DPROC gl3wCopyTexImage2D;$/;"	v	typeref:typename:PFNGLCOPYTEXIMAGE2DPROC
gl3wCopyTexSubImage1D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXSUBIMAGE1DPROC gl3wCopyTexSubImage1D;$/;"	v	typeref:typename:PFNGLCOPYTEXSUBIMAGE1DPROC
gl3wCopyTexSubImage2D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXSUBIMAGE2DPROC gl3wCopyTexSubImage2D;$/;"	v	typeref:typename:PFNGLCOPYTEXSUBIMAGE2DPROC
gl3wCopyTexSubImage3D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCOPYTEXSUBIMAGE3DPROC gl3wCopyTexSubImage3D;$/;"	v	typeref:typename:PFNGLCOPYTEXSUBIMAGE3DPROC
gl3wCreateProgram	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCREATEPROGRAMPROC gl3wCreateProgram;$/;"	v	typeref:typename:PFNGLCREATEPROGRAMPROC
gl3wCreateShader	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCREATESHADERPROC gl3wCreateShader;$/;"	v	typeref:typename:PFNGLCREATESHADERPROC
gl3wCreateShaderProgramv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCREATESHADERPROGRAMVPROC gl3wCreateShaderProgramv;$/;"	v	typeref:typename:PFNGLCREATESHADERPROGRAMVPROC
gl3wCreateSyncFromCLeventARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCREATESYNCFROMCLEVENTARBPROC gl3wCreateSyncFromCLeventARB;$/;"	v	typeref:typename:PFNGLCREATESYNCFROMCLEVENTARBPROC
gl3wCullFace	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLCULLFACEPROC gl3wCullFace;$/;"	v	typeref:typename:PFNGLCULLFACEPROC
gl3wDebugMessageCallback	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGECALLBACKPROC gl3wDebugMessageCallback;$/;"	v	typeref:typename:PFNGLDEBUGMESSAGECALLBACKPROC
gl3wDebugMessageCallbackARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGECALLBACKARBPROC gl3wDebugMessageCallbackARB;$/;"	v	typeref:typename:PFNGLDEBUGMESSAGECALLBACKARBPROC
gl3wDebugMessageControl	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGECONTROLPROC gl3wDebugMessageControl;$/;"	v	typeref:typename:PFNGLDEBUGMESSAGECONTROLPROC
gl3wDebugMessageControlARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGECONTROLARBPROC gl3wDebugMessageControlARB;$/;"	v	typeref:typename:PFNGLDEBUGMESSAGECONTROLARBPROC
gl3wDebugMessageInsert	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGEINSERTPROC gl3wDebugMessageInsert;$/;"	v	typeref:typename:PFNGLDEBUGMESSAGEINSERTPROC
gl3wDebugMessageInsertARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEBUGMESSAGEINSERTARBPROC gl3wDebugMessageInsertARB;$/;"	v	typeref:typename:PFNGLDEBUGMESSAGEINSERTARBPROC
gl3wDeleteBuffers	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEBUFFERSPROC gl3wDeleteBuffers;$/;"	v	typeref:typename:PFNGLDELETEBUFFERSPROC
gl3wDeleteFramebuffers	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEFRAMEBUFFERSPROC gl3wDeleteFramebuffers;$/;"	v	typeref:typename:PFNGLDELETEFRAMEBUFFERSPROC
gl3wDeleteNamedStringARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETENAMEDSTRINGARBPROC gl3wDeleteNamedStringARB;$/;"	v	typeref:typename:PFNGLDELETENAMEDSTRINGARBPROC
gl3wDeleteProgram	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEPROGRAMPROC gl3wDeleteProgram;$/;"	v	typeref:typename:PFNGLDELETEPROGRAMPROC
gl3wDeleteProgramPipelines	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEPROGRAMPIPELINESPROC gl3wDeleteProgramPipelines;$/;"	v	typeref:typename:PFNGLDELETEPROGRAMPIPELINESPROC
gl3wDeleteQueries	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEQUERIESPROC gl3wDeleteQueries;$/;"	v	typeref:typename:PFNGLDELETEQUERIESPROC
gl3wDeleteRenderbuffers	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETERENDERBUFFERSPROC gl3wDeleteRenderbuffers;$/;"	v	typeref:typename:PFNGLDELETERENDERBUFFERSPROC
gl3wDeleteSamplers	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETESAMPLERSPROC gl3wDeleteSamplers;$/;"	v	typeref:typename:PFNGLDELETESAMPLERSPROC
gl3wDeleteShader	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETESHADERPROC gl3wDeleteShader;$/;"	v	typeref:typename:PFNGLDELETESHADERPROC
gl3wDeleteSync	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETESYNCPROC gl3wDeleteSync;$/;"	v	typeref:typename:PFNGLDELETESYNCPROC
gl3wDeleteTextures	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETETEXTURESPROC gl3wDeleteTextures;$/;"	v	typeref:typename:PFNGLDELETETEXTURESPROC
gl3wDeleteTransformFeedbacks	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETETRANSFORMFEEDBACKSPROC gl3wDeleteTransformFeedbacks;$/;"	v	typeref:typename:PFNGLDELETETRANSFORMFEEDBACKSPROC
gl3wDeleteVertexArrays	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDELETEVERTEXARRAYSPROC gl3wDeleteVertexArrays;$/;"	v	typeref:typename:PFNGLDELETEVERTEXARRAYSPROC
gl3wDepthFunc	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHFUNCPROC gl3wDepthFunc;$/;"	v	typeref:typename:PFNGLDEPTHFUNCPROC
gl3wDepthMask	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHMASKPROC gl3wDepthMask;$/;"	v	typeref:typename:PFNGLDEPTHMASKPROC
gl3wDepthRange	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHRANGEPROC gl3wDepthRange;$/;"	v	typeref:typename:PFNGLDEPTHRANGEPROC
gl3wDepthRangeArrayv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHRANGEARRAYVPROC gl3wDepthRangeArrayv;$/;"	v	typeref:typename:PFNGLDEPTHRANGEARRAYVPROC
gl3wDepthRangeIndexed	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHRANGEINDEXEDPROC gl3wDepthRangeIndexed;$/;"	v	typeref:typename:PFNGLDEPTHRANGEINDEXEDPROC
gl3wDepthRangef	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDEPTHRANGEFPROC gl3wDepthRangef;$/;"	v	typeref:typename:PFNGLDEPTHRANGEFPROC
gl3wDetachShader	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDETACHSHADERPROC gl3wDetachShader;$/;"	v	typeref:typename:PFNGLDETACHSHADERPROC
gl3wDisable	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISABLEPROC gl3wDisable;$/;"	v	typeref:typename:PFNGLDISABLEPROC
gl3wDisableVertexAttribArray	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISABLEVERTEXATTRIBARRAYPROC gl3wDisableVertexAttribArray;$/;"	v	typeref:typename:PFNGLDISABLEVERTEXATTRIBARRAYPROC
gl3wDisablei	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISABLEIPROC gl3wDisablei;$/;"	v	typeref:typename:PFNGLDISABLEIPROC
gl3wDispatchCompute	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISPATCHCOMPUTEPROC gl3wDispatchCompute;$/;"	v	typeref:typename:PFNGLDISPATCHCOMPUTEPROC
gl3wDispatchComputeIndirect	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDISPATCHCOMPUTEINDIRECTPROC gl3wDispatchComputeIndirect;$/;"	v	typeref:typename:PFNGLDISPATCHCOMPUTEINDIRECTPROC
gl3wDrawArrays	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWARRAYSPROC gl3wDrawArrays;$/;"	v	typeref:typename:PFNGLDRAWARRAYSPROC
gl3wDrawArraysIndirect	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWARRAYSINDIRECTPROC gl3wDrawArraysIndirect;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINDIRECTPROC
gl3wDrawArraysInstanced	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWARRAYSINSTANCEDPROC gl3wDrawArraysInstanced;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINSTANCEDPROC
gl3wDrawArraysInstancedBaseInstance	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC gl3wDrawArraysInstancedBaseInstance;$/;"	v	typeref:typename:PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
gl3wDrawBuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWBUFFERPROC gl3wDrawBuffer;$/;"	v	typeref:typename:PFNGLDRAWBUFFERPROC
gl3wDrawBuffers	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWBUFFERSPROC gl3wDrawBuffers;$/;"	v	typeref:typename:PFNGLDRAWBUFFERSPROC
gl3wDrawElements	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSPROC gl3wDrawElements;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSPROC
gl3wDrawElementsBaseVertex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSBASEVERTEXPROC gl3wDrawElementsBaseVertex;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSBASEVERTEXPROC
gl3wDrawElementsIndirect	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINDIRECTPROC gl3wDrawElementsIndirect;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINDIRECTPROC
gl3wDrawElementsInstanced	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINSTANCEDPROC gl3wDrawElementsInstanced;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDPROC
gl3wDrawElementsInstancedBaseInstance	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC gl3wDrawElementsInstancedBaseInstance;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
gl3wDrawElementsInstancedBaseVertex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC gl3wDrawElementsInstancedBaseVertex;$/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
gl3wDrawElementsInstancedBaseVertexBaseInstance	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC gl3wDrawElementsInstancedBaseVertexBaseInst/;"	v	typeref:typename:PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
gl3wDrawRangeElements	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWRANGEELEMENTSPROC gl3wDrawRangeElements;$/;"	v	typeref:typename:PFNGLDRAWRANGEELEMENTSPROC
gl3wDrawRangeElementsBaseVertex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC gl3wDrawRangeElementsBaseVertex;$/;"	v	typeref:typename:PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
gl3wDrawTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWTRANSFORMFEEDBACKPROC gl3wDrawTransformFeedback;$/;"	v	typeref:typename:PFNGLDRAWTRANSFORMFEEDBACKPROC
gl3wDrawTransformFeedbackInstanced	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC gl3wDrawTransformFeedbackInstanced;$/;"	v	typeref:typename:PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
gl3wDrawTransformFeedbackStream	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC gl3wDrawTransformFeedbackStream;$/;"	v	typeref:typename:PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
gl3wDrawTransformFeedbackStreamInstanced	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC gl3wDrawTransformFeedbackStreamInstanced;$/;"	v	typeref:typename:PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
gl3wEnable	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENABLEPROC gl3wEnable;$/;"	v	typeref:typename:PFNGLENABLEPROC
gl3wEnableVertexAttribArray	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENABLEVERTEXATTRIBARRAYPROC gl3wEnableVertexAttribArray;$/;"	v	typeref:typename:PFNGLENABLEVERTEXATTRIBARRAYPROC
gl3wEnablei	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENABLEIPROC gl3wEnablei;$/;"	v	typeref:typename:PFNGLENABLEIPROC
gl3wEndConditionalRender	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENDCONDITIONALRENDERPROC gl3wEndConditionalRender;$/;"	v	typeref:typename:PFNGLENDCONDITIONALRENDERPROC
gl3wEndQuery	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENDQUERYPROC gl3wEndQuery;$/;"	v	typeref:typename:PFNGLENDQUERYPROC
gl3wEndQueryIndexed	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENDQUERYINDEXEDPROC gl3wEndQueryIndexed;$/;"	v	typeref:typename:PFNGLENDQUERYINDEXEDPROC
gl3wEndTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLENDTRANSFORMFEEDBACKPROC gl3wEndTransformFeedback;$/;"	v	typeref:typename:PFNGLENDTRANSFORMFEEDBACKPROC
gl3wFenceSync	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFENCESYNCPROC gl3wFenceSync;$/;"	v	typeref:typename:PFNGLFENCESYNCPROC
gl3wFinish	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFINISHPROC gl3wFinish;$/;"	v	typeref:typename:PFNGLFINISHPROC
gl3wFlush	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFLUSHPROC gl3wFlush;$/;"	v	typeref:typename:PFNGLFLUSHPROC
gl3wFlushMappedBufferRange	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFLUSHMAPPEDBUFFERRANGEPROC gl3wFlushMappedBufferRange;$/;"	v	typeref:typename:PFNGLFLUSHMAPPEDBUFFERRANGEPROC
gl3wFramebufferParameteri	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERPARAMETERIPROC gl3wFramebufferParameteri;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERPARAMETERIPROC
gl3wFramebufferRenderbuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERRENDERBUFFERPROC gl3wFramebufferRenderbuffer;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERRENDERBUFFERPROC
gl3wFramebufferTexture	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTUREPROC gl3wFramebufferTexture;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTUREPROC
gl3wFramebufferTexture1D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTURE1DPROC gl3wFramebufferTexture1D;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURE1DPROC
gl3wFramebufferTexture2D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTURE2DPROC gl3wFramebufferTexture2D;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURE2DPROC
gl3wFramebufferTexture3D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTURE3DPROC gl3wFramebufferTexture3D;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURE3DPROC
gl3wFramebufferTextureLayer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRAMEBUFFERTEXTURELAYERPROC gl3wFramebufferTextureLayer;$/;"	v	typeref:typename:PFNGLFRAMEBUFFERTEXTURELAYERPROC
gl3wFrontFace	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLFRONTFACEPROC gl3wFrontFace;$/;"	v	typeref:typename:PFNGLFRONTFACEPROC
gl3wGenBuffers	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENBUFFERSPROC gl3wGenBuffers;$/;"	v	typeref:typename:PFNGLGENBUFFERSPROC
gl3wGenFramebuffers	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENFRAMEBUFFERSPROC gl3wGenFramebuffers;$/;"	v	typeref:typename:PFNGLGENFRAMEBUFFERSPROC
gl3wGenProgramPipelines	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENPROGRAMPIPELINESPROC gl3wGenProgramPipelines;$/;"	v	typeref:typename:PFNGLGENPROGRAMPIPELINESPROC
gl3wGenQueries	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENQUERIESPROC gl3wGenQueries;$/;"	v	typeref:typename:PFNGLGENQUERIESPROC
gl3wGenRenderbuffers	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENRENDERBUFFERSPROC gl3wGenRenderbuffers;$/;"	v	typeref:typename:PFNGLGENRENDERBUFFERSPROC
gl3wGenSamplers	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENSAMPLERSPROC gl3wGenSamplers;$/;"	v	typeref:typename:PFNGLGENSAMPLERSPROC
gl3wGenTextures	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENTEXTURESPROC gl3wGenTextures;$/;"	v	typeref:typename:PFNGLGENTEXTURESPROC
gl3wGenTransformFeedbacks	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENTRANSFORMFEEDBACKSPROC gl3wGenTransformFeedbacks;$/;"	v	typeref:typename:PFNGLGENTRANSFORMFEEDBACKSPROC
gl3wGenVertexArrays	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENVERTEXARRAYSPROC gl3wGenVertexArrays;$/;"	v	typeref:typename:PFNGLGENVERTEXARRAYSPROC
gl3wGenerateMipmap	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGENERATEMIPMAPPROC gl3wGenerateMipmap;$/;"	v	typeref:typename:PFNGLGENERATEMIPMAPPROC
gl3wGetActiveAtomicCounterBufferiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC gl3wGetActiveAtomicCounterBufferiv;$/;"	v	typeref:typename:PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
gl3wGetActiveAttrib	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEATTRIBPROC gl3wGetActiveAttrib;$/;"	v	typeref:typename:PFNGLGETACTIVEATTRIBPROC
gl3wGetActiveSubroutineName	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVESUBROUTINENAMEPROC gl3wGetActiveSubroutineName;$/;"	v	typeref:typename:PFNGLGETACTIVESUBROUTINENAMEPROC
gl3wGetActiveSubroutineUniformName	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC gl3wGetActiveSubroutineUniformName;$/;"	v	typeref:typename:PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
gl3wGetActiveSubroutineUniformiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC gl3wGetActiveSubroutineUniformiv;$/;"	v	typeref:typename:PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
gl3wGetActiveUniform	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMPROC gl3wGetActiveUniform;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMPROC
gl3wGetActiveUniformBlockName	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC gl3wGetActiveUniformBlockName;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
gl3wGetActiveUniformBlockiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMBLOCKIVPROC gl3wGetActiveUniformBlockiv;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMBLOCKIVPROC
gl3wGetActiveUniformName	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMNAMEPROC gl3wGetActiveUniformName;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMNAMEPROC
gl3wGetActiveUniformsiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETACTIVEUNIFORMSIVPROC gl3wGetActiveUniformsiv;$/;"	v	typeref:typename:PFNGLGETACTIVEUNIFORMSIVPROC
gl3wGetAttachedShaders	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETATTACHEDSHADERSPROC gl3wGetAttachedShaders;$/;"	v	typeref:typename:PFNGLGETATTACHEDSHADERSPROC
gl3wGetAttribLocation	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETATTRIBLOCATIONPROC gl3wGetAttribLocation;$/;"	v	typeref:typename:PFNGLGETATTRIBLOCATIONPROC
gl3wGetBooleani_v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBOOLEANI_VPROC gl3wGetBooleani_v;$/;"	v	typeref:typename:PFNGLGETBOOLEANI_VPROC
gl3wGetBooleanv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBOOLEANVPROC gl3wGetBooleanv;$/;"	v	typeref:typename:PFNGLGETBOOLEANVPROC
gl3wGetBufferParameteri64v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBUFFERPARAMETERI64VPROC gl3wGetBufferParameteri64v;$/;"	v	typeref:typename:PFNGLGETBUFFERPARAMETERI64VPROC
gl3wGetBufferParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBUFFERPARAMETERIVPROC gl3wGetBufferParameteriv;$/;"	v	typeref:typename:PFNGLGETBUFFERPARAMETERIVPROC
gl3wGetBufferPointerv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBUFFERPOINTERVPROC gl3wGetBufferPointerv;$/;"	v	typeref:typename:PFNGLGETBUFFERPOINTERVPROC
gl3wGetBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETBUFFERSUBDATAPROC gl3wGetBufferSubData;$/;"	v	typeref:typename:PFNGLGETBUFFERSUBDATAPROC
gl3wGetCompressedTexImage	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETCOMPRESSEDTEXIMAGEPROC gl3wGetCompressedTexImage;$/;"	v	typeref:typename:PFNGLGETCOMPRESSEDTEXIMAGEPROC
gl3wGetDebugMessageLog	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETDEBUGMESSAGELOGPROC gl3wGetDebugMessageLog;$/;"	v	typeref:typename:PFNGLGETDEBUGMESSAGELOGPROC
gl3wGetDebugMessageLogARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETDEBUGMESSAGELOGARBPROC gl3wGetDebugMessageLogARB;$/;"	v	typeref:typename:PFNGLGETDEBUGMESSAGELOGARBPROC
gl3wGetDoublei_v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETDOUBLEI_VPROC gl3wGetDoublei_v;$/;"	v	typeref:typename:PFNGLGETDOUBLEI_VPROC
gl3wGetDoublev	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETDOUBLEVPROC gl3wGetDoublev;$/;"	v	typeref:typename:PFNGLGETDOUBLEVPROC
gl3wGetError	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETERRORPROC gl3wGetError;$/;"	v	typeref:typename:PFNGLGETERRORPROC
gl3wGetFloati_v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFLOATI_VPROC gl3wGetFloati_v;$/;"	v	typeref:typename:PFNGLGETFLOATI_VPROC
gl3wGetFloatv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFLOATVPROC gl3wGetFloatv;$/;"	v	typeref:typename:PFNGLGETFLOATVPROC
gl3wGetFragDataIndex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFRAGDATAINDEXPROC gl3wGetFragDataIndex;$/;"	v	typeref:typename:PFNGLGETFRAGDATAINDEXPROC
gl3wGetFragDataLocation	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFRAGDATALOCATIONPROC gl3wGetFragDataLocation;$/;"	v	typeref:typename:PFNGLGETFRAGDATALOCATIONPROC
gl3wGetFramebufferAttachmentParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC gl3wGetFramebufferAttachmentParameteriv;$/;"	v	typeref:typename:PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
gl3wGetFramebufferParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETFRAMEBUFFERPARAMETERIVPROC gl3wGetFramebufferParameteriv;$/;"	v	typeref:typename:PFNGLGETFRAMEBUFFERPARAMETERIVPROC
gl3wGetGraphicsResetStatusARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETGRAPHICSRESETSTATUSARBPROC gl3wGetGraphicsResetStatusARB;$/;"	v	typeref:typename:PFNGLGETGRAPHICSRESETSTATUSARBPROC
gl3wGetInteger64i_v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTEGER64I_VPROC gl3wGetInteger64i_v;$/;"	v	typeref:typename:PFNGLGETINTEGER64I_VPROC
gl3wGetInteger64v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTEGER64VPROC gl3wGetInteger64v;$/;"	v	typeref:typename:PFNGLGETINTEGER64VPROC
gl3wGetIntegeri_v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTEGERI_VPROC gl3wGetIntegeri_v;$/;"	v	typeref:typename:PFNGLGETINTEGERI_VPROC
gl3wGetIntegerv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTEGERVPROC gl3wGetIntegerv;$/;"	v	typeref:typename:PFNGLGETINTEGERVPROC
gl3wGetInternalformati64v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTERNALFORMATI64VPROC gl3wGetInternalformati64v;$/;"	v	typeref:typename:PFNGLGETINTERNALFORMATI64VPROC
gl3wGetInternalformativ	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETINTERNALFORMATIVPROC gl3wGetInternalformativ;$/;"	v	typeref:typename:PFNGLGETINTERNALFORMATIVPROC
gl3wGetMultisamplefv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETMULTISAMPLEFVPROC gl3wGetMultisamplefv;$/;"	v	typeref:typename:PFNGLGETMULTISAMPLEFVPROC
gl3wGetNamedFramebufferParameterivEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC gl3wGetNamedFramebufferParameterivEXT;$/;"	v	typeref:typename:PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
gl3wGetNamedStringARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNAMEDSTRINGARBPROC gl3wGetNamedStringARB;$/;"	v	typeref:typename:PFNGLGETNAMEDSTRINGARBPROC
gl3wGetNamedStringivARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNAMEDSTRINGIVARBPROC gl3wGetNamedStringivARB;$/;"	v	typeref:typename:PFNGLGETNAMEDSTRINGIVARBPROC
gl3wGetObjectLabel	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETOBJECTLABELPROC gl3wGetObjectLabel;$/;"	v	typeref:typename:PFNGLGETOBJECTLABELPROC
gl3wGetObjectPtrLabel	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETOBJECTPTRLABELPROC gl3wGetObjectPtrLabel;$/;"	v	typeref:typename:PFNGLGETOBJECTPTRLABELPROC
gl3wGetPointerv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPOINTERVPROC gl3wGetPointerv;$/;"	v	typeref:typename:PFNGLGETPOINTERVPROC
gl3wGetProcAddress	imgui/examples/libs/gl3w/GL/gl3w.c	/^void *gl3wGetProcAddress(const char *proc)$/;"	f	typeref:typename:void *
gl3wGetProgramBinary	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMBINARYPROC gl3wGetProgramBinary;$/;"	v	typeref:typename:PFNGLGETPROGRAMBINARYPROC
gl3wGetProgramInfoLog	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMINFOLOGPROC gl3wGetProgramInfoLog;$/;"	v	typeref:typename:PFNGLGETPROGRAMINFOLOGPROC
gl3wGetProgramInterfaceiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMINTERFACEIVPROC gl3wGetProgramInterfaceiv;$/;"	v	typeref:typename:PFNGLGETPROGRAMINTERFACEIVPROC
gl3wGetProgramPipelineInfoLog	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMPIPELINEINFOLOGPROC gl3wGetProgramPipelineInfoLog;$/;"	v	typeref:typename:PFNGLGETPROGRAMPIPELINEINFOLOGPROC
gl3wGetProgramPipelineiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMPIPELINEIVPROC gl3wGetProgramPipelineiv;$/;"	v	typeref:typename:PFNGLGETPROGRAMPIPELINEIVPROC
gl3wGetProgramResourceIndex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCEINDEXPROC gl3wGetProgramResourceIndex;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCEINDEXPROC
gl3wGetProgramResourceLocation	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCELOCATIONPROC gl3wGetProgramResourceLocation;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCELOCATIONPROC
gl3wGetProgramResourceLocationIndex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC gl3wGetProgramResourceLocationIndex;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
gl3wGetProgramResourceName	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCENAMEPROC gl3wGetProgramResourceName;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCENAMEPROC
gl3wGetProgramResourceiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMRESOURCEIVPROC gl3wGetProgramResourceiv;$/;"	v	typeref:typename:PFNGLGETPROGRAMRESOURCEIVPROC
gl3wGetProgramStageiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMSTAGEIVPROC gl3wGetProgramStageiv;$/;"	v	typeref:typename:PFNGLGETPROGRAMSTAGEIVPROC
gl3wGetProgramiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETPROGRAMIVPROC gl3wGetProgramiv;$/;"	v	typeref:typename:PFNGLGETPROGRAMIVPROC
gl3wGetQueryIndexediv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYINDEXEDIVPROC gl3wGetQueryIndexediv;$/;"	v	typeref:typename:PFNGLGETQUERYINDEXEDIVPROC
gl3wGetQueryObjecti64v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYOBJECTI64VPROC gl3wGetQueryObjecti64v;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTI64VPROC
gl3wGetQueryObjectiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYOBJECTIVPROC gl3wGetQueryObjectiv;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTIVPROC
gl3wGetQueryObjectui64v	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYOBJECTUI64VPROC gl3wGetQueryObjectui64v;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTUI64VPROC
gl3wGetQueryObjectuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYOBJECTUIVPROC gl3wGetQueryObjectuiv;$/;"	v	typeref:typename:PFNGLGETQUERYOBJECTUIVPROC
gl3wGetQueryiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETQUERYIVPROC gl3wGetQueryiv;$/;"	v	typeref:typename:PFNGLGETQUERYIVPROC
gl3wGetRenderbufferParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETRENDERBUFFERPARAMETERIVPROC gl3wGetRenderbufferParameteriv;$/;"	v	typeref:typename:PFNGLGETRENDERBUFFERPARAMETERIVPROC
gl3wGetSamplerParameterIiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSAMPLERPARAMETERIIVPROC gl3wGetSamplerParameterIiv;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERIIVPROC
gl3wGetSamplerParameterIuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSAMPLERPARAMETERIUIVPROC gl3wGetSamplerParameterIuiv;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERIUIVPROC
gl3wGetSamplerParameterfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSAMPLERPARAMETERFVPROC gl3wGetSamplerParameterfv;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERFVPROC
gl3wGetSamplerParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSAMPLERPARAMETERIVPROC gl3wGetSamplerParameteriv;$/;"	v	typeref:typename:PFNGLGETSAMPLERPARAMETERIVPROC
gl3wGetShaderInfoLog	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSHADERINFOLOGPROC gl3wGetShaderInfoLog;$/;"	v	typeref:typename:PFNGLGETSHADERINFOLOGPROC
gl3wGetShaderPrecisionFormat	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSHADERPRECISIONFORMATPROC gl3wGetShaderPrecisionFormat;$/;"	v	typeref:typename:PFNGLGETSHADERPRECISIONFORMATPROC
gl3wGetShaderSource	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSHADERSOURCEPROC gl3wGetShaderSource;$/;"	v	typeref:typename:PFNGLGETSHADERSOURCEPROC
gl3wGetShaderiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSHADERIVPROC gl3wGetShaderiv;$/;"	v	typeref:typename:PFNGLGETSHADERIVPROC
gl3wGetString	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSTRINGPROC gl3wGetString;$/;"	v	typeref:typename:PFNGLGETSTRINGPROC
gl3wGetStringi	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSTRINGIPROC gl3wGetStringi;$/;"	v	typeref:typename:PFNGLGETSTRINGIPROC
gl3wGetSubroutineIndex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSUBROUTINEINDEXPROC gl3wGetSubroutineIndex;$/;"	v	typeref:typename:PFNGLGETSUBROUTINEINDEXPROC
gl3wGetSubroutineUniformLocation	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC gl3wGetSubroutineUniformLocation;$/;"	v	typeref:typename:PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
gl3wGetSynciv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETSYNCIVPROC gl3wGetSynciv;$/;"	v	typeref:typename:PFNGLGETSYNCIVPROC
gl3wGetTexImage	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXIMAGEPROC gl3wGetTexImage;$/;"	v	typeref:typename:PFNGLGETTEXIMAGEPROC
gl3wGetTexLevelParameterfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXLEVELPARAMETERFVPROC gl3wGetTexLevelParameterfv;$/;"	v	typeref:typename:PFNGLGETTEXLEVELPARAMETERFVPROC
gl3wGetTexLevelParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXLEVELPARAMETERIVPROC gl3wGetTexLevelParameteriv;$/;"	v	typeref:typename:PFNGLGETTEXLEVELPARAMETERIVPROC
gl3wGetTexParameterIiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXPARAMETERIIVPROC gl3wGetTexParameterIiv;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERIIVPROC
gl3wGetTexParameterIuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXPARAMETERIUIVPROC gl3wGetTexParameterIuiv;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERIUIVPROC
gl3wGetTexParameterfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXPARAMETERFVPROC gl3wGetTexParameterfv;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERFVPROC
gl3wGetTexParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTEXPARAMETERIVPROC gl3wGetTexParameteriv;$/;"	v	typeref:typename:PFNGLGETTEXPARAMETERIVPROC
gl3wGetTransformFeedbackVarying	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETTRANSFORMFEEDBACKVARYINGPROC gl3wGetTransformFeedbackVarying;$/;"	v	typeref:typename:PFNGLGETTRANSFORMFEEDBACKVARYINGPROC
gl3wGetUniformBlockIndex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMBLOCKINDEXPROC gl3wGetUniformBlockIndex;$/;"	v	typeref:typename:PFNGLGETUNIFORMBLOCKINDEXPROC
gl3wGetUniformIndices	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMINDICESPROC gl3wGetUniformIndices;$/;"	v	typeref:typename:PFNGLGETUNIFORMINDICESPROC
gl3wGetUniformLocation	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMLOCATIONPROC gl3wGetUniformLocation;$/;"	v	typeref:typename:PFNGLGETUNIFORMLOCATIONPROC
gl3wGetUniformSubroutineuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMSUBROUTINEUIVPROC gl3wGetUniformSubroutineuiv;$/;"	v	typeref:typename:PFNGLGETUNIFORMSUBROUTINEUIVPROC
gl3wGetUniformdv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMDVPROC gl3wGetUniformdv;$/;"	v	typeref:typename:PFNGLGETUNIFORMDVPROC
gl3wGetUniformfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMFVPROC gl3wGetUniformfv;$/;"	v	typeref:typename:PFNGLGETUNIFORMFVPROC
gl3wGetUniformiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMIVPROC gl3wGetUniformiv;$/;"	v	typeref:typename:PFNGLGETUNIFORMIVPROC
gl3wGetUniformuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETUNIFORMUIVPROC gl3wGetUniformuiv;$/;"	v	typeref:typename:PFNGLGETUNIFORMUIVPROC
gl3wGetVertexAttribIiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBIIVPROC gl3wGetVertexAttribIiv;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBIIVPROC
gl3wGetVertexAttribIuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBIUIVPROC gl3wGetVertexAttribIuiv;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBIUIVPROC
gl3wGetVertexAttribLdv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBLDVPROC gl3wGetVertexAttribLdv;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBLDVPROC
gl3wGetVertexAttribPointerv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBPOINTERVPROC gl3wGetVertexAttribPointerv;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBPOINTERVPROC
gl3wGetVertexAttribdv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBDVPROC gl3wGetVertexAttribdv;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBDVPROC
gl3wGetVertexAttribfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBFVPROC gl3wGetVertexAttribfv;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBFVPROC
gl3wGetVertexAttribiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETVERTEXATTRIBIVPROC gl3wGetVertexAttribiv;$/;"	v	typeref:typename:PFNGLGETVERTEXATTRIBIVPROC
gl3wGetnCompressedTexImageARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC gl3wGetnCompressedTexImageARB;$/;"	v	typeref:typename:PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
gl3wGetnTexImageARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNTEXIMAGEARBPROC gl3wGetnTexImageARB;$/;"	v	typeref:typename:PFNGLGETNTEXIMAGEARBPROC
gl3wGetnUniformdvARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNUNIFORMDVARBPROC gl3wGetnUniformdvARB;$/;"	v	typeref:typename:PFNGLGETNUNIFORMDVARBPROC
gl3wGetnUniformfvARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNUNIFORMFVARBPROC gl3wGetnUniformfvARB;$/;"	v	typeref:typename:PFNGLGETNUNIFORMFVARBPROC
gl3wGetnUniformivARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNUNIFORMIVARBPROC gl3wGetnUniformivARB;$/;"	v	typeref:typename:PFNGLGETNUNIFORMIVARBPROC
gl3wGetnUniformuivARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLGETNUNIFORMUIVARBPROC gl3wGetnUniformuivARB;$/;"	v	typeref:typename:PFNGLGETNUNIFORMUIVARBPROC
gl3wHint	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLHINTPROC gl3wHint;$/;"	v	typeref:typename:PFNGLHINTPROC
gl3wInit	imgui/examples/libs/gl3w/GL/gl3w.c	/^int gl3wInit(void)$/;"	f	typeref:typename:int
gl3wInvalidateBufferData	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATEBUFFERDATAPROC gl3wInvalidateBufferData;$/;"	v	typeref:typename:PFNGLINVALIDATEBUFFERDATAPROC
gl3wInvalidateBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATEBUFFERSUBDATAPROC gl3wInvalidateBufferSubData;$/;"	v	typeref:typename:PFNGLINVALIDATEBUFFERSUBDATAPROC
gl3wInvalidateFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATEFRAMEBUFFERPROC gl3wInvalidateFramebuffer;$/;"	v	typeref:typename:PFNGLINVALIDATEFRAMEBUFFERPROC
gl3wInvalidateSubFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATESUBFRAMEBUFFERPROC gl3wInvalidateSubFramebuffer;$/;"	v	typeref:typename:PFNGLINVALIDATESUBFRAMEBUFFERPROC
gl3wInvalidateTexImage	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATETEXIMAGEPROC gl3wInvalidateTexImage;$/;"	v	typeref:typename:PFNGLINVALIDATETEXIMAGEPROC
gl3wInvalidateTexSubImage	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLINVALIDATETEXSUBIMAGEPROC gl3wInvalidateTexSubImage;$/;"	v	typeref:typename:PFNGLINVALIDATETEXSUBIMAGEPROC
gl3wIsBuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISBUFFERPROC gl3wIsBuffer;$/;"	v	typeref:typename:PFNGLISBUFFERPROC
gl3wIsEnabled	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISENABLEDPROC gl3wIsEnabled;$/;"	v	typeref:typename:PFNGLISENABLEDPROC
gl3wIsEnabledi	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISENABLEDIPROC gl3wIsEnabledi;$/;"	v	typeref:typename:PFNGLISENABLEDIPROC
gl3wIsFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISFRAMEBUFFERPROC gl3wIsFramebuffer;$/;"	v	typeref:typename:PFNGLISFRAMEBUFFERPROC
gl3wIsNamedStringARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISNAMEDSTRINGARBPROC gl3wIsNamedStringARB;$/;"	v	typeref:typename:PFNGLISNAMEDSTRINGARBPROC
gl3wIsProgram	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISPROGRAMPROC gl3wIsProgram;$/;"	v	typeref:typename:PFNGLISPROGRAMPROC
gl3wIsProgramPipeline	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISPROGRAMPIPELINEPROC gl3wIsProgramPipeline;$/;"	v	typeref:typename:PFNGLISPROGRAMPIPELINEPROC
gl3wIsQuery	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISQUERYPROC gl3wIsQuery;$/;"	v	typeref:typename:PFNGLISQUERYPROC
gl3wIsRenderbuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISRENDERBUFFERPROC gl3wIsRenderbuffer;$/;"	v	typeref:typename:PFNGLISRENDERBUFFERPROC
gl3wIsSampler	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISSAMPLERPROC gl3wIsSampler;$/;"	v	typeref:typename:PFNGLISSAMPLERPROC
gl3wIsShader	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISSHADERPROC gl3wIsShader;$/;"	v	typeref:typename:PFNGLISSHADERPROC
gl3wIsSupported	imgui/examples/libs/gl3w/GL/gl3w.c	/^int gl3wIsSupported(int major, int minor)$/;"	f	typeref:typename:int
gl3wIsSync	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISSYNCPROC gl3wIsSync;$/;"	v	typeref:typename:PFNGLISSYNCPROC
gl3wIsTexture	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISTEXTUREPROC gl3wIsTexture;$/;"	v	typeref:typename:PFNGLISTEXTUREPROC
gl3wIsTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISTRANSFORMFEEDBACKPROC gl3wIsTransformFeedback;$/;"	v	typeref:typename:PFNGLISTRANSFORMFEEDBACKPROC
gl3wIsVertexArray	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLISVERTEXARRAYPROC gl3wIsVertexArray;$/;"	v	typeref:typename:PFNGLISVERTEXARRAYPROC
gl3wLineWidth	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLLINEWIDTHPROC gl3wLineWidth;$/;"	v	typeref:typename:PFNGLLINEWIDTHPROC
gl3wLinkProgram	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLLINKPROGRAMPROC gl3wLinkProgram;$/;"	v	typeref:typename:PFNGLLINKPROGRAMPROC
gl3wLogicOp	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLLOGICOPPROC gl3wLogicOp;$/;"	v	typeref:typename:PFNGLLOGICOPPROC
gl3wMapBuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMAPBUFFERPROC gl3wMapBuffer;$/;"	v	typeref:typename:PFNGLMAPBUFFERPROC
gl3wMapBufferRange	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMAPBUFFERRANGEPROC gl3wMapBufferRange;$/;"	v	typeref:typename:PFNGLMAPBUFFERRANGEPROC
gl3wMemoryBarrier	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMEMORYBARRIERPROC gl3wMemoryBarrier;$/;"	v	typeref:typename:PFNGLMEMORYBARRIERPROC
gl3wMinSampleShading	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMINSAMPLESHADINGPROC gl3wMinSampleShading;$/;"	v	typeref:typename:PFNGLMINSAMPLESHADINGPROC
gl3wMinSampleShadingARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMINSAMPLESHADINGARBPROC gl3wMinSampleShadingARB;$/;"	v	typeref:typename:PFNGLMINSAMPLESHADINGARBPROC
gl3wMultiDrawArrays	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWARRAYSPROC gl3wMultiDrawArrays;$/;"	v	typeref:typename:PFNGLMULTIDRAWARRAYSPROC
gl3wMultiDrawArraysIndirect	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWARRAYSINDIRECTPROC gl3wMultiDrawArraysIndirect;$/;"	v	typeref:typename:PFNGLMULTIDRAWARRAYSINDIRECTPROC
gl3wMultiDrawElements	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWELEMENTSPROC gl3wMultiDrawElements;$/;"	v	typeref:typename:PFNGLMULTIDRAWELEMENTSPROC
gl3wMultiDrawElementsBaseVertex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC gl3wMultiDrawElementsBaseVertex;$/;"	v	typeref:typename:PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
gl3wMultiDrawElementsIndirect	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTIDRAWELEMENTSINDIRECTPROC gl3wMultiDrawElementsIndirect;$/;"	v	typeref:typename:PFNGLMULTIDRAWELEMENTSINDIRECTPROC
gl3wMultiTexCoordP1ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP1UIPROC gl3wMultiTexCoordP1ui;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP1UIPROC
gl3wMultiTexCoordP1uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP1UIVPROC gl3wMultiTexCoordP1uiv;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP1UIVPROC
gl3wMultiTexCoordP2ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP2UIPROC gl3wMultiTexCoordP2ui;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP2UIPROC
gl3wMultiTexCoordP2uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP2UIVPROC gl3wMultiTexCoordP2uiv;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP2UIVPROC
gl3wMultiTexCoordP3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP3UIPROC gl3wMultiTexCoordP3ui;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP3UIPROC
gl3wMultiTexCoordP3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP3UIVPROC gl3wMultiTexCoordP3uiv;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP3UIVPROC
gl3wMultiTexCoordP4ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP4UIPROC gl3wMultiTexCoordP4ui;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP4UIPROC
gl3wMultiTexCoordP4uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLMULTITEXCOORDP4UIVPROC gl3wMultiTexCoordP4uiv;$/;"	v	typeref:typename:PFNGLMULTITEXCOORDP4UIVPROC
gl3wNamedFramebufferParameteriEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC gl3wNamedFramebufferParameteriEXT;$/;"	v	typeref:typename:PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
gl3wNamedStringARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLNAMEDSTRINGARBPROC gl3wNamedStringARB;$/;"	v	typeref:typename:PFNGLNAMEDSTRINGARBPROC
gl3wNormalP3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLNORMALP3UIPROC gl3wNormalP3ui;$/;"	v	typeref:typename:PFNGLNORMALP3UIPROC
gl3wNormalP3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLNORMALP3UIVPROC gl3wNormalP3uiv;$/;"	v	typeref:typename:PFNGLNORMALP3UIVPROC
gl3wObjectLabel	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLOBJECTLABELPROC gl3wObjectLabel;$/;"	v	typeref:typename:PFNGLOBJECTLABELPROC
gl3wObjectPtrLabel	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLOBJECTPTRLABELPROC gl3wObjectPtrLabel;$/;"	v	typeref:typename:PFNGLOBJECTPTRLABELPROC
gl3wPatchParameterfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPATCHPARAMETERFVPROC gl3wPatchParameterfv;$/;"	v	typeref:typename:PFNGLPATCHPARAMETERFVPROC
gl3wPatchParameteri	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPATCHPARAMETERIPROC gl3wPatchParameteri;$/;"	v	typeref:typename:PFNGLPATCHPARAMETERIPROC
gl3wPauseTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPAUSETRANSFORMFEEDBACKPROC gl3wPauseTransformFeedback;$/;"	v	typeref:typename:PFNGLPAUSETRANSFORMFEEDBACKPROC
gl3wPixelStoref	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPIXELSTOREFPROC gl3wPixelStoref;$/;"	v	typeref:typename:PFNGLPIXELSTOREFPROC
gl3wPixelStorei	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPIXELSTOREIPROC gl3wPixelStorei;$/;"	v	typeref:typename:PFNGLPIXELSTOREIPROC
gl3wPointParameterf	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTPARAMETERFPROC gl3wPointParameterf;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERFPROC
gl3wPointParameterfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTPARAMETERFVPROC gl3wPointParameterfv;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERFVPROC
gl3wPointParameteri	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTPARAMETERIPROC gl3wPointParameteri;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERIPROC
gl3wPointParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTPARAMETERIVPROC gl3wPointParameteriv;$/;"	v	typeref:typename:PFNGLPOINTPARAMETERIVPROC
gl3wPointSize	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOINTSIZEPROC gl3wPointSize;$/;"	v	typeref:typename:PFNGLPOINTSIZEPROC
gl3wPolygonMode	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOLYGONMODEPROC gl3wPolygonMode;$/;"	v	typeref:typename:PFNGLPOLYGONMODEPROC
gl3wPolygonOffset	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOLYGONOFFSETPROC gl3wPolygonOffset;$/;"	v	typeref:typename:PFNGLPOLYGONOFFSETPROC
gl3wPopDebugGroup	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPOPDEBUGGROUPPROC gl3wPopDebugGroup;$/;"	v	typeref:typename:PFNGLPOPDEBUGGROUPPROC
gl3wPrimitiveRestartIndex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPRIMITIVERESTARTINDEXPROC gl3wPrimitiveRestartIndex;$/;"	v	typeref:typename:PFNGLPRIMITIVERESTARTINDEXPROC
gl3wProgramBinary	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMBINARYPROC gl3wProgramBinary;$/;"	v	typeref:typename:PFNGLPROGRAMBINARYPROC
gl3wProgramParameteri	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMPARAMETERIPROC gl3wProgramParameteri;$/;"	v	typeref:typename:PFNGLPROGRAMPARAMETERIPROC
gl3wProgramUniform1d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1DPROC gl3wProgramUniform1d;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1DPROC
gl3wProgramUniform1dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1DVPROC gl3wProgramUniform1dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1DVPROC
gl3wProgramUniform1f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1FPROC gl3wProgramUniform1f;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1FPROC
gl3wProgramUniform1fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1FVPROC gl3wProgramUniform1fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1FVPROC
gl3wProgramUniform1i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1IPROC gl3wProgramUniform1i;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1IPROC
gl3wProgramUniform1iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1IVPROC gl3wProgramUniform1iv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1IVPROC
gl3wProgramUniform1ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1UIPROC gl3wProgramUniform1ui;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1UIPROC
gl3wProgramUniform1uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM1UIVPROC gl3wProgramUniform1uiv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM1UIVPROC
gl3wProgramUniform2d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2DPROC gl3wProgramUniform2d;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2DPROC
gl3wProgramUniform2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2DVPROC gl3wProgramUniform2dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2DVPROC
gl3wProgramUniform2f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2FPROC gl3wProgramUniform2f;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2FPROC
gl3wProgramUniform2fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2FVPROC gl3wProgramUniform2fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2FVPROC
gl3wProgramUniform2i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2IPROC gl3wProgramUniform2i;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2IPROC
gl3wProgramUniform2iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2IVPROC gl3wProgramUniform2iv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2IVPROC
gl3wProgramUniform2ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2UIPROC gl3wProgramUniform2ui;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2UIPROC
gl3wProgramUniform2uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM2UIVPROC gl3wProgramUniform2uiv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM2UIVPROC
gl3wProgramUniform3d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3DPROC gl3wProgramUniform3d;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3DPROC
gl3wProgramUniform3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3DVPROC gl3wProgramUniform3dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3DVPROC
gl3wProgramUniform3f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3FPROC gl3wProgramUniform3f;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3FPROC
gl3wProgramUniform3fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3FVPROC gl3wProgramUniform3fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3FVPROC
gl3wProgramUniform3i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3IPROC gl3wProgramUniform3i;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3IPROC
gl3wProgramUniform3iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3IVPROC gl3wProgramUniform3iv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3IVPROC
gl3wProgramUniform3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3UIPROC gl3wProgramUniform3ui;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3UIPROC
gl3wProgramUniform3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM3UIVPROC gl3wProgramUniform3uiv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM3UIVPROC
gl3wProgramUniform4d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4DPROC gl3wProgramUniform4d;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4DPROC
gl3wProgramUniform4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4DVPROC gl3wProgramUniform4dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4DVPROC
gl3wProgramUniform4f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4FPROC gl3wProgramUniform4f;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4FPROC
gl3wProgramUniform4fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4FVPROC gl3wProgramUniform4fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4FVPROC
gl3wProgramUniform4i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4IPROC gl3wProgramUniform4i;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4IPROC
gl3wProgramUniform4iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4IVPROC gl3wProgramUniform4iv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4IVPROC
gl3wProgramUniform4ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4UIPROC gl3wProgramUniform4ui;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4UIPROC
gl3wProgramUniform4uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORM4UIVPROC gl3wProgramUniform4uiv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORM4UIVPROC
gl3wProgramUniformMatrix2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2DVPROC gl3wProgramUniformMatrix2dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2DVPROC
gl3wProgramUniformMatrix2fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2FVPROC gl3wProgramUniformMatrix2fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2FVPROC
gl3wProgramUniformMatrix2x3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC gl3wProgramUniformMatrix2x3dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
gl3wProgramUniformMatrix2x3fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC gl3wProgramUniformMatrix2x3fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
gl3wProgramUniformMatrix2x4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC gl3wProgramUniformMatrix2x4dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
gl3wProgramUniformMatrix2x4fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC gl3wProgramUniformMatrix2x4fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
gl3wProgramUniformMatrix3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3DVPROC gl3wProgramUniformMatrix3dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3DVPROC
gl3wProgramUniformMatrix3fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3FVPROC gl3wProgramUniformMatrix3fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3FVPROC
gl3wProgramUniformMatrix3x2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC gl3wProgramUniformMatrix3x2dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
gl3wProgramUniformMatrix3x2fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC gl3wProgramUniformMatrix3x2fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
gl3wProgramUniformMatrix3x4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC gl3wProgramUniformMatrix3x4dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
gl3wProgramUniformMatrix3x4fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC gl3wProgramUniformMatrix3x4fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
gl3wProgramUniformMatrix4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4DVPROC gl3wProgramUniformMatrix4dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4DVPROC
gl3wProgramUniformMatrix4fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4FVPROC gl3wProgramUniformMatrix4fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4FVPROC
gl3wProgramUniformMatrix4x2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC gl3wProgramUniformMatrix4x2dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
gl3wProgramUniformMatrix4x2fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC gl3wProgramUniformMatrix4x2fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
gl3wProgramUniformMatrix4x3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC gl3wProgramUniformMatrix4x3dv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
gl3wProgramUniformMatrix4x3fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC gl3wProgramUniformMatrix4x3fv;$/;"	v	typeref:typename:PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
gl3wProvokingVertex	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPROVOKINGVERTEXPROC gl3wProvokingVertex;$/;"	v	typeref:typename:PFNGLPROVOKINGVERTEXPROC
gl3wPushDebugGroup	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLPUSHDEBUGGROUPPROC gl3wPushDebugGroup;$/;"	v	typeref:typename:PFNGLPUSHDEBUGGROUPPROC
gl3wQueryCounter	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLQUERYCOUNTERPROC gl3wQueryCounter;$/;"	v	typeref:typename:PFNGLQUERYCOUNTERPROC
gl3wReadBuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLREADBUFFERPROC gl3wReadBuffer;$/;"	v	typeref:typename:PFNGLREADBUFFERPROC
gl3wReadPixels	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLREADPIXELSPROC gl3wReadPixels;$/;"	v	typeref:typename:PFNGLREADPIXELSPROC
gl3wReadnPixelsARB	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLREADNPIXELSARBPROC gl3wReadnPixelsARB;$/;"	v	typeref:typename:PFNGLREADNPIXELSARBPROC
gl3wReleaseShaderCompiler	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLRELEASESHADERCOMPILERPROC gl3wReleaseShaderCompiler;$/;"	v	typeref:typename:PFNGLRELEASESHADERCOMPILERPROC
gl3wRenderbufferStorage	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLRENDERBUFFERSTORAGEPROC gl3wRenderbufferStorage;$/;"	v	typeref:typename:PFNGLRENDERBUFFERSTORAGEPROC
gl3wRenderbufferStorageMultisample	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC gl3wRenderbufferStorageMultisample;$/;"	v	typeref:typename:PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
gl3wResumeTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLRESUMETRANSFORMFEEDBACKPROC gl3wResumeTransformFeedback;$/;"	v	typeref:typename:PFNGLRESUMETRANSFORMFEEDBACKPROC
gl3wSampleCoverage	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLECOVERAGEPROC gl3wSampleCoverage;$/;"	v	typeref:typename:PFNGLSAMPLECOVERAGEPROC
gl3wSampleMaski	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLEMASKIPROC gl3wSampleMaski;$/;"	v	typeref:typename:PFNGLSAMPLEMASKIPROC
gl3wSamplerParameterIiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERIIVPROC gl3wSamplerParameterIiv;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIIVPROC
gl3wSamplerParameterIuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERIUIVPROC gl3wSamplerParameterIuiv;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIUIVPROC
gl3wSamplerParameterf	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERFPROC gl3wSamplerParameterf;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERFPROC
gl3wSamplerParameterfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERFVPROC gl3wSamplerParameterfv;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERFVPROC
gl3wSamplerParameteri	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERIPROC gl3wSamplerParameteri;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIPROC
gl3wSamplerParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSAMPLERPARAMETERIVPROC gl3wSamplerParameteriv;$/;"	v	typeref:typename:PFNGLSAMPLERPARAMETERIVPROC
gl3wScissor	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSCISSORPROC gl3wScissor;$/;"	v	typeref:typename:PFNGLSCISSORPROC
gl3wScissorArrayv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSCISSORARRAYVPROC gl3wScissorArrayv;$/;"	v	typeref:typename:PFNGLSCISSORARRAYVPROC
gl3wScissorIndexed	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSCISSORINDEXEDPROC gl3wScissorIndexed;$/;"	v	typeref:typename:PFNGLSCISSORINDEXEDPROC
gl3wScissorIndexedv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSCISSORINDEXEDVPROC gl3wScissorIndexedv;$/;"	v	typeref:typename:PFNGLSCISSORINDEXEDVPROC
gl3wSecondaryColorP3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSECONDARYCOLORP3UIPROC gl3wSecondaryColorP3ui;$/;"	v	typeref:typename:PFNGLSECONDARYCOLORP3UIPROC
gl3wSecondaryColorP3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSECONDARYCOLORP3UIVPROC gl3wSecondaryColorP3uiv;$/;"	v	typeref:typename:PFNGLSECONDARYCOLORP3UIVPROC
gl3wShaderBinary	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSHADERBINARYPROC gl3wShaderBinary;$/;"	v	typeref:typename:PFNGLSHADERBINARYPROC
gl3wShaderSource	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSHADERSOURCEPROC gl3wShaderSource;$/;"	v	typeref:typename:PFNGLSHADERSOURCEPROC
gl3wShaderStorageBlockBinding	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSHADERSTORAGEBLOCKBINDINGPROC gl3wShaderStorageBlockBinding;$/;"	v	typeref:typename:PFNGLSHADERSTORAGEBLOCKBINDINGPROC
gl3wStencilFunc	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILFUNCPROC gl3wStencilFunc;$/;"	v	typeref:typename:PFNGLSTENCILFUNCPROC
gl3wStencilFuncSeparate	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILFUNCSEPARATEPROC gl3wStencilFuncSeparate;$/;"	v	typeref:typename:PFNGLSTENCILFUNCSEPARATEPROC
gl3wStencilMask	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILMASKPROC gl3wStencilMask;$/;"	v	typeref:typename:PFNGLSTENCILMASKPROC
gl3wStencilMaskSeparate	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILMASKSEPARATEPROC gl3wStencilMaskSeparate;$/;"	v	typeref:typename:PFNGLSTENCILMASKSEPARATEPROC
gl3wStencilOp	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILOPPROC gl3wStencilOp;$/;"	v	typeref:typename:PFNGLSTENCILOPPROC
gl3wStencilOpSeparate	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLSTENCILOPSEPARATEPROC gl3wStencilOpSeparate;$/;"	v	typeref:typename:PFNGLSTENCILOPSEPARATEPROC
gl3wTexBuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXBUFFERPROC gl3wTexBuffer;$/;"	v	typeref:typename:PFNGLTEXBUFFERPROC
gl3wTexBufferRange	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXBUFFERRANGEPROC gl3wTexBufferRange;$/;"	v	typeref:typename:PFNGLTEXBUFFERRANGEPROC
gl3wTexCoordP1ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP1UIPROC gl3wTexCoordP1ui;$/;"	v	typeref:typename:PFNGLTEXCOORDP1UIPROC
gl3wTexCoordP1uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP1UIVPROC gl3wTexCoordP1uiv;$/;"	v	typeref:typename:PFNGLTEXCOORDP1UIVPROC
gl3wTexCoordP2ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP2UIPROC gl3wTexCoordP2ui;$/;"	v	typeref:typename:PFNGLTEXCOORDP2UIPROC
gl3wTexCoordP2uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP2UIVPROC gl3wTexCoordP2uiv;$/;"	v	typeref:typename:PFNGLTEXCOORDP2UIVPROC
gl3wTexCoordP3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP3UIPROC gl3wTexCoordP3ui;$/;"	v	typeref:typename:PFNGLTEXCOORDP3UIPROC
gl3wTexCoordP3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP3UIVPROC gl3wTexCoordP3uiv;$/;"	v	typeref:typename:PFNGLTEXCOORDP3UIVPROC
gl3wTexCoordP4ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP4UIPROC gl3wTexCoordP4ui;$/;"	v	typeref:typename:PFNGLTEXCOORDP4UIPROC
gl3wTexCoordP4uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXCOORDP4UIVPROC gl3wTexCoordP4uiv;$/;"	v	typeref:typename:PFNGLTEXCOORDP4UIVPROC
gl3wTexImage1D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE1DPROC gl3wTexImage1D;$/;"	v	typeref:typename:PFNGLTEXIMAGE1DPROC
gl3wTexImage2D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE2DPROC gl3wTexImage2D;$/;"	v	typeref:typename:PFNGLTEXIMAGE2DPROC
gl3wTexImage2DMultisample	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE2DMULTISAMPLEPROC gl3wTexImage2DMultisample;$/;"	v	typeref:typename:PFNGLTEXIMAGE2DMULTISAMPLEPROC
gl3wTexImage3D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE3DPROC gl3wTexImage3D;$/;"	v	typeref:typename:PFNGLTEXIMAGE3DPROC
gl3wTexImage3DMultisample	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXIMAGE3DMULTISAMPLEPROC gl3wTexImage3DMultisample;$/;"	v	typeref:typename:PFNGLTEXIMAGE3DMULTISAMPLEPROC
gl3wTexParameterIiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERIIVPROC gl3wTexParameterIiv;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIIVPROC
gl3wTexParameterIuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERIUIVPROC gl3wTexParameterIuiv;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIUIVPROC
gl3wTexParameterf	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERFPROC gl3wTexParameterf;$/;"	v	typeref:typename:PFNGLTEXPARAMETERFPROC
gl3wTexParameterfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERFVPROC gl3wTexParameterfv;$/;"	v	typeref:typename:PFNGLTEXPARAMETERFVPROC
gl3wTexParameteri	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERIPROC gl3wTexParameteri;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIPROC
gl3wTexParameteriv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXPARAMETERIVPROC gl3wTexParameteriv;$/;"	v	typeref:typename:PFNGLTEXPARAMETERIVPROC
gl3wTexStorage1D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE1DPROC gl3wTexStorage1D;$/;"	v	typeref:typename:PFNGLTEXSTORAGE1DPROC
gl3wTexStorage2D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE2DPROC gl3wTexStorage2D;$/;"	v	typeref:typename:PFNGLTEXSTORAGE2DPROC
gl3wTexStorage2DMultisample	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE2DMULTISAMPLEPROC gl3wTexStorage2DMultisample;$/;"	v	typeref:typename:PFNGLTEXSTORAGE2DMULTISAMPLEPROC
gl3wTexStorage3D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE3DPROC gl3wTexStorage3D;$/;"	v	typeref:typename:PFNGLTEXSTORAGE3DPROC
gl3wTexStorage3DMultisample	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSTORAGE3DMULTISAMPLEPROC gl3wTexStorage3DMultisample;$/;"	v	typeref:typename:PFNGLTEXSTORAGE3DMULTISAMPLEPROC
gl3wTexSubImage1D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSUBIMAGE1DPROC gl3wTexSubImage1D;$/;"	v	typeref:typename:PFNGLTEXSUBIMAGE1DPROC
gl3wTexSubImage2D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSUBIMAGE2DPROC gl3wTexSubImage2D;$/;"	v	typeref:typename:PFNGLTEXSUBIMAGE2DPROC
gl3wTexSubImage3D	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXSUBIMAGE3DPROC gl3wTexSubImage3D;$/;"	v	typeref:typename:PFNGLTEXSUBIMAGE3DPROC
gl3wTextureBufferRangeEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTUREBUFFERRANGEEXTPROC gl3wTextureBufferRangeEXT;$/;"	v	typeref:typename:PFNGLTEXTUREBUFFERRANGEEXTPROC
gl3wTextureStorage1DEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE1DEXTPROC gl3wTextureStorage1DEXT;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE1DEXTPROC
gl3wTextureStorage2DEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE2DEXTPROC gl3wTextureStorage2DEXT;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE2DEXTPROC
gl3wTextureStorage2DMultisampleEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC gl3wTextureStorage2DMultisampleEXT;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
gl3wTextureStorage3DEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE3DEXTPROC gl3wTextureStorage3DEXT;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE3DEXTPROC
gl3wTextureStorage3DMultisampleEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC gl3wTextureStorage3DMultisampleEXT;$/;"	v	typeref:typename:PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
gl3wTextureView	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTEXTUREVIEWPROC gl3wTextureView;$/;"	v	typeref:typename:PFNGLTEXTUREVIEWPROC
gl3wTransformFeedbackVaryings	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLTRANSFORMFEEDBACKVARYINGSPROC gl3wTransformFeedbackVaryings;$/;"	v	typeref:typename:PFNGLTRANSFORMFEEDBACKVARYINGSPROC
gl3wUniform1d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1DPROC gl3wUniform1d;$/;"	v	typeref:typename:PFNGLUNIFORM1DPROC
gl3wUniform1dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1DVPROC gl3wUniform1dv;$/;"	v	typeref:typename:PFNGLUNIFORM1DVPROC
gl3wUniform1f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1FPROC gl3wUniform1f;$/;"	v	typeref:typename:PFNGLUNIFORM1FPROC
gl3wUniform1fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1FVPROC gl3wUniform1fv;$/;"	v	typeref:typename:PFNGLUNIFORM1FVPROC
gl3wUniform1i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1IPROC gl3wUniform1i;$/;"	v	typeref:typename:PFNGLUNIFORM1IPROC
gl3wUniform1iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1IVPROC gl3wUniform1iv;$/;"	v	typeref:typename:PFNGLUNIFORM1IVPROC
gl3wUniform1ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1UIPROC gl3wUniform1ui;$/;"	v	typeref:typename:PFNGLUNIFORM1UIPROC
gl3wUniform1uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM1UIVPROC gl3wUniform1uiv;$/;"	v	typeref:typename:PFNGLUNIFORM1UIVPROC
gl3wUniform2d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2DPROC gl3wUniform2d;$/;"	v	typeref:typename:PFNGLUNIFORM2DPROC
gl3wUniform2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2DVPROC gl3wUniform2dv;$/;"	v	typeref:typename:PFNGLUNIFORM2DVPROC
gl3wUniform2f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2FPROC gl3wUniform2f;$/;"	v	typeref:typename:PFNGLUNIFORM2FPROC
gl3wUniform2fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2FVPROC gl3wUniform2fv;$/;"	v	typeref:typename:PFNGLUNIFORM2FVPROC
gl3wUniform2i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2IPROC gl3wUniform2i;$/;"	v	typeref:typename:PFNGLUNIFORM2IPROC
gl3wUniform2iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2IVPROC gl3wUniform2iv;$/;"	v	typeref:typename:PFNGLUNIFORM2IVPROC
gl3wUniform2ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2UIPROC gl3wUniform2ui;$/;"	v	typeref:typename:PFNGLUNIFORM2UIPROC
gl3wUniform2uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM2UIVPROC gl3wUniform2uiv;$/;"	v	typeref:typename:PFNGLUNIFORM2UIVPROC
gl3wUniform3d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3DPROC gl3wUniform3d;$/;"	v	typeref:typename:PFNGLUNIFORM3DPROC
gl3wUniform3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3DVPROC gl3wUniform3dv;$/;"	v	typeref:typename:PFNGLUNIFORM3DVPROC
gl3wUniform3f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3FPROC gl3wUniform3f;$/;"	v	typeref:typename:PFNGLUNIFORM3FPROC
gl3wUniform3fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3FVPROC gl3wUniform3fv;$/;"	v	typeref:typename:PFNGLUNIFORM3FVPROC
gl3wUniform3i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3IPROC gl3wUniform3i;$/;"	v	typeref:typename:PFNGLUNIFORM3IPROC
gl3wUniform3iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3IVPROC gl3wUniform3iv;$/;"	v	typeref:typename:PFNGLUNIFORM3IVPROC
gl3wUniform3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3UIPROC gl3wUniform3ui;$/;"	v	typeref:typename:PFNGLUNIFORM3UIPROC
gl3wUniform3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM3UIVPROC gl3wUniform3uiv;$/;"	v	typeref:typename:PFNGLUNIFORM3UIVPROC
gl3wUniform4d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4DPROC gl3wUniform4d;$/;"	v	typeref:typename:PFNGLUNIFORM4DPROC
gl3wUniform4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4DVPROC gl3wUniform4dv;$/;"	v	typeref:typename:PFNGLUNIFORM4DVPROC
gl3wUniform4f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4FPROC gl3wUniform4f;$/;"	v	typeref:typename:PFNGLUNIFORM4FPROC
gl3wUniform4fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4FVPROC gl3wUniform4fv;$/;"	v	typeref:typename:PFNGLUNIFORM4FVPROC
gl3wUniform4i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4IPROC gl3wUniform4i;$/;"	v	typeref:typename:PFNGLUNIFORM4IPROC
gl3wUniform4iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4IVPROC gl3wUniform4iv;$/;"	v	typeref:typename:PFNGLUNIFORM4IVPROC
gl3wUniform4ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4UIPROC gl3wUniform4ui;$/;"	v	typeref:typename:PFNGLUNIFORM4UIPROC
gl3wUniform4uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORM4UIVPROC gl3wUniform4uiv;$/;"	v	typeref:typename:PFNGLUNIFORM4UIVPROC
gl3wUniformBlockBinding	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMBLOCKBINDINGPROC gl3wUniformBlockBinding;$/;"	v	typeref:typename:PFNGLUNIFORMBLOCKBINDINGPROC
gl3wUniformMatrix2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2DVPROC gl3wUniformMatrix2dv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2DVPROC
gl3wUniformMatrix2fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2FVPROC gl3wUniformMatrix2fv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2FVPROC
gl3wUniformMatrix2x3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2X3DVPROC gl3wUniformMatrix2x3dv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X3DVPROC
gl3wUniformMatrix2x3fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2X3FVPROC gl3wUniformMatrix2x3fv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X3FVPROC
gl3wUniformMatrix2x4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2X4DVPROC gl3wUniformMatrix2x4dv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X4DVPROC
gl3wUniformMatrix2x4fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX2X4FVPROC gl3wUniformMatrix2x4fv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX2X4FVPROC
gl3wUniformMatrix3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3DVPROC gl3wUniformMatrix3dv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3DVPROC
gl3wUniformMatrix3fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3FVPROC gl3wUniformMatrix3fv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3FVPROC
gl3wUniformMatrix3x2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3X2DVPROC gl3wUniformMatrix3x2dv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X2DVPROC
gl3wUniformMatrix3x2fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3X2FVPROC gl3wUniformMatrix3x2fv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X2FVPROC
gl3wUniformMatrix3x4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3X4DVPROC gl3wUniformMatrix3x4dv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X4DVPROC
gl3wUniformMatrix3x4fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX3X4FVPROC gl3wUniformMatrix3x4fv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX3X4FVPROC
gl3wUniformMatrix4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4DVPROC gl3wUniformMatrix4dv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4DVPROC
gl3wUniformMatrix4fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4FVPROC gl3wUniformMatrix4fv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4FVPROC
gl3wUniformMatrix4x2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4X2DVPROC gl3wUniformMatrix4x2dv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X2DVPROC
gl3wUniformMatrix4x2fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4X2FVPROC gl3wUniformMatrix4x2fv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X2FVPROC
gl3wUniformMatrix4x3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4X3DVPROC gl3wUniformMatrix4x3dv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X3DVPROC
gl3wUniformMatrix4x3fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMMATRIX4X3FVPROC gl3wUniformMatrix4x3fv;$/;"	v	typeref:typename:PFNGLUNIFORMMATRIX4X3FVPROC
gl3wUniformSubroutinesuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNIFORMSUBROUTINESUIVPROC gl3wUniformSubroutinesuiv;$/;"	v	typeref:typename:PFNGLUNIFORMSUBROUTINESUIVPROC
gl3wUnmapBuffer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUNMAPBUFFERPROC gl3wUnmapBuffer;$/;"	v	typeref:typename:PFNGLUNMAPBUFFERPROC
gl3wUseProgram	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUSEPROGRAMPROC gl3wUseProgram;$/;"	v	typeref:typename:PFNGLUSEPROGRAMPROC
gl3wUseProgramStages	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLUSEPROGRAMSTAGESPROC gl3wUseProgramStages;$/;"	v	typeref:typename:PFNGLUSEPROGRAMSTAGESPROC
gl3wValidateProgram	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVALIDATEPROGRAMPROC gl3wValidateProgram;$/;"	v	typeref:typename:PFNGLVALIDATEPROGRAMPROC
gl3wValidateProgramPipeline	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVALIDATEPROGRAMPIPELINEPROC gl3wValidateProgramPipeline;$/;"	v	typeref:typename:PFNGLVALIDATEPROGRAMPIPELINEPROC
gl3wVertexArrayBindVertexBufferEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC gl3wVertexArrayBindVertexBufferEXT;$/;"	v	typeref:typename:PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
gl3wVertexArrayVertexAttribBindingEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC gl3wVertexArrayVertexAttribBindingEXT;$/;"	v	typeref:typename:PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
gl3wVertexArrayVertexAttribFormatEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC gl3wVertexArrayVertexAttribFormatEXT;$/;"	v	typeref:typename:PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
gl3wVertexArrayVertexAttribIFormatEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC gl3wVertexArrayVertexAttribIFormatEXT;$/;"	v	typeref:typename:PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
gl3wVertexArrayVertexAttribLFormatEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC gl3wVertexArrayVertexAttribLFormatEXT;$/;"	v	typeref:typename:PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
gl3wVertexArrayVertexBindingDivisorEXT	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC gl3wVertexArrayVertexBindingDivisorEXT;$/;"	v	typeref:typename:PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
gl3wVertexAttrib1d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1DPROC gl3wVertexAttrib1d;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1DPROC
gl3wVertexAttrib1dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1DVPROC gl3wVertexAttrib1dv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1DVPROC
gl3wVertexAttrib1f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1FPROC gl3wVertexAttrib1f;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1FPROC
gl3wVertexAttrib1fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1FVPROC gl3wVertexAttrib1fv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1FVPROC
gl3wVertexAttrib1s	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1SPROC gl3wVertexAttrib1s;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1SPROC
gl3wVertexAttrib1sv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB1SVPROC gl3wVertexAttrib1sv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB1SVPROC
gl3wVertexAttrib2d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2DPROC gl3wVertexAttrib2d;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2DPROC
gl3wVertexAttrib2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2DVPROC gl3wVertexAttrib2dv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2DVPROC
gl3wVertexAttrib2f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2FPROC gl3wVertexAttrib2f;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2FPROC
gl3wVertexAttrib2fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2FVPROC gl3wVertexAttrib2fv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2FVPROC
gl3wVertexAttrib2s	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2SPROC gl3wVertexAttrib2s;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2SPROC
gl3wVertexAttrib2sv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB2SVPROC gl3wVertexAttrib2sv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB2SVPROC
gl3wVertexAttrib3d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3DPROC gl3wVertexAttrib3d;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3DPROC
gl3wVertexAttrib3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3DVPROC gl3wVertexAttrib3dv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3DVPROC
gl3wVertexAttrib3f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3FPROC gl3wVertexAttrib3f;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3FPROC
gl3wVertexAttrib3fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3FVPROC gl3wVertexAttrib3fv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3FVPROC
gl3wVertexAttrib3s	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3SPROC gl3wVertexAttrib3s;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3SPROC
gl3wVertexAttrib3sv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB3SVPROC gl3wVertexAttrib3sv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB3SVPROC
gl3wVertexAttrib4Nbv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NBVPROC gl3wVertexAttrib4Nbv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NBVPROC
gl3wVertexAttrib4Niv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NIVPROC gl3wVertexAttrib4Niv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NIVPROC
gl3wVertexAttrib4Nsv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NSVPROC gl3wVertexAttrib4Nsv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NSVPROC
gl3wVertexAttrib4Nub	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NUBPROC gl3wVertexAttrib4Nub;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUBPROC
gl3wVertexAttrib4Nubv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NUBVPROC gl3wVertexAttrib4Nubv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUBVPROC
gl3wVertexAttrib4Nuiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NUIVPROC gl3wVertexAttrib4Nuiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUIVPROC
gl3wVertexAttrib4Nusv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4NUSVPROC gl3wVertexAttrib4Nusv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4NUSVPROC
gl3wVertexAttrib4bv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4BVPROC gl3wVertexAttrib4bv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4BVPROC
gl3wVertexAttrib4d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4DPROC gl3wVertexAttrib4d;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4DPROC
gl3wVertexAttrib4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4DVPROC gl3wVertexAttrib4dv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4DVPROC
gl3wVertexAttrib4f	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4FPROC gl3wVertexAttrib4f;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4FPROC
gl3wVertexAttrib4fv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4FVPROC gl3wVertexAttrib4fv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4FVPROC
gl3wVertexAttrib4iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4IVPROC gl3wVertexAttrib4iv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4IVPROC
gl3wVertexAttrib4s	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4SPROC gl3wVertexAttrib4s;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4SPROC
gl3wVertexAttrib4sv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4SVPROC gl3wVertexAttrib4sv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4SVPROC
gl3wVertexAttrib4ubv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4UBVPROC gl3wVertexAttrib4ubv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4UBVPROC
gl3wVertexAttrib4uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4UIVPROC gl3wVertexAttrib4uiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4UIVPROC
gl3wVertexAttrib4usv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIB4USVPROC gl3wVertexAttrib4usv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIB4USVPROC
gl3wVertexAttribBinding	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBBINDINGPROC gl3wVertexAttribBinding;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBBINDINGPROC
gl3wVertexAttribDivisor	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBDIVISORPROC gl3wVertexAttribDivisor;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBDIVISORPROC
gl3wVertexAttribFormat	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBFORMATPROC gl3wVertexAttribFormat;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBFORMATPROC
gl3wVertexAttribI1i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI1IPROC gl3wVertexAttribI1i;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1IPROC
gl3wVertexAttribI1iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI1IVPROC gl3wVertexAttribI1iv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1IVPROC
gl3wVertexAttribI1ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI1UIPROC gl3wVertexAttribI1ui;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1UIPROC
gl3wVertexAttribI1uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI1UIVPROC gl3wVertexAttribI1uiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI1UIVPROC
gl3wVertexAttribI2i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI2IPROC gl3wVertexAttribI2i;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2IPROC
gl3wVertexAttribI2iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI2IVPROC gl3wVertexAttribI2iv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2IVPROC
gl3wVertexAttribI2ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI2UIPROC gl3wVertexAttribI2ui;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2UIPROC
gl3wVertexAttribI2uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI2UIVPROC gl3wVertexAttribI2uiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI2UIVPROC
gl3wVertexAttribI3i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI3IPROC gl3wVertexAttribI3i;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3IPROC
gl3wVertexAttribI3iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI3IVPROC gl3wVertexAttribI3iv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3IVPROC
gl3wVertexAttribI3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI3UIPROC gl3wVertexAttribI3ui;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3UIPROC
gl3wVertexAttribI3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI3UIVPROC gl3wVertexAttribI3uiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI3UIVPROC
gl3wVertexAttribI4bv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4BVPROC gl3wVertexAttribI4bv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4BVPROC
gl3wVertexAttribI4i	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4IPROC gl3wVertexAttribI4i;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4IPROC
gl3wVertexAttribI4iv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4IVPROC gl3wVertexAttribI4iv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4IVPROC
gl3wVertexAttribI4sv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4SVPROC gl3wVertexAttribI4sv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4SVPROC
gl3wVertexAttribI4ubv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4UBVPROC gl3wVertexAttribI4ubv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4UBVPROC
gl3wVertexAttribI4ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4UIPROC gl3wVertexAttribI4ui;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4UIPROC
gl3wVertexAttribI4uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4UIVPROC gl3wVertexAttribI4uiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4UIVPROC
gl3wVertexAttribI4usv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBI4USVPROC gl3wVertexAttribI4usv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBI4USVPROC
gl3wVertexAttribIFormat	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBIFORMATPROC gl3wVertexAttribIFormat;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBIFORMATPROC
gl3wVertexAttribIPointer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBIPOINTERPROC gl3wVertexAttribIPointer;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBIPOINTERPROC
gl3wVertexAttribL1d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL1DPROC gl3wVertexAttribL1d;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL1DPROC
gl3wVertexAttribL1dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL1DVPROC gl3wVertexAttribL1dv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL1DVPROC
gl3wVertexAttribL2d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL2DPROC gl3wVertexAttribL2d;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL2DPROC
gl3wVertexAttribL2dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL2DVPROC gl3wVertexAttribL2dv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL2DVPROC
gl3wVertexAttribL3d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL3DPROC gl3wVertexAttribL3d;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL3DPROC
gl3wVertexAttribL3dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL3DVPROC gl3wVertexAttribL3dv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL3DVPROC
gl3wVertexAttribL4d	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL4DPROC gl3wVertexAttribL4d;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL4DPROC
gl3wVertexAttribL4dv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBL4DVPROC gl3wVertexAttribL4dv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBL4DVPROC
gl3wVertexAttribLFormat	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBLFORMATPROC gl3wVertexAttribLFormat;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBLFORMATPROC
gl3wVertexAttribLPointer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBLPOINTERPROC gl3wVertexAttribLPointer;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBLPOINTERPROC
gl3wVertexAttribP1ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP1UIPROC gl3wVertexAttribP1ui;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP1UIPROC
gl3wVertexAttribP1uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP1UIVPROC gl3wVertexAttribP1uiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP1UIVPROC
gl3wVertexAttribP2ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP2UIPROC gl3wVertexAttribP2ui;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP2UIPROC
gl3wVertexAttribP2uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP2UIVPROC gl3wVertexAttribP2uiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP2UIVPROC
gl3wVertexAttribP3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP3UIPROC gl3wVertexAttribP3ui;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP3UIPROC
gl3wVertexAttribP3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP3UIVPROC gl3wVertexAttribP3uiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP3UIVPROC
gl3wVertexAttribP4ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP4UIPROC gl3wVertexAttribP4ui;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP4UIPROC
gl3wVertexAttribP4uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBP4UIVPROC gl3wVertexAttribP4uiv;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBP4UIVPROC
gl3wVertexAttribPointer	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXATTRIBPOINTERPROC gl3wVertexAttribPointer;$/;"	v	typeref:typename:PFNGLVERTEXATTRIBPOINTERPROC
gl3wVertexBindingDivisor	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXBINDINGDIVISORPROC gl3wVertexBindingDivisor;$/;"	v	typeref:typename:PFNGLVERTEXBINDINGDIVISORPROC
gl3wVertexP2ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP2UIPROC gl3wVertexP2ui;$/;"	v	typeref:typename:PFNGLVERTEXP2UIPROC
gl3wVertexP2uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP2UIVPROC gl3wVertexP2uiv;$/;"	v	typeref:typename:PFNGLVERTEXP2UIVPROC
gl3wVertexP3ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP3UIPROC gl3wVertexP3ui;$/;"	v	typeref:typename:PFNGLVERTEXP3UIPROC
gl3wVertexP3uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP3UIVPROC gl3wVertexP3uiv;$/;"	v	typeref:typename:PFNGLVERTEXP3UIVPROC
gl3wVertexP4ui	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP4UIPROC gl3wVertexP4ui;$/;"	v	typeref:typename:PFNGLVERTEXP4UIPROC
gl3wVertexP4uiv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVERTEXP4UIVPROC gl3wVertexP4uiv;$/;"	v	typeref:typename:PFNGLVERTEXP4UIVPROC
gl3wViewport	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVIEWPORTPROC gl3wViewport;$/;"	v	typeref:typename:PFNGLVIEWPORTPROC
gl3wViewportArrayv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVIEWPORTARRAYVPROC gl3wViewportArrayv;$/;"	v	typeref:typename:PFNGLVIEWPORTARRAYVPROC
gl3wViewportIndexedf	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVIEWPORTINDEXEDFPROC gl3wViewportIndexedf;$/;"	v	typeref:typename:PFNGLVIEWPORTINDEXEDFPROC
gl3wViewportIndexedfv	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLVIEWPORTINDEXEDFVPROC gl3wViewportIndexedfv;$/;"	v	typeref:typename:PFNGLVIEWPORTINDEXEDFVPROC
gl3wWaitSync	imgui/examples/libs/gl3w/GL/gl3w.c	/^PFNGLWAITSYNCPROC gl3wWaitSync;$/;"	v	typeref:typename:PFNGLWAITSYNCPROC
glActiveShaderProgram	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glActiveShaderProgram	/;"	d
glActiveTexture	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glActiveTexture	/;"	d
glAttachShader	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glAttachShader	/;"	d
glBeginConditionalRender	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBeginConditionalRender	/;"	d
glBeginQuery	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBeginQuery	/;"	d
glBeginQueryIndexed	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBeginQueryIndexed	/;"	d
glBeginTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBeginTransformFeedback	/;"	d
glBindAttribLocation	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindAttribLocation	/;"	d
glBindBuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindBuffer	/;"	d
glBindBufferBase	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindBufferBase	/;"	d
glBindBufferRange	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindBufferRange	/;"	d
glBindFragDataLocation	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindFragDataLocation	/;"	d
glBindFragDataLocationIndexed	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindFragDataLocationIndexed	/;"	d
glBindFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindFramebuffer	/;"	d
glBindImageTexture	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindImageTexture	/;"	d
glBindProgramPipeline	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindProgramPipeline	/;"	d
glBindRenderbuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindRenderbuffer	/;"	d
glBindSampler	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindSampler	/;"	d
glBindTexture	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindTexture	/;"	d
glBindTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindTransformFeedback	/;"	d
glBindVertexArray	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindVertexArray	/;"	d
glBindVertexBuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBindVertexBuffer	/;"	d
glBlendColor	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendColor	/;"	d
glBlendEquation	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquation	/;"	d
glBlendEquationSeparate	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationSeparate	/;"	d
glBlendEquationSeparatei	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationSeparatei	/;"	d
glBlendEquationSeparateiARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationSeparateiARB	/;"	d
glBlendEquationi	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationi	/;"	d
glBlendEquationiARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendEquationiARB	/;"	d
glBlendFunc	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFunc	/;"	d
glBlendFuncSeparate	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFuncSeparate	/;"	d
glBlendFuncSeparatei	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFuncSeparatei	/;"	d
glBlendFuncSeparateiARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFuncSeparateiARB	/;"	d
glBlendFunci	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFunci	/;"	d
glBlendFunciARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlendFunciARB	/;"	d
glBlitFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBlitFramebuffer	/;"	d
glBufferData	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBufferData	/;"	d
glBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glBufferSubData	/;"	d
glCheckFramebufferStatus	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCheckFramebufferStatus	/;"	d
glClampColor	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClampColor	/;"	d
glClear	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClear	/;"	d
glClearBufferData	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferData	/;"	d
glClearBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferSubData	/;"	d
glClearBufferfi	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferfi	/;"	d
glClearBufferfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferfv	/;"	d
glClearBufferiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferiv	/;"	d
glClearBufferuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearBufferuiv	/;"	d
glClearColor	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearColor	/;"	d
glClearDepth	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearDepth	/;"	d
glClearDepthf	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearDepthf	/;"	d
glClearNamedBufferDataEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearNamedBufferDataEXT	/;"	d
glClearNamedBufferSubDataEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearNamedBufferSubDataEXT	/;"	d
glClearStencil	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClearStencil	/;"	d
glClientWaitSync	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glClientWaitSync	/;"	d
glColorMask	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glColorMask	/;"	d
glColorMaski	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glColorMaski	/;"	d
glColorP3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glColorP3ui	/;"	d
glColorP3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glColorP3uiv	/;"	d
glColorP4ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glColorP4ui	/;"	d
glColorP4uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glColorP4uiv	/;"	d
glCompileShader	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCompileShader	/;"	d
glCompileShaderIncludeARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCompileShaderIncludeARB	/;"	d
glCompressedTexImage1D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexImage1D	/;"	d
glCompressedTexImage2D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexImage2D	/;"	d
glCompressedTexImage3D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexImage3D	/;"	d
glCompressedTexSubImage1D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexSubImage1D	/;"	d
glCompressedTexSubImage2D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexSubImage2D	/;"	d
glCompressedTexSubImage3D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCompressedTexSubImage3D	/;"	d
glCopyBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyBufferSubData	/;"	d
glCopyImageSubData	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyImageSubData	/;"	d
glCopyTexImage1D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexImage1D	/;"	d
glCopyTexImage2D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexImage2D	/;"	d
glCopyTexSubImage1D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexSubImage1D	/;"	d
glCopyTexSubImage2D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexSubImage2D	/;"	d
glCopyTexSubImage3D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCopyTexSubImage3D	/;"	d
glCreateProgram	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCreateProgram	/;"	d
glCreateShader	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCreateShader	/;"	d
glCreateShaderProgramv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCreateShaderProgramv	/;"	d
glCreateSyncFromCLeventARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCreateSyncFromCLeventARB	/;"	d
glCullFace	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glCullFace	/;"	d
glDebugMessageCallback	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageCallback	/;"	d
glDebugMessageCallbackARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageCallbackARB	/;"	d
glDebugMessageControl	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageControl	/;"	d
glDebugMessageControlARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageControlARB	/;"	d
glDebugMessageInsert	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageInsert	/;"	d
glDebugMessageInsertARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDebugMessageInsertARB	/;"	d
glDeleteBuffers	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteBuffers	/;"	d
glDeleteFramebuffers	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteFramebuffers	/;"	d
glDeleteNamedStringARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteNamedStringARB	/;"	d
glDeleteProgram	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteProgram	/;"	d
glDeleteProgramPipelines	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteProgramPipelines	/;"	d
glDeleteQueries	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteQueries	/;"	d
glDeleteRenderbuffers	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteRenderbuffers	/;"	d
glDeleteSamplers	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteSamplers	/;"	d
glDeleteShader	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteShader	/;"	d
glDeleteSync	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteSync	/;"	d
glDeleteTextures	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteTextures	/;"	d
glDeleteTransformFeedbacks	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteTransformFeedbacks	/;"	d
glDeleteVertexArrays	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDeleteVertexArrays	/;"	d
glDepthFunc	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthFunc	/;"	d
glDepthMask	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthMask	/;"	d
glDepthRange	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthRange	/;"	d
glDepthRangeArrayv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthRangeArrayv	/;"	d
glDepthRangeIndexed	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthRangeIndexed	/;"	d
glDepthRangef	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDepthRangef	/;"	d
glDetachShader	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDetachShader	/;"	d
glDisable	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDisable	/;"	d
glDisableVertexAttribArray	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDisableVertexAttribArray	/;"	d
glDisablei	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDisablei	/;"	d
glDispatchCompute	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDispatchCompute	/;"	d
glDispatchComputeIndirect	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDispatchComputeIndirect	/;"	d
glDrawArrays	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawArrays	/;"	d
glDrawArraysIndirect	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawArraysIndirect	/;"	d
glDrawArraysInstanced	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawArraysInstanced	/;"	d
glDrawArraysInstancedBaseInstance	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawArraysInstancedBaseInstance	/;"	d
glDrawBuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawBuffer	/;"	d
glDrawBuffers	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawBuffers	/;"	d
glDrawElements	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElements	/;"	d
glDrawElementsBaseVertex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsBaseVertex	/;"	d
glDrawElementsIndirect	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsIndirect	/;"	d
glDrawElementsInstanced	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsInstanced	/;"	d
glDrawElementsInstancedBaseInstance	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsInstancedBaseInstance	/;"	d
glDrawElementsInstancedBaseVertex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsInstancedBaseVertex	/;"	d
glDrawElementsInstancedBaseVertexBaseInstance	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawElementsInstancedBaseVertexBaseInstance	/;"	d
glDrawRangeElements	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawRangeElements	/;"	d
glDrawRangeElementsBaseVertex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawRangeElementsBaseVertex	/;"	d
glDrawTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawTransformFeedback	/;"	d
glDrawTransformFeedbackInstanced	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawTransformFeedbackInstanced	/;"	d
glDrawTransformFeedbackStream	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawTransformFeedbackStream	/;"	d
glDrawTransformFeedbackStreamInstanced	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glDrawTransformFeedbackStreamInstanced	/;"	d
glEnable	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glEnable	/;"	d
glEnableVertexAttribArray	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glEnableVertexAttribArray	/;"	d
glEnablei	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glEnablei	/;"	d
glEndConditionalRender	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glEndConditionalRender	/;"	d
glEndQuery	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glEndQuery	/;"	d
glEndQueryIndexed	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glEndQueryIndexed	/;"	d
glEndTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glEndTransformFeedback	/;"	d
glFenceSync	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFenceSync	/;"	d
glFinish	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFinish	/;"	d
glFlush	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFlush	/;"	d
glFlushMappedBufferRange	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFlushMappedBufferRange	/;"	d
glFramebufferParameteri	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferParameteri	/;"	d
glFramebufferRenderbuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferRenderbuffer	/;"	d
glFramebufferTexture	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTexture	/;"	d
glFramebufferTexture1D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTexture1D	/;"	d
glFramebufferTexture2D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTexture2D	/;"	d
glFramebufferTexture3D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTexture3D	/;"	d
glFramebufferTextureLayer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFramebufferTextureLayer	/;"	d
glFrontFace	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glFrontFace	/;"	d
glGenBuffers	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenBuffers	/;"	d
glGenFramebuffers	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenFramebuffers	/;"	d
glGenProgramPipelines	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenProgramPipelines	/;"	d
glGenQueries	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenQueries	/;"	d
glGenRenderbuffers	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenRenderbuffers	/;"	d
glGenSamplers	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenSamplers	/;"	d
glGenTextures	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenTextures	/;"	d
glGenTransformFeedbacks	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenTransformFeedbacks	/;"	d
glGenVertexArrays	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenVertexArrays	/;"	d
glGenerateMipmap	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGenerateMipmap	/;"	d
glGetActiveAtomicCounterBufferiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveAtomicCounterBufferiv	/;"	d
glGetActiveAttrib	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveAttrib	/;"	d
glGetActiveSubroutineName	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveSubroutineName	/;"	d
glGetActiveSubroutineUniformName	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveSubroutineUniformName	/;"	d
glGetActiveSubroutineUniformiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveSubroutineUniformiv	/;"	d
glGetActiveUniform	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniform	/;"	d
glGetActiveUniformBlockName	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniformBlockName	/;"	d
glGetActiveUniformBlockiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniformBlockiv	/;"	d
glGetActiveUniformName	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniformName	/;"	d
glGetActiveUniformsiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetActiveUniformsiv	/;"	d
glGetAttachedShaders	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetAttachedShaders	/;"	d
glGetAttribLocation	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetAttribLocation	/;"	d
glGetBooleani_v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBooleani_v	/;"	d
glGetBooleanv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBooleanv	/;"	d
glGetBufferParameteri64v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBufferParameteri64v	/;"	d
glGetBufferParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBufferParameteriv	/;"	d
glGetBufferPointerv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBufferPointerv	/;"	d
glGetBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetBufferSubData	/;"	d
glGetCompressedTexImage	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetCompressedTexImage	/;"	d
glGetDebugMessageLog	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetDebugMessageLog	/;"	d
glGetDebugMessageLogARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetDebugMessageLogARB	/;"	d
glGetDoublei_v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetDoublei_v	/;"	d
glGetDoublev	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetDoublev	/;"	d
glGetError	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetError	/;"	d
glGetFloati_v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFloati_v	/;"	d
glGetFloatv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFloatv	/;"	d
glGetFragDataIndex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFragDataIndex	/;"	d
glGetFragDataLocation	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFragDataLocation	/;"	d
glGetFramebufferAttachmentParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFramebufferAttachmentParameteriv	/;"	d
glGetFramebufferParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetFramebufferParameteriv	/;"	d
glGetGraphicsResetStatusARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetGraphicsResetStatusARB	/;"	d
glGetInteger64i_v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetInteger64i_v	/;"	d
glGetInteger64v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetInteger64v	/;"	d
glGetIntegeri_v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetIntegeri_v	/;"	d
glGetIntegerv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetIntegerv	/;"	d
glGetInternalformati64v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetInternalformati64v	/;"	d
glGetInternalformativ	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetInternalformativ	/;"	d
glGetMultisamplefv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetMultisamplefv	/;"	d
glGetNamedFramebufferParameterivEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetNamedFramebufferParameterivEXT	/;"	d
glGetNamedStringARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetNamedStringARB	/;"	d
glGetNamedStringivARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetNamedStringivARB	/;"	d
glGetObjectLabel	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetObjectLabel	/;"	d
glGetObjectPtrLabel	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetObjectPtrLabel	/;"	d
glGetPointerv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetPointerv	/;"	d
glGetProgramBinary	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramBinary	/;"	d
glGetProgramInfoLog	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramInfoLog	/;"	d
glGetProgramInterfaceiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramInterfaceiv	/;"	d
glGetProgramPipelineInfoLog	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramPipelineInfoLog	/;"	d
glGetProgramPipelineiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramPipelineiv	/;"	d
glGetProgramResourceIndex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceIndex	/;"	d
glGetProgramResourceLocation	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceLocation	/;"	d
glGetProgramResourceLocationIndex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceLocationIndex	/;"	d
glGetProgramResourceName	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceName	/;"	d
glGetProgramResourceiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramResourceiv	/;"	d
glGetProgramStageiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramStageiv	/;"	d
glGetProgramiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetProgramiv	/;"	d
glGetQueryIndexediv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryIndexediv	/;"	d
glGetQueryObjecti64v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryObjecti64v	/;"	d
glGetQueryObjectiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryObjectiv	/;"	d
glGetQueryObjectui64v	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryObjectui64v	/;"	d
glGetQueryObjectuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryObjectuiv	/;"	d
glGetQueryiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetQueryiv	/;"	d
glGetRenderbufferParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetRenderbufferParameteriv	/;"	d
glGetSamplerParameterIiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSamplerParameterIiv	/;"	d
glGetSamplerParameterIuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSamplerParameterIuiv	/;"	d
glGetSamplerParameterfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSamplerParameterfv	/;"	d
glGetSamplerParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSamplerParameteriv	/;"	d
glGetShaderInfoLog	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetShaderInfoLog	/;"	d
glGetShaderPrecisionFormat	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetShaderPrecisionFormat	/;"	d
glGetShaderSource	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetShaderSource	/;"	d
glGetShaderiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetShaderiv	/;"	d
glGetString	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetString	/;"	d
glGetStringi	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetStringi	/;"	d
glGetSubroutineIndex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSubroutineIndex	/;"	d
glGetSubroutineUniformLocation	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSubroutineUniformLocation	/;"	d
glGetSynciv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetSynciv	/;"	d
glGetTexImage	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexImage	/;"	d
glGetTexLevelParameterfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexLevelParameterfv	/;"	d
glGetTexLevelParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexLevelParameteriv	/;"	d
glGetTexParameterIiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexParameterIiv	/;"	d
glGetTexParameterIuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexParameterIuiv	/;"	d
glGetTexParameterfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexParameterfv	/;"	d
glGetTexParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTexParameteriv	/;"	d
glGetTransformFeedbackVarying	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetTransformFeedbackVarying	/;"	d
glGetUniformBlockIndex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformBlockIndex	/;"	d
glGetUniformIndices	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformIndices	/;"	d
glGetUniformLocation	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformLocation	/;"	d
glGetUniformSubroutineuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformSubroutineuiv	/;"	d
glGetUniformdv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformdv	/;"	d
glGetUniformfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformfv	/;"	d
glGetUniformiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformiv	/;"	d
glGetUniformuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetUniformuiv	/;"	d
glGetVertexAttribIiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribIiv	/;"	d
glGetVertexAttribIuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribIuiv	/;"	d
glGetVertexAttribLdv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribLdv	/;"	d
glGetVertexAttribPointerv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribPointerv	/;"	d
glGetVertexAttribdv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribdv	/;"	d
glGetVertexAttribfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribfv	/;"	d
glGetVertexAttribiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetVertexAttribiv	/;"	d
glGetnCompressedTexImageARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnCompressedTexImageARB	/;"	d
glGetnTexImageARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnTexImageARB	/;"	d
glGetnUniformdvARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnUniformdvARB	/;"	d
glGetnUniformfvARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnUniformfvARB	/;"	d
glGetnUniformivARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnUniformivARB	/;"	d
glGetnUniformuivARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glGetnUniformuivARB	/;"	d
glHint	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glHint	/;"	d
glInvalidateBufferData	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateBufferData	/;"	d
glInvalidateBufferSubData	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateBufferSubData	/;"	d
glInvalidateFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateFramebuffer	/;"	d
glInvalidateSubFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateSubFramebuffer	/;"	d
glInvalidateTexImage	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateTexImage	/;"	d
glInvalidateTexSubImage	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glInvalidateTexSubImage	/;"	d
glIsBuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsBuffer	/;"	d
glIsEnabled	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsEnabled	/;"	d
glIsEnabledi	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsEnabledi	/;"	d
glIsFramebuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsFramebuffer	/;"	d
glIsNamedStringARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsNamedStringARB	/;"	d
glIsProgram	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsProgram	/;"	d
glIsProgramPipeline	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsProgramPipeline	/;"	d
glIsQuery	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsQuery	/;"	d
glIsRenderbuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsRenderbuffer	/;"	d
glIsSampler	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsSampler	/;"	d
glIsShader	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsShader	/;"	d
glIsSync	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsSync	/;"	d
glIsTexture	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsTexture	/;"	d
glIsTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsTransformFeedback	/;"	d
glIsVertexArray	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glIsVertexArray	/;"	d
glLineWidth	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glLineWidth	/;"	d
glLinkProgram	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glLinkProgram	/;"	d
glLogicOp	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glLogicOp	/;"	d
glMapBuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMapBuffer	/;"	d
glMapBufferRange	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMapBufferRange	/;"	d
glMemoryBarrier	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMemoryBarrier	/;"	d
glMinSampleShading	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMinSampleShading	/;"	d
glMinSampleShadingARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMinSampleShadingARB	/;"	d
glMultiDrawArrays	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawArrays	/;"	d
glMultiDrawArraysIndirect	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawArraysIndirect	/;"	d
glMultiDrawElements	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawElements	/;"	d
glMultiDrawElementsBaseVertex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawElementsBaseVertex	/;"	d
glMultiDrawElementsIndirect	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiDrawElementsIndirect	/;"	d
glMultiTexCoordP1ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP1ui	/;"	d
glMultiTexCoordP1uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP1uiv	/;"	d
glMultiTexCoordP2ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP2ui	/;"	d
glMultiTexCoordP2uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP2uiv	/;"	d
glMultiTexCoordP3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP3ui	/;"	d
glMultiTexCoordP3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP3uiv	/;"	d
glMultiTexCoordP4ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP4ui	/;"	d
glMultiTexCoordP4uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glMultiTexCoordP4uiv	/;"	d
glNamedFramebufferParameteriEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glNamedFramebufferParameteriEXT	/;"	d
glNamedStringARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glNamedStringARB	/;"	d
glNormalP3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glNormalP3ui	/;"	d
glNormalP3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glNormalP3uiv	/;"	d
glObjectLabel	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glObjectLabel	/;"	d
glObjectPtrLabel	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glObjectPtrLabel	/;"	d
glPatchParameterfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPatchParameterfv	/;"	d
glPatchParameteri	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPatchParameteri	/;"	d
glPauseTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPauseTransformFeedback	/;"	d
glPixelStoref	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPixelStoref	/;"	d
glPixelStorei	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPixelStorei	/;"	d
glPointParameterf	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPointParameterf	/;"	d
glPointParameterfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPointParameterfv	/;"	d
glPointParameteri	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPointParameteri	/;"	d
glPointParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPointParameteriv	/;"	d
glPointSize	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPointSize	/;"	d
glPolygonMode	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPolygonMode	/;"	d
glPolygonOffset	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPolygonOffset	/;"	d
glPopDebugGroup	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPopDebugGroup	/;"	d
glPrimitiveRestartIndex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPrimitiveRestartIndex	/;"	d
glProgramBinary	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramBinary	/;"	d
glProgramParameteri	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramParameteri	/;"	d
glProgramUniform1d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1d	/;"	d
glProgramUniform1dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1dv	/;"	d
glProgramUniform1f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1f	/;"	d
glProgramUniform1fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1fv	/;"	d
glProgramUniform1i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1i	/;"	d
glProgramUniform1iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1iv	/;"	d
glProgramUniform1ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1ui	/;"	d
glProgramUniform1uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform1uiv	/;"	d
glProgramUniform2d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2d	/;"	d
glProgramUniform2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2dv	/;"	d
glProgramUniform2f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2f	/;"	d
glProgramUniform2fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2fv	/;"	d
glProgramUniform2i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2i	/;"	d
glProgramUniform2iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2iv	/;"	d
glProgramUniform2ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2ui	/;"	d
glProgramUniform2uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform2uiv	/;"	d
glProgramUniform3d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3d	/;"	d
glProgramUniform3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3dv	/;"	d
glProgramUniform3f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3f	/;"	d
glProgramUniform3fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3fv	/;"	d
glProgramUniform3i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3i	/;"	d
glProgramUniform3iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3iv	/;"	d
glProgramUniform3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3ui	/;"	d
glProgramUniform3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform3uiv	/;"	d
glProgramUniform4d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4d	/;"	d
glProgramUniform4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4dv	/;"	d
glProgramUniform4f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4f	/;"	d
glProgramUniform4fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4fv	/;"	d
glProgramUniform4i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4i	/;"	d
glProgramUniform4iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4iv	/;"	d
glProgramUniform4ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4ui	/;"	d
glProgramUniform4uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniform4uiv	/;"	d
glProgramUniformMatrix2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2dv	/;"	d
glProgramUniformMatrix2fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2fv	/;"	d
glProgramUniformMatrix2x3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2x3dv	/;"	d
glProgramUniformMatrix2x3fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2x3fv	/;"	d
glProgramUniformMatrix2x4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2x4dv	/;"	d
glProgramUniformMatrix2x4fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix2x4fv	/;"	d
glProgramUniformMatrix3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3dv	/;"	d
glProgramUniformMatrix3fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3fv	/;"	d
glProgramUniformMatrix3x2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3x2dv	/;"	d
glProgramUniformMatrix3x2fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3x2fv	/;"	d
glProgramUniformMatrix3x4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3x4dv	/;"	d
glProgramUniformMatrix3x4fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix3x4fv	/;"	d
glProgramUniformMatrix4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4dv	/;"	d
glProgramUniformMatrix4fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4fv	/;"	d
glProgramUniformMatrix4x2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4x2dv	/;"	d
glProgramUniformMatrix4x2fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4x2fv	/;"	d
glProgramUniformMatrix4x3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4x3dv	/;"	d
glProgramUniformMatrix4x3fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProgramUniformMatrix4x3fv	/;"	d
glProvokingVertex	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glProvokingVertex	/;"	d
glPushDebugGroup	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glPushDebugGroup	/;"	d
glQueryCounter	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glQueryCounter	/;"	d
glReadBuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glReadBuffer	/;"	d
glReadPixels	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glReadPixels	/;"	d
glReadnPixelsARB	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glReadnPixelsARB	/;"	d
glReleaseShaderCompiler	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glReleaseShaderCompiler	/;"	d
glRenderbufferStorage	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glRenderbufferStorage	/;"	d
glRenderbufferStorageMultisample	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glRenderbufferStorageMultisample	/;"	d
glResumeTransformFeedback	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glResumeTransformFeedback	/;"	d
glSampleCoverage	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSampleCoverage	/;"	d
glSampleMaski	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSampleMaski	/;"	d
glSamplerParameterIiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameterIiv	/;"	d
glSamplerParameterIuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameterIuiv	/;"	d
glSamplerParameterf	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameterf	/;"	d
glSamplerParameterfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameterfv	/;"	d
glSamplerParameteri	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameteri	/;"	d
glSamplerParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSamplerParameteriv	/;"	d
glScissor	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glScissor	/;"	d
glScissorArrayv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glScissorArrayv	/;"	d
glScissorIndexed	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glScissorIndexed	/;"	d
glScissorIndexedv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glScissorIndexedv	/;"	d
glSecondaryColorP3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSecondaryColorP3ui	/;"	d
glSecondaryColorP3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glSecondaryColorP3uiv	/;"	d
glShaderBinary	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glShaderBinary	/;"	d
glShaderSource	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glShaderSource	/;"	d
glShaderStorageBlockBinding	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glShaderStorageBlockBinding	/;"	d
glStencilFunc	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilFunc	/;"	d
glStencilFuncSeparate	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilFuncSeparate	/;"	d
glStencilMask	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilMask	/;"	d
glStencilMaskSeparate	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilMaskSeparate	/;"	d
glStencilOp	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilOp	/;"	d
glStencilOpSeparate	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glStencilOpSeparate	/;"	d
glTexBuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexBuffer	/;"	d
glTexBufferRange	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexBufferRange	/;"	d
glTexCoordP1ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP1ui	/;"	d
glTexCoordP1uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP1uiv	/;"	d
glTexCoordP2ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP2ui	/;"	d
glTexCoordP2uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP2uiv	/;"	d
glTexCoordP3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP3ui	/;"	d
glTexCoordP3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP3uiv	/;"	d
glTexCoordP4ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP4ui	/;"	d
glTexCoordP4uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexCoordP4uiv	/;"	d
glTexImage1D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage1D	/;"	d
glTexImage2D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage2D	/;"	d
glTexImage2DMultisample	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage2DMultisample	/;"	d
glTexImage3D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage3D	/;"	d
glTexImage3DMultisample	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexImage3DMultisample	/;"	d
glTexParameterIiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameterIiv	/;"	d
glTexParameterIuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameterIuiv	/;"	d
glTexParameterf	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameterf	/;"	d
glTexParameterfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameterfv	/;"	d
glTexParameteri	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameteri	/;"	d
glTexParameteriv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexParameteriv	/;"	d
glTexStorage1D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage1D	/;"	d
glTexStorage2D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage2D	/;"	d
glTexStorage2DMultisample	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage2DMultisample	/;"	d
glTexStorage3D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage3D	/;"	d
glTexStorage3DMultisample	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexStorage3DMultisample	/;"	d
glTexSubImage1D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexSubImage1D	/;"	d
glTexSubImage2D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexSubImage2D	/;"	d
glTexSubImage3D	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTexSubImage3D	/;"	d
glTextureBufferRangeEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureBufferRangeEXT	/;"	d
glTextureStorage1DEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage1DEXT	/;"	d
glTextureStorage2DEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage2DEXT	/;"	d
glTextureStorage2DMultisampleEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage2DMultisampleEXT	/;"	d
glTextureStorage3DEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage3DEXT	/;"	d
glTextureStorage3DMultisampleEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureStorage3DMultisampleEXT	/;"	d
glTextureView	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTextureView	/;"	d
glTransformFeedbackVaryings	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glTransformFeedbackVaryings	/;"	d
glUniform1d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1d	/;"	d
glUniform1dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1dv	/;"	d
glUniform1f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1f	/;"	d
glUniform1fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1fv	/;"	d
glUniform1i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1i	/;"	d
glUniform1iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1iv	/;"	d
glUniform1ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1ui	/;"	d
glUniform1uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform1uiv	/;"	d
glUniform2d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2d	/;"	d
glUniform2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2dv	/;"	d
glUniform2f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2f	/;"	d
glUniform2fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2fv	/;"	d
glUniform2i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2i	/;"	d
glUniform2iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2iv	/;"	d
glUniform2ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2ui	/;"	d
glUniform2uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform2uiv	/;"	d
glUniform3d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3d	/;"	d
glUniform3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3dv	/;"	d
glUniform3f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3f	/;"	d
glUniform3fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3fv	/;"	d
glUniform3i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3i	/;"	d
glUniform3iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3iv	/;"	d
glUniform3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3ui	/;"	d
glUniform3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform3uiv	/;"	d
glUniform4d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4d	/;"	d
glUniform4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4dv	/;"	d
glUniform4f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4f	/;"	d
glUniform4fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4fv	/;"	d
glUniform4i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4i	/;"	d
glUniform4iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4iv	/;"	d
glUniform4ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4ui	/;"	d
glUniform4uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniform4uiv	/;"	d
glUniformBlockBinding	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformBlockBinding	/;"	d
glUniformMatrix2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2dv	/;"	d
glUniformMatrix2fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2fv	/;"	d
glUniformMatrix2x3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2x3dv	/;"	d
glUniformMatrix2x3fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2x3fv	/;"	d
glUniformMatrix2x4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2x4dv	/;"	d
glUniformMatrix2x4fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix2x4fv	/;"	d
glUniformMatrix3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3dv	/;"	d
glUniformMatrix3fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3fv	/;"	d
glUniformMatrix3x2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3x2dv	/;"	d
glUniformMatrix3x2fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3x2fv	/;"	d
glUniformMatrix3x4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3x4dv	/;"	d
glUniformMatrix3x4fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix3x4fv	/;"	d
glUniformMatrix4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4dv	/;"	d
glUniformMatrix4fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4fv	/;"	d
glUniformMatrix4x2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4x2dv	/;"	d
glUniformMatrix4x2fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4x2fv	/;"	d
glUniformMatrix4x3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4x3dv	/;"	d
glUniformMatrix4x3fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformMatrix4x3fv	/;"	d
glUniformSubroutinesuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUniformSubroutinesuiv	/;"	d
glUnmapBuffer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUnmapBuffer	/;"	d
glUseProgram	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUseProgram	/;"	d
glUseProgramStages	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glUseProgramStages	/;"	d
glValidateProgram	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glValidateProgram	/;"	d
glValidateProgramPipeline	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glValidateProgramPipeline	/;"	d
glVertexArrayBindVertexBufferEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayBindVertexBufferEXT	/;"	d
glVertexArrayVertexAttribBindingEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexAttribBindingEXT	/;"	d
glVertexArrayVertexAttribFormatEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexAttribFormatEXT	/;"	d
glVertexArrayVertexAttribIFormatEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexAttribIFormatEXT	/;"	d
glVertexArrayVertexAttribLFormatEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexAttribLFormatEXT	/;"	d
glVertexArrayVertexBindingDivisorEXT	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexArrayVertexBindingDivisorEXT	/;"	d
glVertexAttrib1d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1d	/;"	d
glVertexAttrib1dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1dv	/;"	d
glVertexAttrib1f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1f	/;"	d
glVertexAttrib1fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1fv	/;"	d
glVertexAttrib1s	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1s	/;"	d
glVertexAttrib1sv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib1sv	/;"	d
glVertexAttrib2d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2d	/;"	d
glVertexAttrib2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2dv	/;"	d
glVertexAttrib2f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2f	/;"	d
glVertexAttrib2fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2fv	/;"	d
glVertexAttrib2s	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2s	/;"	d
glVertexAttrib2sv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib2sv	/;"	d
glVertexAttrib3d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3d	/;"	d
glVertexAttrib3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3dv	/;"	d
glVertexAttrib3f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3f	/;"	d
glVertexAttrib3fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3fv	/;"	d
glVertexAttrib3s	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3s	/;"	d
glVertexAttrib3sv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib3sv	/;"	d
glVertexAttrib4Nbv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nbv	/;"	d
glVertexAttrib4Niv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Niv	/;"	d
glVertexAttrib4Nsv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nsv	/;"	d
glVertexAttrib4Nub	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nub	/;"	d
glVertexAttrib4Nubv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nubv	/;"	d
glVertexAttrib4Nuiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nuiv	/;"	d
glVertexAttrib4Nusv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4Nusv	/;"	d
glVertexAttrib4bv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4bv	/;"	d
glVertexAttrib4d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4d	/;"	d
glVertexAttrib4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4dv	/;"	d
glVertexAttrib4f	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4f	/;"	d
glVertexAttrib4fv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4fv	/;"	d
glVertexAttrib4iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4iv	/;"	d
glVertexAttrib4s	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4s	/;"	d
glVertexAttrib4sv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4sv	/;"	d
glVertexAttrib4ubv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4ubv	/;"	d
glVertexAttrib4uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4uiv	/;"	d
glVertexAttrib4usv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttrib4usv	/;"	d
glVertexAttribBinding	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribBinding	/;"	d
glVertexAttribDivisor	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribDivisor	/;"	d
glVertexAttribFormat	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribFormat	/;"	d
glVertexAttribI1i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI1i	/;"	d
glVertexAttribI1iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI1iv	/;"	d
glVertexAttribI1ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI1ui	/;"	d
glVertexAttribI1uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI1uiv	/;"	d
glVertexAttribI2i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI2i	/;"	d
glVertexAttribI2iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI2iv	/;"	d
glVertexAttribI2ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI2ui	/;"	d
glVertexAttribI2uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI2uiv	/;"	d
glVertexAttribI3i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI3i	/;"	d
glVertexAttribI3iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI3iv	/;"	d
glVertexAttribI3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI3ui	/;"	d
glVertexAttribI3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI3uiv	/;"	d
glVertexAttribI4bv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4bv	/;"	d
glVertexAttribI4i	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4i	/;"	d
glVertexAttribI4iv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4iv	/;"	d
glVertexAttribI4sv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4sv	/;"	d
glVertexAttribI4ubv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4ubv	/;"	d
glVertexAttribI4ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4ui	/;"	d
glVertexAttribI4uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4uiv	/;"	d
glVertexAttribI4usv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribI4usv	/;"	d
glVertexAttribIFormat	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribIFormat	/;"	d
glVertexAttribIPointer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribIPointer	/;"	d
glVertexAttribL1d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL1d	/;"	d
glVertexAttribL1dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL1dv	/;"	d
glVertexAttribL2d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL2d	/;"	d
glVertexAttribL2dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL2dv	/;"	d
glVertexAttribL3d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL3d	/;"	d
glVertexAttribL3dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL3dv	/;"	d
glVertexAttribL4d	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL4d	/;"	d
glVertexAttribL4dv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribL4dv	/;"	d
glVertexAttribLFormat	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribLFormat	/;"	d
glVertexAttribLPointer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribLPointer	/;"	d
glVertexAttribP1ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP1ui	/;"	d
glVertexAttribP1uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP1uiv	/;"	d
glVertexAttribP2ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP2ui	/;"	d
glVertexAttribP2uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP2uiv	/;"	d
glVertexAttribP3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP3ui	/;"	d
glVertexAttribP3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP3uiv	/;"	d
glVertexAttribP4ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP4ui	/;"	d
glVertexAttribP4uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribP4uiv	/;"	d
glVertexAttribPointer	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexAttribPointer	/;"	d
glVertexBindingDivisor	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexBindingDivisor	/;"	d
glVertexP2ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP2ui	/;"	d
glVertexP2uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP2uiv	/;"	d
glVertexP3ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP3ui	/;"	d
glVertexP3uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP3uiv	/;"	d
glVertexP4ui	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP4ui	/;"	d
glVertexP4uiv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glVertexP4uiv	/;"	d
glViewport	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glViewport	/;"	d
glViewportArrayv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glViewportArrayv	/;"	d
glViewportIndexedf	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glViewportIndexedf	/;"	d
glViewportIndexedfv	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glViewportIndexedfv	/;"	d
glWaitSync	imgui/examples/libs/gl3w/GL/gl3w.h	/^#define glWaitSync	/;"	d
glfw_error_callback	imgui/examples/example_glfw_metal/main.mm	/^static void glfw_error_callback(int error, const char* description)$/;"	f
glfw_error_callback	imgui/examples/example_glfw_opengl2/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	imgui/examples/example_glfw_opengl3/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	imgui/examples/example_glfw_vulkan/main.cpp	/^static void glfw_error_callback(int error, const char* description)$/;"	f	typeref:typename:void	file:
glfw_error_callback	misc-util.h	/^void glfw_error_callback(int error, const char *description) {$/;"	f	typeref:typename:void
glfw_resize_callback	imgui/examples/example_glfw_vulkan/main.cpp	/^static void glfw_resize_callback(GLFWwindow*, int w, int h)$/;"	f	typeref:typename:void	file:
glut_display_func	imgui/examples/example_glut_opengl2/main.cpp	/^void glut_display_func()$/;"	f	typeref:typename:void
glyf	imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
gpos	imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
green	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* green;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned short *
greenBits	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    int greenBits;$/;"	m	struct:GLFWvidmode	typeref:typename:int
gsubrs	imgui/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
h	imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
h	imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
h	imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anonea0503650808	typeref:typename:int
h_oversample	imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anonea0503650508	typeref:typename:unsigned char
h_oversample	imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
has_preferred_x	imgui/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anon22a5596e0308	typeref:typename:unsigned char
hash	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
head	imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
head	imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap_chunk *
height	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWimage	typeref:typename:int
height	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    int height;$/;"	m	struct:GLFWvidmode	typeref:typename:int
height	imgui/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context	typeref:typename:int
height	imgui/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anon22a5596e0508	typeref:typename:float
height	imgui/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
height	imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anonea0503651108	typeref:typename:int
heuristic	imgui/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context	typeref:typename:int
hhea	imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
hmtx	imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
iOS / OSX Metal example	imgui/examples/example_apple_metal/README.md	/^# iOS \/ OSX Metal example$/;"	c
id	imgui/examples/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_CreateDeviceObjects(id<MTLDevice> device);$/;"	C	protocol:MTLDevice
id	imgui/examples/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_CreateFontsTexture(id<MTLDevice> device);$/;"	C	protocol:MTLDevice
id	imgui/examples/imgui_impl_metal.h	/^IMGUI_IMPL_API bool ImGui_ImplMetal_Init(id<MTLDevice> device);$/;"	C	protocol:MTLDevice
id	imgui/examples/imgui_impl_osx.mm	/^+ (id)_windowResizeNorthWestSouthEastCursor;$/;"	C	interface:NSCursor
id	imgui/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	structs.h	/^  uint64_t id; \/\/ the sqlite rowid$/;"	m	struct:song	typeref:typename:uint64_t
ideas/notes	notes.md	/^# ideas\/notes$/;"	c
ignored	imgui/examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	m	struct:__anon1561e7070108	typeref:typename:int
image	structs.h	/^struct image {$/;"	s
imageMenu	imageMenu.cpp	/^bool imageMenu(std::vector<image> &image_list) {$/;"	f	typeref:typename:bool
imgCallback	sqlite_routines.cpp	/^int imgCallback(void * data, int argc, char **argv, char **colname){$/;"	f	typeref:typename:int
img_list	main.cpp	/^std::string img_list;$/;"	v	typeref:typename:std::string
imgui_example_glfw_vulkan	imgui/examples/example_glfw_vulkan/CMakeLists.txt	/^project(imgui_example_glfw_vulkan C CXX)$/;"	p
imgui_freetype	imgui/misc/freetype/README.md	/^# imgui_freetype$/;"	c
indexToLocFormat	imgui/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_from_ptr	imgui/imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:int
index_map	imgui/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
init	imgui/examples/imgui_impl_metal.mm	/^- (instancetype)init {$/;"	m	implementation:MetalContext
initWithBuffer:	imgui/examples/imgui_impl_metal.mm	/^- (instancetype)initWithBuffer:(id<MTLBuffer>)buffer;$/;"	m	interface:MetalBuffer
initWithBuffer:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalBuffer
initWithRenderPassDescriptor:	imgui/examples/imgui_impl_metal.mm	/^- (instancetype)initWithRenderPassDescriptor:(MTLRenderPassDescriptor *)renderPassDescriptor;$/;"	m	interface:FramebufferDescriptor
initWithRenderPassDescriptor:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
initWithView:	imgui/examples/example_apple_metal/Shared/Renderer.h	/^-(nonnull instancetype)initWithView:(nonnull MTKView *)view;$/;"	m	interface:Renderer
initWithView:	imgui/examples/example_apple_metal/Shared/Renderer.mm	/^-(nonnull instancetype)initWithView:(nonnull MTKView *)view;$/;"	m	implementation:Renderer
init_and_open_db	sqlite_routines.cpp	/^db_error init_and_open_db(char *fname, sqlite3 **out_db) {$/;"	f	typeref:typename:db_error
init_mode	imgui/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context	typeref:typename:int
initialized	imgui/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anon22a5596e0308	typeref:typename:unsigned char
insert	imgui/imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:T *
insert_length	imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anon22a5596e0108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
insert_mode	imgui/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anon22a5596e0308	typeref:typename:unsigned char
int32_t	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef __int32 int32_t;$/;"	t	typeref:typename:__int32
int32_t	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef long int int32_t;$/;"	t	typeref:typename:long int
int64_t	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef __int64 int64_t;$/;"	t	typeref:typename:__int64
int64_t	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef long int int64_t;$/;"	t	typeref:typename:long int
int64_t	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef long long int int64_t;$/;"	t	typeref:typename:long long int
invert	imgui/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	typeref:typename:int
isEqual:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:FramebufferDescriptor
isSpace	misc-util.h	/^bool isSpace(std::string input){$/;"	f	typeref:typename:bool
is_separator	imgui/imgui_widgets.cpp	/^static bool is_separator(unsigned int c)                                        { return ImCharI/;"	f	namespace:ImStb	typeref:typename:bool	file:
is_word_boundary	imgui/imstb_textedit.h	/^static int is_word_boundary( STB_TEXTEDIT_STRING *str, int idx )$/;"	f	typeref:typename:int
is_word_boundary_from_left	imgui/imgui_widgets.cpp	/^static int  is_word_boundary_from_left(STB_TEXTEDIT_STRING* obj, int idx)       { return idx > 0/;"	f	namespace:ImStb	typeref:typename:int	file:
is_word_boundary_from_right	imgui/imgui_widgets.cpp	/^static int  is_word_boundary_from_right(STB_TEXTEDIT_STRING* obj, int idx)      { return idx > 0/;"	f	namespace:ImStb	typeref:typename:int	file:
iterator	imgui/imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector	typeref:typename:value_type *
kern	imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
key	imgui/imgui.h	/^        ImGuiID key;$/;"	m	struct:ImGuiStorage::ImGuiStoragePair	typeref:typename:ImGuiID
keyDown:	imgui/examples/example_apple_opengl2/main.mm	/^-(void)keyDown:(NSEvent *)event         { ImGui_ImplOSX_HandleEvent(event, self); }$/;"	m	implementation:ImGuiExampleView
keyUp:	imgui/examples/example_apple_opengl2/main.mm	/^-(void)keyUp:(NSEvent *)event           { ImGui_ImplOSX_HandleEvent(event, self); }$/;"	m	implementation:ImGuiExampleView
key_callback	misc-util.h	/^void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)$/;"	f	typeref:typename:void
lastBufferCachePurge	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, assign) NSTimeInterval lastBufferCachePurge;$/;"	p	interface:MetalContext
lastReuseTime	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, assign) NSTimeInterval lastReuseTime;$/;"	p	interface:MetalBuffer
length	imgui/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon22a5596e0508	typeref:typename:int
libgl	imgui/examples/libs/gl3w/GL/gl3w.c	/^static HMODULE libgl;$/;"	v	typeref:typename:HMODULE	file:
libgl	imgui/examples/libs/gl3w/GL/gl3w.c	/^static void *libgl;$/;"	v	typeref:typename:void *	file:
load_procs	imgui/examples/libs/gl3w/GL/gl3w.c	/^static void load_procs(void)$/;"	f	typeref:typename:void	file:
loca	imgui/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
lyric_buf	main.cpp	/^std::string lyric_buf(lyric_buf_len+1, '\\0');$/;"	v	typeref:typename:std::string
lyric_buf_len	main.cpp	/^const uint32_t lyric_buf_len = 200;$/;"	v	typeref:typename:const uint32_t
lyricbuf	main.cpp	/^std::string lyricbuf(lyricbuflen, '\\0' );$/;"	v	typeref:typename:std::string
lyricbuflen	main.cpp	/^const int lyricbuflen = 1024;$/;"	v	typeref:typename:const int
m_clientHeight	imgui/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_clientHeight;									\/* Height of screen *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint16_t
m_clientName	imgui/examples/libs/usynergy/uSynergy.h	/^	const char*						m_clientName;									\/* Name of Synergy Screen \/ Client *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:const char *
m_clientWidth	imgui/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_clientWidth;									\/* Width of screen *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint16_t
m_clipboardCallback	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyClipboardCallback		m_clipboardCallback;							\/* Callback for clipboard events *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyClipboardCallback
m_connectFunc	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyConnectFunc				m_connectFunc;									\/* Connect function *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyConnectFunc
m_connected	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_connected;									\/* Is our socket connected? *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyBool
m_cookie	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyCookie					m_cookie;										\/* Cookie pointer passed to callback functions (can be N/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyCookie
m_getTimeFunc	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyGetTimeFunc				m_getTimeFunc;									\/* Get current time function *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyGetTimeFunc
m_hasReceivedHello	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_hasReceivedHello;								\/* Have we received a 'Hello' from the server? *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyBool
m_isCaptured	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_isCaptured;									\/* Is Synergy active (i.e. this client is receiving inp/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyBool
m_joystickButtons	imgui/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_joystickButtons[USYNERGY_NUM_JOYSTICKS];		\/* Joystick button state *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint16_t[]
m_joystickCallback	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyJoystickCallback		m_joystickCallback;								\/* Callback for joystick events *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyJoystickCallback
m_joystickSticks	imgui/examples/libs/usynergy/uSynergy.h	/^	int8_t							m_joystickSticks[USYNERGY_NUM_JOYSTICKS][4];	\/* Joystick stick position in 2 axes/;"	m	struct:__anon1561e7070208	typeref:typename:int8_t[][4]
m_keyboardCallback	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyKeyboardCallback		m_keyboardCallback;								\/* Callback for keyboard events *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyKeyboardCallback
m_lastMessageTime	imgui/examples/libs/usynergy/uSynergy.h	/^	uint32_t						m_lastMessageTime;								\/* Time at which last message was received *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint32_t
m_mouseButtonLeft	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonLeft;								\/* Mouse left button *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyBool
m_mouseButtonMiddle	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonMiddle;							\/* Mouse middle button *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyBool
m_mouseButtonRight	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyBool					m_mouseButtonRight;								\/* Mouse right button *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyBool
m_mouseCallback	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyMouseCallback			m_mouseCallback;								\/* Callback for mouse events *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyMouseCallback
m_mouseWheelX	imgui/examples/libs/usynergy/uSynergy.h	/^	int16_t							m_mouseWheelX;									\/* Mouse wheel X position *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:int16_t
m_mouseWheelY	imgui/examples/libs/usynergy/uSynergy.h	/^	int16_t							m_mouseWheelY;									\/* Mouse wheel Y position *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:int16_t
m_mouseX	imgui/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_mouseX;										\/* Mouse X position *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint16_t
m_mouseY	imgui/examples/libs/usynergy/uSynergy.h	/^	uint16_t						m_mouseY;										\/* Mouse Y position *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint16_t
m_receiveBuffer	imgui/examples/libs/usynergy/uSynergy.h	/^	uint8_t							m_receiveBuffer[USYNERGY_RECEIVE_BUFFER_SIZE];	\/* Receive buffer *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint8_t[]
m_receiveFunc	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyReceiveFunc				m_receiveFunc;									\/* Receive data function *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyReceiveFunc
m_receiveOfs	imgui/examples/libs/usynergy/uSynergy.h	/^	int								m_receiveOfs;									\/* Receive buffer offset *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:int
m_replyBuffer	imgui/examples/libs/usynergy/uSynergy.h	/^	uint8_t							m_replyBuffer[USYNERGY_REPLY_BUFFER_SIZE];		\/* Reply buffer *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint8_t[]
m_replyCur	imgui/examples/libs/usynergy/uSynergy.h	/^	uint8_t*						m_replyCur;										\/* Write offset into reply buffer *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint8_t *
m_screenActiveCallback	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyScreenActiveCallback	m_screenActiveCallback;							\/* Callback for entering and leavin/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyScreenActiveCallback
m_sendFunc	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergySendFunc				m_sendFunc;										\/* Send data function *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergySendFunc
m_sequenceNumber	imgui/examples/libs/usynergy/uSynergy.h	/^	uint32_t						m_sequenceNumber;								\/* Packet sequence number *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uint32_t
m_sleepFunc	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergySleepFunc				m_sleepFunc;									\/* Thread sleep function *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergySleepFunc
m_traceFunc	imgui/examples/libs/usynergy/uSynergy.h	/^	uSynergyTraceFunc				m_traceFunc;									\/* Function for tracing status (can be NULL) *\/$/;"	m	struct:__anon1561e7070208	typeref:typename:uSynergyTraceFunc
main	imgui/examples/example_allegro5/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_apple_metal/Shared/main.m	/^int main(int argc, char * argv[]) {$/;"	f
main	imgui/examples/example_apple_metal/Shared/main.m	/^int main(int argc, const char * argv[]) {$/;"	f
main	imgui/examples/example_apple_opengl2/main.mm	/^int main(int argc, const char* argv[])$/;"	f
main	imgui/examples/example_emscripten/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_glfw_metal/main.mm	/^int main(int, char**)$/;"	f
main	imgui/examples/example_glfw_opengl2/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_glfw_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_glfw_vulkan/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_glut_opengl2/main.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	imgui/examples/example_marmalade/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_null/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_sdl_directx11/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_sdl_opengl2/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_sdl_opengl3/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_sdl_vulkan/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_win32_directx10/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_win32_directx11/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_win32_directx12/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/examples/example_win32_directx9/main.cpp	/^int main(int, char**)$/;"	f	typeref:typename:int
main	imgui/misc/fonts/binary_to_compressed_c.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	main.cpp	/^int main(int, char **) {$/;"	f	typeref:typename:int
main_clipboard	imgui/imgui.cpp	/^static PasteboardRef main_clipboard = 0;$/;"	v	typeref:typename:PasteboardRef	file:
main_loop	imgui/examples/example_emscripten/main.cpp	/^void main_loop(void* arg)$/;"	f	typeref:typename:void
major	imgui/examples/libs/gl3w/GL/gl3w.c	/^	int major, minor;$/;"	m	struct:__anon23d609b20108	typeref:typename:int	file:
makeDeviceObjectsWithDevice:	imgui/examples/imgui_impl_metal.mm	/^- (void)makeDeviceObjectsWithDevice:(id<MTLDevice>)device;$/;"	m	interface:MetalContext
makeDeviceObjectsWithDevice:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
makeFontTextureWithDevice:	imgui/examples/imgui_impl_metal.mm	/^- (void)makeFontTextureWithDevice:(id<MTLDevice>)device;$/;"	m	interface:MetalContext
makeFontTextureWithDevice:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
mapCharacterToKey	imgui/examples/imgui_impl_osx.mm	/^static int mapCharacterToKey(int c)$/;"	f
max_x	imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anonea0503650f08	typeref:typename:stbtt_int32
max_y	imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anonea0503650f08	typeref:typename:stbtt_int32
min_x	imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anonea0503650f08	typeref:typename:stbtt_int32
min_y	imgui/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anonea0503650f08	typeref:typename:stbtt_int32
minor	imgui/examples/libs/gl3w/GL/gl3w.c	/^	int major, minor;$/;"	m	struct:__anon23d609b20108	typeref:typename:int	file:
misc	notes.md	/^## misc$/;"	s
mode	misc-util.h	/^GLFWvidmode* mode = NULL; $/;"	v	typeref:typename:GLFWvidmode *
mouseDown:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)mouseDown:(NSEvent *)event {$/;"	m	implementation:ViewController
mouseDown:	imgui/examples/example_apple_opengl2/main.mm	/^-(void)mouseDown:(NSEvent *)event       { ImGui_ImplOSX_HandleEvent(event, self); }$/;"	m	implementation:ImGuiExampleView
mouseDragged:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)mouseDragged:(NSEvent *)event {$/;"	m	implementation:ViewController
mouseDragged:	imgui/examples/example_apple_opengl2/main.mm	/^-(void)mouseDragged:(NSEvent *)event    { ImGui_ImplOSX_HandleEvent(event, self); }$/;"	m	implementation:ImGuiExampleView
mouseMoved:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)mouseMoved:(NSEvent *)event {$/;"	m	implementation:ViewController
mouseMoved:	imgui/examples/example_apple_opengl2/main.mm	/^-(void)mouseMoved:(NSEvent *)event      { ImGui_ImplOSX_HandleEvent(event, self); }$/;"	m	implementation:ImGuiExampleView
mouseUp:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)mouseUp:(NSEvent *)event {$/;"	m	implementation:ViewController
mouseUp:	imgui/examples/example_apple_opengl2/main.mm	/^-(void)mouseUp:(NSEvent *)event         { ImGui_ImplOSX_HandleEvent(event, self); }$/;"	m	implementation:ImGuiExampleView
mtkView	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (MTKView *)mtkView {$/;"	m	implementation:ViewController
mtkView:drawableSizeWillChange:	imgui/examples/example_apple_metal/Shared/Renderer.mm	/^{$/;"	m	implementation:Renderer
mvp	imgui/examples/imgui_impl_dx10.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER	typeref:typename:float[4][4]	file:
mvp	imgui/examples/imgui_impl_dx11.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER	typeref:typename:float[4][4]	file:
mvp	imgui/examples/imgui_impl_dx12.cpp	/^    float   mvp[4][4];$/;"	m	struct:VERTEX_CONSTANT_BUFFER	typeref:typename:float[4][4]	file:
my_display_code	imgui/examples/example_glut_opengl2/main.cpp	/^void my_display_code()$/;"	f	typeref:typename:void
name	structs.h	/^  std::string name;$/;"	m	struct:image	typeref:typename:std::string
name	structs.h	/^  std::string name;$/;"	m	struct:song	typeref:typename:std::string
name	structs.h	/^  std::string name;$/;"	m	struct:song_part	typeref:typename:std::string
next	imgui/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_node *
next	imgui/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge *
next	imgui/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk *
next_chunk	imgui/imgui_internal.h	/^    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()/;"	f	struct:ImChunkStream	typeref:typename:T *
nodes	imgui/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
nonatomic	imgui/examples/example_apple_metal/Shared/Renderer.mm	/^@property (nonatomic, strong) id <MTLDevice> device;$/;"	C	interface:Renderer	protocols:MTLDevice
nonatomic	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^@property (nonatomic, readonly) MTKView *mtkView;$/;"	C	interface:ViewController
numGlyphs	imgui/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
num_chars	imgui/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anon22a5596e0408	typeref:typename:int
num_chars	imgui/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anonea0503650508	typeref:typename:int
num_nodes	imgui/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context	typeref:typename:int
num_remaining_in_head_chunk	imgui/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap	typeref:typename:int
num_vertices	imgui/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anonea0503650f08	typeref:typename:int
offset_from_ptr	imgui/imgui_internal.h	/^    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t /;"	f	struct:ImChunkStream	typeref:typename:int
open_libgl	imgui/examples/libs/gl3w/GL/gl3w.c	/^static void open_libgl(void)$/;"	f	typeref:typename:void	file:
operator *	imgui/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator *	imgui/imgui_internal.h	/^static inline ImVec2 operator*(const ImVec2& lhs, const float rhs)              { return ImVec2(/;"	f	typeref:typename:ImVec2
operator *	imgui/imgui_internal.h	/^static inline ImVec4 operator*(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator *=	imgui/imgui_internal.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)                  { lhs.x *= rhs; /;"	f	typeref:typename:ImVec2 &
operator +	imgui/imgui_internal.h	/^static inline ImVec2 operator+(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator +	imgui/imgui_internal.h	/^static inline ImVec4 operator+(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator +=	imgui/imgui_internal.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x += rhs.x/;"	f	typeref:typename:ImVec2 &
operator -	imgui/imgui_internal.h	/^static inline ImVec2 operator-(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2(/;"	f	typeref:typename:ImVec2
operator -	imgui/imgui_internal.h	/^static inline ImVec4 operator-(const ImVec4& lhs, const ImVec4& rhs)            { return ImVec4(/;"	f	typeref:typename:ImVec4
operator -=	imgui/imgui_internal.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)                { lhs.x -= rhs.x/;"	f	typeref:typename:ImVec2 &
operator /	imgui/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const ImVec2& rhs)            { return ImVec2/;"	f	typeref:typename:ImVec2
operator /	imgui/imgui_internal.h	/^static inline ImVec2 operator\/(const ImVec2& lhs, const float rhs)              { return ImVec2/;"	f	typeref:typename:ImVec2
operator /=	imgui/imgui_internal.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)                  { lhs.x \/= rhs/;"	f	typeref:typename:ImVec2 &
operator =	imgui/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); memcpy(/;"	f	struct:ImVector	typeref:typename:ImVector<T> &
operator ImU32	imgui/imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvert/;"	f	struct:ImColor
operator ImVec4	imgui/imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator []	imgui/imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i/;"	f	struct:ImVector	typeref:typename:T &
operator []	imgui/imgui.h	/^    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	typeref:typename:char
operator []	imgui/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i < Size); return Data[i/;"	f	struct:ImVector	typeref:typename:const T &
operator [] 	imgui/imgui.h	/^    float  operator[] (size_t idx) const { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ We v/;"	f	struct:ImVec2	typeref:typename:float
operator [] 	imgui/imgui.h	/^    float& operator[] (size_t idx)       { IM_ASSERT(idx <= 1); return (&x)[idx]; }    \/\/ We v/;"	f	struct:ImVec2	typeref:typename:float &
operator delete	imgui/imgui.h	/^inline void  operator delete(void*, ImNewDummy, void*)   {} \/\/ This is only required so we can/;"	f	typeref:typename:void
operator new	imgui/imgui.h	/^inline void* operator new(size_t, ImNewDummy, void* ptr) { return ptr; }$/;"	f	typeref:typename:void *
orderbuf	main.cpp	/^std::string orderbuf(orderbuflen, '\\0');$/;"	v	typeref:typename:std::string
orderbuflen	main.cpp	/^const int orderbuflen = 64;$/;"	v	typeref:typename:const int
other	notes.md	/^### other$/;"	S
outliterals	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static void outliterals(stb_uchar *in, int numlit)$/;"	f	typeref:typename:void	file:
pack_info	imgui/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
padding	imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anonea0503650708	typeref:typename:unsigned char
padding	imgui/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
padding1	imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon22a5596e0308	typeref:typename:unsigned char
padding2	imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon22a5596e0308	typeref:typename:unsigned char
padding3	imgui/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon22a5596e0308	typeref:typename:unsigned char
paras	structs.h	/^  std::vector<std::string> paras;$/;"	m	struct:song_part	typeref:typename:std::vector<std::string>
parse_version	imgui/examples/libs/gl3w/GL/gl3w.c	/^static int parse_version(void)$/;"	f	typeref:typename:int	file:
pic_names	main.cpp	/^std::vector<char> pic_names(0);$/;"	v	typeref:typename:std::vector<char>
pixels	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned char* pixels;$/;"	m	struct:GLFWimage	typeref:typename:unsigned char *
pixels	imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anonea0503650808	typeref:typename:unsigned char *
pixels	imgui/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned char *
pop_back	imgui/imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector	typeref:typename:void
pos	imgui/examples/imgui_impl_allegro5.cpp	/^    ImVec2 pos;$/;"	m	struct:ImDrawVertAllegro	typeref:typename:ImVec2	file:
pos	imgui/examples/imgui_impl_dx9.cpp	/^    float    pos[3];$/;"	m	struct:CUSTOMVERTEX	typeref:typename:float[3]	file:
pos	imgui/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
preferred_x	imgui/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anon22a5596e0308	typeref:typename:float
prepareOpenGL	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleView
prev_first	imgui/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anon22a5596e0508	typeref:typename:int
prev_link	imgui/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anond298c5900308	typeref:typename:stbrp_node **
printglError	misc-util.h	/^void printglError(int lineNum){$/;"	f	typeref:typename:void
proggy_clean_ttf_compressed_data_base85	imgui/imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980+1] =$/;"	v	typeref:typename:const char[]	file:
progression	structs.h	/^  std::string progression;$/;"	m	struct:song	typeref:typename:std::string
ptr_from_offset	imgui/imgui_internal.h	/^    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 && off < Buf.Size); return (T*)(voi/;"	f	struct:ImChunkStream	typeref:typename:T *
push_back	imgui/imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_gro/;"	f	struct:ImVector	typeref:typename:void
push_front	imgui/imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else /;"	f	struct:ImVector	typeref:typename:void
pvertices	imgui/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anonea0503650f08	typeref:typename:stbtt_vertex *
readImgs	sqlite_routines.cpp	/^db_error readImgs(std::vector<image>& out_list){$/;"	f	typeref:typename:db_error
readSongs	sqlite_routines.cpp	/^db_error readSongs(sqlite3 * db, std::vector<song>& all_songs, std::vector<char*>& song_names){$/;"	f	typeref:typename:db_error
rect_height_compare	imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rect_original_order	imgui/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
red	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned short* red;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned short *
redBits	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    int redBits;$/;"	m	struct:GLFWvidmode	typeref:typename:int
redo_char_point	imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon22a5596e0208	typeref:typename:int
redo_point	imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon22a5596e0208	typeref:typename:short
refreshRate	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    int refreshRate;$/;"	m	struct:GLFWvidmode	typeref:typename:int
reloadSongs	misc-util.h	/^db_error reloadSongs(std::vector<song> & all_songs, std::vector<char*>&song_names){$/;"	f	typeref:typename:db_error
renderDrawData:commandBuffer:commandEncoder:	imgui/examples/imgui_impl_metal.mm	/^        commandEncoder:(id<MTLRenderCommandEncoder>)commandEncoder;$/;"	m	interface:MetalContext
renderDrawData:commandBuffer:commandEncoder:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
renderPipelineStateCache	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, strong) NSMutableDictionary *renderPipelineStateCache; \/\/ pipeline cache/;"	p	interface:MetalContext
renderPipelineStateForFrameAndDevice:	imgui/examples/imgui_impl_metal.mm	/^- (id<MTLRenderPipelineState>)renderPipelineStateForFrameAndDevice:(id<MTLDevice>)device;$/;"	m	interface:MetalContext
renderPipelineStateForFrameAndDevice:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
renderer	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^@property (nonatomic, strong) Renderer *renderer;$/;"	p	interface:ViewController
reserve	imgui/imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reserve	imgui/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
resetKeys	imgui/examples/imgui_impl_osx.mm	/^static void resetKeys()$/;"	f
reshape	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleView
resignFirstResponder	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleView
resize	imgui/imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize	imgui/imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize_grip_def	imgui/imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	typeref:typename:const ImGuiResizeGripDef[4]	file:
rowid	structs.h	/^  uint32_t rowid; \/\/ rowid from sqlite$/;"	m	struct:image	typeref:typename:uint32_t
run	makefile	/^run: all$/;"	t
s0	imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anonea0503650308	typeref:typename:float
s1	imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anonea0503650308	typeref:typename:float
sAddString	imgui/examples/libs/usynergy/uSynergy.c	/^static void sAddString(uSynergyContext *context, const char *string)$/;"	f	typeref:typename:void	file:
sAddUInt16	imgui/examples/libs/usynergy/uSynergy.c	/^static void sAddUInt16(uSynergyContext *context, uint16_t value)$/;"	f	typeref:typename:void	file:
sAddUInt32	imgui/examples/libs/usynergy/uSynergy.c	/^static void sAddUInt32(uSynergyContext *context, uint32_t value)$/;"	f	typeref:typename:void	file:
sAddUInt8	imgui/examples/libs/usynergy/uSynergy.c	/^static void sAddUInt8(uSynergyContext *context, uint8_t value)$/;"	f	typeref:typename:void	file:
sNetToNative16	imgui/examples/libs/usynergy/uSynergy.c	/^static int16_t sNetToNative16(const unsigned char *value)$/;"	f	typeref:typename:int16_t	file:
sNetToNative32	imgui/examples/libs/usynergy/uSynergy.c	/^static int32_t sNetToNative32(const unsigned char *value)$/;"	f	typeref:typename:int32_t	file:
sProcessMessage	imgui/examples/libs/usynergy/uSynergy.c	/^static void sProcessMessage(uSynergyContext *context, const uint8_t *message)$/;"	f	typeref:typename:void	file:
sSendJoystickCallback	imgui/examples/libs/usynergy/uSynergy.c	/^static void sSendJoystickCallback(uSynergyContext *context, uint8_t joyNum)$/;"	f	typeref:typename:void	file:
sSendKeyboardCallback	imgui/examples/libs/usynergy/uSynergy.c	/^static void sSendKeyboardCallback(uSynergyContext *context, uint16_t key, uint16_t modifiers, uS/;"	f	typeref:typename:void	file:
sSendMouseCallback	imgui/examples/libs/usynergy/uSynergy.c	/^static void sSendMouseCallback(uSynergyContext *context)$/;"	f	typeref:typename:void	file:
sSendReply	imgui/examples/libs/usynergy/uSynergy.c	/^static uSynergyBool sSendReply(uSynergyContext *context)$/;"	f	typeref:typename:uSynergyBool	file:
sSetDisconnected	imgui/examples/libs/usynergy/uSynergy.c	/^static void sSetDisconnected(uSynergyContext *context)$/;"	f	typeref:typename:void	file:
sTrace	imgui/examples/libs/usynergy/uSynergy.c	/^static void sTrace(uSynergyContext *context, const char* text)$/;"	f	typeref:typename:void	file:
sUpdateContext	imgui/examples/libs/usynergy/uSynergy.c	/^static void sUpdateContext(uSynergyContext *context)$/;"	f	typeref:typename:void	file:
sampleCount	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, assign) unsigned long sampleCount;$/;"	p	interface:FramebufferDescriptor
saveImg	sqlite_routines.cpp	/^db_error saveImg(std::vector<unsigned char> img_data, std::string img_name){$/;"	f	typeref:typename:db_error
saveSong	sqlite_routines.cpp	/^db_error saveSong(song input_song, char * db_name){$/;"	f	typeref:typename:db_error
schedSongUnit	misc-util.h	/^void schedSongUnit(std::vector<song> &all_songs , std::vector<song>& sched_songs, std::vector<ch/;"	f	typeref:typename:void
scheduleBuilder	misc-util.h	/^uint32_t scheduleBuilder(std::vector<song> &all_songs , std::vector<song>& sched_songs, std::vec/;"	f	typeref:typename:uint32_t
scrollWheel:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)scrollWheel:(NSEvent *)event {$/;"	m	implementation:ViewController
scrollWheel:	imgui/examples/example_apple_opengl2/main.mm	/^-(void)scrollWheel:(NSEvent *)event     { ImGui_ImplOSX_HandleEvent(event, self); }$/;"	m	implementation:ImGuiExampleView
select_end	imgui/imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anon22a5596e0308	typeref:typename:int
select_start	imgui/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anon22a5596e0308	typeref:typename:int
sepPara	misc-util.h	/^std::vector<std::string> sepPara(std::string song_text){$/;"	f	typeref:typename:std::vector<std::string>
sepSongParts	misc-util.h	/^std::vector<song_part> sepSongParts(std::string song_text) {$/;"	f	typeref:typename:std::vector<song_part>
sepTitleParts	misc-util.h	/^std::vector<song_part> sepTitleParts(std::vector<std::string> text){$/;"	f	typeref:typename:std::vector<song_part>
setBool	shader_class.h	/^    void setBool(const std::string &name, bool value) const$/;"	f	class:Shader	typeref:typename:void
setFloat	shader_class.h	/^    void setFloat(const std::string &name, float value) const$/;"	f	class:Shader	typeref:typename:void
setInt	shader_class.h	/^    void setInt(const std::string &name, int value) const$/;"	f	class:Shader	typeref:typename:void
setupMenu	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleAppDelegate
setupRenderState:commandBuffer:commandEncoder:renderPipelineState:vertexBuffer:vertexBufferOffset:	imgui/examples/imgui_impl_metal.mm	/^      vertexBufferOffset:(size_t)vertexBufferOffset;$/;"	m	interface:MetalContext
setupRenderState:commandBuffer:commandEncoder:renderPipelineState:vertexBuffer:vertexBufferOffset:	imgui/examples/imgui_impl_metal.mm	/^{$/;"	m	implementation:MetalContext
showMainMenuBar	misc-util.h	/^void showMainMenuBar() {$/;"	f	typeref:typename:void
show_another_window	imgui/examples/example_glut_opengl2/main.cpp	/^static bool show_another_window = false;$/;"	v	typeref:typename:bool	file:
show_demo_window	imgui/examples/example_glut_opengl2/main.cpp	/^static bool show_demo_window = true;$/;"	v	typeref:typename:bool	file:
shrink	imgui/imgui.h	/^    inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size /;"	f	struct:ImVector	typeref:typename:void
single_line	imgui/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anon22a5596e0308	typeref:typename:unsigned char
size	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    unsigned int size;$/;"	m	struct:GLFWgammaramp	typeref:typename:unsigned int
size	imgui/imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector	typeref:typename:int
size	imgui/imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:int
size	imgui/imgui_internal.h	/^    int     size() const                { return Buf.Size; }$/;"	f	struct:ImChunkStream	typeref:typename:int
size	imgui/imstb_truetype.h	/^   int size;$/;"	m	struct:__anonea0503650108	typeref:typename:int
size_in_bytes	imgui/imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector	typeref:typename:int
skip_missing	imgui/imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
snprintf	imgui/imgui_demo.cpp	/^#define snprintf /;"	d	file:
song	structs.h	/^struct song {$/;"	s
songEditor	misc-util.h	/^bool songEditor() {$/;"	f	typeref:typename:bool
song_part	structs.h	/^struct song_part {$/;"	s
split	imgui/imgui.cpp	/^void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const$/;"	f	class:ImGuiTextFilter::ImGuiTextRange	typeref:typename:void
started	imgui/imstb_truetype.h	/^   int started;$/;"	m	struct:__anonea0503650f08	typeref:typename:int
stb__barrier_in_b	imgui/imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	typeref:typename:const unsigned char *	file:
stb__barrier_out_b	imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char **	file:
stb__barrier_out_e	imgui/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__dout	imgui/imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	typeref:typename:unsigned char *	file:
stb__hashsize	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static  stb_uint stb__hashsize = 32768;$/;"	v	typeref:typename:stb_uint	file:
stb__hc	imgui/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc(/;"	d	file:
stb__hc2	imgui/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc2(/;"	d	file:
stb__hc3	imgui/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__hc3(/;"	d	file:
stb__in2	imgui/imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	imgui/imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	imgui/imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	imgui/imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__match	imgui/imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__nc	imgui/misc/fonts/binary_to_compressed_c.cpp	/^#define stb__nc(/;"	d	file:
stb__out	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static stb_uchar *stb__out;$/;"	v	typeref:typename:stb_uchar *	file:
stb__outbytes	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static stb_uint   stb__outbytes;$/;"	v	typeref:typename:stb_uint	file:
stb__outfile	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static FILE      *stb__outfile;$/;"	v	typeref:typename:FILE *	file:
stb__running_adler	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static unsigned int stb__running_adler;$/;"	v	typeref:typename:unsigned int	file:
stb__window	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static int stb__window = 0x40000; \/\/ 256K$/;"	v	typeref:typename:int	file:
stb__write	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static void stb__write(unsigned char v)$/;"	f	typeref:typename:void	file:
stb_adler32	imgui/imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen/;"	f	typeref:typename:unsigned int	file:
stb_adler32	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static stb_uint stb_adler32(stb_uint adler32, stb_uchar *buffer, stb_uint buflen)$/;"	f	typeref:typename:stb_uint	file:
stb_compress	imgui/misc/fonts/binary_to_compressed_c.cpp	/^stb_uint stb_compress(stb_uchar *out, stb_uchar *input, stb_uint length)$/;"	f	typeref:typename:stb_uint
stb_compress_chunk	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static int stb_compress_chunk(stb_uchar *history,$/;"	f	typeref:typename:int	file:
stb_compress_inner	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static int stb_compress_inner(stb_uchar *input, stb_uint length)$/;"	f	typeref:typename:int	file:
stb_decompress	imgui/imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \//;"	f	typeref:typename:unsigned int	file:
stb_decompress_length	imgui/imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	typeref:typename:unsigned int	file:
stb_decompress_token	imgui/imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	typeref:typename:const unsigned char *	file:
stb_matchlen	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static unsigned int stb_matchlen(stb_uchar *m1, stb_uchar *m2, stb_uint maxlen)$/;"	f	typeref:typename:unsigned int	file:
stb_not_crap	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static int stb_not_crap(int best, int dist)$/;"	f	typeref:typename:int	file:
stb_out	imgui/misc/fonts/binary_to_compressed_c.cpp	/^#define stb_out(/;"	d	file:
stb_out2	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out2(stb_uint v) { stb_out(v >> 8); stb_out(v); }$/;"	f	typeref:typename:void	file:
stb_out3	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out3(stb_uint v) { stb_out(v >> 16); stb_out(v >> 8); stb_out(v); }$/;"	f	typeref:typename:void	file:
stb_out4	imgui/misc/fonts/binary_to_compressed_c.cpp	/^static void stb_out4(stb_uint v) { stb_out(v >> 24); stb_out(v >> 16); stb_out(v >> 8 ); stb_out/;"	f	typeref:typename:void	file:
stb_text_create_undo_record	imgui/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f	typeref:typename:StbUndoRecord *
stb_text_createundo	imgui/imstb_textedit.h	/^static STB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len, /;"	f	typeref:typename:STB_TEXTEDIT_CHARTYPE *
stb_text_locate_coord	imgui/imstb_textedit.h	/^static int stb_text_locate_coord(STB_TEXTEDIT_STRING *str, float x, float y)$/;"	f	typeref:typename:int
stb_text_makeundo_delete	imgui/imstb_textedit.h	/^static void stb_text_makeundo_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int whe/;"	f	typeref:typename:void
stb_text_makeundo_insert	imgui/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f	typeref:typename:void
stb_text_makeundo_replace	imgui/imstb_textedit.h	/^static void stb_text_makeundo_replace(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int wh/;"	f	typeref:typename:void
stb_text_redo	imgui/imstb_textedit.h	/^static void stb_text_redo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_text_undo	imgui/imstb_textedit.h	/^static void stb_text_undo(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clamp	imgui/imstb_textedit.h	/^static void stb_textedit_clamp(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clear_state	imgui/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_click	imgui/imstb_textedit.h	/^static void stb_textedit_click(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, floa/;"	f	typeref:typename:void
stb_textedit_cut	imgui/imstb_textedit.h	/^static int stb_textedit_cut(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:int
stb_textedit_delete	imgui/imstb_textedit.h	/^static void stb_textedit_delete(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where, i/;"	f	typeref:typename:void
stb_textedit_delete_selection	imgui/imstb_textedit.h	/^static void stb_textedit_delete_selection(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_redo	imgui/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_undo	imgui/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_drag	imgui/imstb_textedit.h	/^static void stb_textedit_drag(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, float/;"	f	typeref:typename:void
stb_textedit_find_charpos	imgui/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, STB_TEXTEDIT_STRING *str, int n, int s/;"	f	typeref:typename:void
stb_textedit_flush_redo	imgui/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_initialize_state	imgui/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_key	imgui/imstb_textedit.h	/^static void stb_textedit_key(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_KE/;"	f	typeref:typename:void
stb_textedit_move_to_first	imgui/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_last	imgui/imstb_textedit.h	/^static void stb_textedit_move_to_last(STB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_word_next	imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_move_to_word_previous	imgui/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( STB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_paste	imgui/imstb_textedit.h	/^static int stb_textedit_paste(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_C/;"	f	typeref:typename:int
stb_textedit_paste_internal	imgui/imstb_textedit.h	/^static int stb_textedit_paste_internal(STB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_T/;"	f	typeref:typename:int
stb_textedit_prep_selection_at_cursor	imgui/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_replace	imgui/imgui_widgets.cpp	/^static void stb_textedit_replace(STB_TEXTEDIT_STRING* str, STB_TexteditState* state, const STB_T/;"	f	namespace:ImStb	typeref:typename:void	file:
stb_textedit_sortselection	imgui/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_uchar	imgui/misc/fonts/binary_to_compressed_c.cpp	/^typedef unsigned char stb_uchar;$/;"	t	typeref:typename:unsigned char	file:
stb_uint	imgui/misc/fonts/binary_to_compressed_c.cpp	/^typedef unsigned int stb_uint;$/;"	t	typeref:typename:unsigned int	file:
stbrp__findresult	imgui/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anond298c5900308
stbrp__skyline_find_best_pos	imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f	typeref:typename:stbrp__findresult
stbrp__skyline_find_min_y	imgui/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int/;"	f	typeref:typename:int
stbrp__skyline_pack_rectangle	imgui/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int he/;"	f	typeref:typename:stbrp__findresult
stbrp_context	imgui/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	imgui/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	imgui/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anonea0503651108
stbrp_coord	imgui/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t	typeref:typename:int
stbrp_coord	imgui/imstb_rectpack.h	/^typedef unsigned short stbrp_coord;$/;"	t	typeref:typename:unsigned short
stbrp_coord	imgui/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t	typeref:typename:int
stbrp_init_target	imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *node/;"	f	typeref:typename:STBRP_DEF void
stbrp_init_target	imgui/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nod/;"	f	typeref:typename:void
stbrp_node	imgui/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	imgui/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	imgui/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anonea0503651208
stbrp_pack_rects	imgui/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:STBRP_DEF int
stbrp_pack_rects	imgui/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:void
stbrp_rect	imgui/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	imgui/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	imgui/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	imgui/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:STBRP_DEF void
stbrp_setup_heuristic	imgui/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f	typeref:typename:STBRP_DEF void
stbtt_BakeFontBitmap	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f	typeref:typename:STBTT_DEF int
stbtt_BakeFontBitmap_internal	imgui/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (u/;"	f	typeref:typename:int
stbtt_CompareUTF8toUTF16_bigendian	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int l/;"	f	typeref:typename:STBTT_DEF int
stbtt_CompareUTF8toUTF16_bigendian_internal	imgui/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2) $/;"	f	typeref:typename:int
stbtt_FindGlyphIndex	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont_internal	imgui/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbt/;"	f	typeref:typename:int
stbtt_FlattenCurves	imgui/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_f/;"	f	typeref:typename:stbtt__point *
stbtt_FreeBitmap	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeSDF	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeShape	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetBakedQuad	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_inde/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmap	imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBitmapBox	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapBoxSubpixel	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, fl/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapSubpixel	imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scal/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBox	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0,/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointHMetrics	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanc/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointKernAdvance	imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointSDF	imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int cod/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointShape	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_v/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontBoundingBox	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, i/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontNameString	imgui/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platf/;"	f	typeref:typename:STBTT_DEF const char *
stbtt_GetFontOffsetForIndex	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontOffsetForIndex_internal	imgui/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f	typeref:typename:int
stbtt_GetFontVMetrics	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontVMetricsOS2	imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDe/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphBitmap	imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float s/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBitmapBox	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapBoxSubpixel	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapSubpixel	imgui/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x,/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBox	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, i/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphHMetrics	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceW/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphKernAdvance	imgui/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphSDF	imgui/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, /;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphShape	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts_internal	imgui/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f	typeref:typename:int
stbtt_GetPackedQuad	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_in/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetScaledFontVMetrics	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size,/;"	f	typeref:typename:STBTT_DEF void
stbtt_InitFont	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_InitFont_internal	imgui/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f	typeref:typename:int
stbtt_IsGlyphEmpty	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_MakeCodepointBitmap	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixel	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *outp/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixelPrefilter	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned c/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmap	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixel	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixelPrefilter	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char /;"	f	typeref:typename:STBTT_DEF void
stbtt_PackBegin	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, in/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackEnd	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRange	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int fo/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRanges	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int f/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesGatherRects	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *inf/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesPackRects	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRangesRenderIntoRects	imgui/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo /;"	f	typeref:typename:STBTT_DEF int
stbtt_PackSetOversampling	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, uns/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackSetSkipMissingCodepoints	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_Rasterize	imgui/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *ve/;"	f	typeref:typename:STBTT_DEF void
stbtt_ScaleForMappingEmToPixels	imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f	typeref:typename:STBTT_DEF float
stbtt_ScaleForPixelHeight	imgui/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	typeref:typename:STBTT_DEF float
stbtt__CompareUTF8toUTF16_bigendian_prefix	imgui/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1,/;"	f	typeref:typename:stbtt_int32
stbtt__GetCoverageIndex	imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyfOffset	imgui/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:int
stbtt__GetGlyphClass	imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphGPOSInfoAdvance	imgui/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int g/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphInfoT2	imgui/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, /;"	f	typeref:typename:int
stbtt__GetGlyphKernInfoAdvance	imgui/imstb_truetype.h	/^static int  stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	typeref:typename:int
stbtt__GetGlyphShapeT2	imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__GetGlyphShapeTT	imgui/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__active_edge	imgui/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	imgui/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	imgui/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	typeref:typename:void
stbtt__bitmap	imgui/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anonea0503650808
stbtt__buf	imgui/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anonea0503650108
stbtt__buf_get	imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f	typeref:typename:stbtt_uint32
stbtt__buf_get16	imgui/imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	imgui/imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_peek8	imgui/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_range	imgui/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f	typeref:typename:stbtt__buf
stbtt__buf_seek	imgui/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__buf_skip	imgui/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__cff_get_index	imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_index_count	imgui/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f	typeref:typename:int
stbtt__cff_index_get	imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_int	imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint32
stbtt__cff_skip_operand	imgui/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f	typeref:typename:void
stbtt__check_size16	imgui/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int16)==2?1:-1]
stbtt__check_size32	imgui/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int32)==4?1:-1]
stbtt__cid_get_glyph_subrs	imgui/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:stbtt__buf
stbtt__close_shape	imgui/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_o/;"	f	typeref:typename:int
stbtt__compute_crossings_x	imgui/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f	typeref:typename:int
stbtt__csctx	imgui/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anonea0503650f08
stbtt__csctx_close_shape	imgui/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f	typeref:typename:void
stbtt__csctx_rccurve_to	imgui/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy/;"	f	typeref:typename:void
stbtt__csctx_rline_to	imgui/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_rmove_to	imgui/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_v	imgui/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbt/;"	f	typeref:typename:void
stbtt__cuberoot	imgui/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f	typeref:typename:float
stbtt__dict_get	imgui/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f	typeref:typename:stbtt__buf
stbtt__dict_get_ints	imgui/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f	typeref:typename:void
stbtt__edge	imgui/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	imgui/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, in/;"	f	typeref:typename:void
stbtt__fill_active_edges_new	imgui/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__/;"	f	typeref:typename:void
stbtt__find_table	imgui/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag/;"	f	typeref:typename:stbtt_uint32
stbtt__get_subr	imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_subrs	imgui/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f	typeref:typename:stbtt__buf
stbtt__h_prefilter	imgui/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt__handle_clipped_edge	imgui/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, /;"	f	typeref:typename:void
stbtt__hheap	imgui/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	imgui/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	imgui/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f	typeref:typename:void *
stbtt__hheap_chunk	imgui/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	imgui/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	imgui/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f	typeref:typename:void
stbtt__hheap_free	imgui/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f	typeref:typename:void
stbtt__isfont	imgui/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f	typeref:typename:int
stbtt__matches	imgui/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 f/;"	f	typeref:typename:int
stbtt__matchpair	imgui/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nle/;"	f	typeref:typename:int
stbtt__new_active	imgui/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float /;"	f	typeref:typename:stbtt__active_edge *
stbtt__new_buf	imgui/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f	typeref:typename:stbtt__buf
stbtt__oversample_shift	imgui/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f	typeref:typename:float
stbtt__point	imgui/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anonea0503651008
stbtt__rasterize	imgui/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings/;"	f	typeref:typename:void
stbtt__rasterize_sorted_edges	imgui/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsub/;"	f	typeref:typename:void
stbtt__ray_intersect_bezier	imgui/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], fl/;"	f	typeref:typename:int
stbtt__run_charstring	imgui/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f	typeref:typename:int
stbtt__solve_cubic	imgui/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f	typeref:typename:int
stbtt__sort_edges	imgui/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_ins_sort	imgui/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_quicksort	imgui/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__tesselate_cubic	imgui/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, fl/;"	f	typeref:typename:void
stbtt__tesselate_curve	imgui/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, flo/;"	f	typeref:typename:int
stbtt__test_oversample_pow2	imgui/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ?/;"	t	typeref:typename:int[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1))==0?1:-1]
stbtt__track_vertex	imgui/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f	typeref:typename:void
stbtt__v_prefilter	imgui/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt_aligned_quad	imgui/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anonea0503650308
stbtt_bakedchar	imgui/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anonea0503650208
stbtt_fontinfo	imgui/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	imgui/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	imgui/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t	typeref:typename:signed short
stbtt_int32	imgui/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t	typeref:typename:signed int
stbtt_int8	imgui/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t	typeref:typename:signed char
stbtt_pack_context	imgui/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	imgui/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	imgui/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anonea0503650508
stbtt_packedchar	imgui/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anonea0503650408
stbtt_setvertex	imgui/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stb/;"	f	typeref:typename:void
stbtt_tag	imgui/imstb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	imgui/imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	imgui/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t	typeref:typename:unsigned short
stbtt_uint32	imgui/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t	typeref:typename:unsigned int
stbtt_uint8	imgui/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t	typeref:typename:unsigned char
stbtt_vertex	imgui/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anonea0503650708
stbtt_vertex_type	imgui/imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
stencilPixelFormat	imgui/examples/imgui_impl_metal.mm	/^@property (nonatomic, assign) MTLPixelFormat stencilPixelFormat;$/;"	p	interface:FramebufferDescriptor
storeCallback	sqlite_routines.cpp	/^int storeCallback(void * data, int argc, char **argv, char **colname){$/;"	f	typeref:typename:int
stride	imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anonea0503650808	typeref:typename:int
stride_in_bytes	imgui/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
subrs	imgui/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
swap	imgui/imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size /;"	f	struct:ImVector	typeref:typename:void
sy	imgui/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
t0	imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anonea0503650308	typeref:typename:float
t1	imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anonea0503650308	typeref:typename:float
tex_ids	imageMenu.cpp	/^std::vector<GLuint> tex_ids(0);$/;"	v	typeref:typename:std::vector<GLuint>
title_buf	main.cpp	/^std::string title_buf(title_buf_len+1, '\\0');$/;"	v	typeref:typename:std::string
title_buf_len	main.cpp	/^const uint32_t title_buf_len = 200;$/;"	v	typeref:typename:const uint32_t
titlebuf	main.cpp	/^std::string titlebuf(titlebuflen, '\\0');$/;"	v	typeref:typename:std::string
titlebuflen	main.cpp	/^const int titlebuflen = 64;$/;"	v	typeref:typename:const int
touchesBegan:withEvent:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {$/;"	m	implementation:ViewController
touchesCancelled:withEvent:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)touchesCancelled:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {$/;"	m	implementation:ViewController
touchesEnded:withEvent:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)touchesEnded:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {$/;"	m	implementation:ViewController
touchesMoved:withEvent:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)touchesMoved:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event {$/;"	m	implementation:ViewController
ttBYTE	imgui/imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	imgui/imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	imgui/imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	imgui/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_int32
ttSHORT	imgui/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_int16
ttULONG	imgui/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_uint32
ttUSHORT	imgui/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_uint16
type	imgui/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anonea0503650708	typeref:typename:unsigned char
uSynergyBool	imgui/examples/libs/usynergy/uSynergy.h	/^typedef int			uSynergyBool;$/;"	t	typeref:typename:int
uSynergyClipboardCallback	imgui/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyClipboardCallback)(uSynergyCookie cookie, enum uSynergyClipboardFormat f/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,enum uSynergyClipboardFormat format,const uint8_t * data,uint32_t size)
uSynergyClipboardFormat	imgui/examples/libs/usynergy/uSynergy.h	/^enum uSynergyClipboardFormat$/;"	g
uSynergyConnectFunc	imgui/examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergyConnectFunc)(uSynergyCookie cookie);$/;"	t	typeref:typename:uSynergyBool (*)(uSynergyCookie cookie)
uSynergyContext	imgui/examples/libs/usynergy/uSynergy.h	/^} uSynergyContext;$/;"	t	typeref:struct:__anon1561e7070208
uSynergyCookie	imgui/examples/libs/usynergy/uSynergy.h	/^typedef struct { int ignored; } *					uSynergyCookie;$/;"	t	typeref:struct:__anon1561e7070108 *
uSynergyGetTimeFunc	imgui/examples/libs/usynergy/uSynergy.h	/^typedef uint32_t	(*uSynergyGetTimeFunc)();$/;"	t	typeref:typename:uint32_t (*)()
uSynergyInit	imgui/examples/libs/usynergy/uSynergy.c	/^void uSynergyInit(uSynergyContext *context)$/;"	f	typeref:typename:void
uSynergyJoystickCallback	imgui/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyJoystickCallback)(uSynergyCookie cookie, uint8_t joyNum, uint16_t button/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uint8_t joyNum,uint16_t buttons,int8_t leftStickX,int8_t leftStickY,int8_t rightStickX,int8_t rightStickY)
uSynergyKeyboardCallback	imgui/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyKeyboardCallback)(uSynergyCookie cookie, uint16_t key, uint16_t modifier/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uint16_t key,uint16_t modifiers,uSynergyBool down,uSynergyBool repeat)
uSynergyMouseCallback	imgui/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyMouseCallback)(uSynergyCookie cookie, uint16_t x, uint16_t y, int16_t wh/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uint16_t x,uint16_t y,int16_t wheelX,int16_t wheelY,uSynergyBool buttonLeft,uSynergyBool buttonRight,uSynergyBool buttonMiddle)
uSynergyReceiveFunc	imgui/examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergyReceiveFunc)(uSynergyCookie cookie, uint8_t *buffer, int maxLengt/;"	t	typeref:typename:uSynergyBool (*)(uSynergyCookie cookie,uint8_t * buffer,int maxLength,int * outLength)
uSynergyScreenActiveCallback	imgui/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyScreenActiveCallback)(uSynergyCookie cookie, uSynergyBool active);$/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,uSynergyBool active)
uSynergySendClipboard	imgui/examples/libs/usynergy/uSynergy.c	/^void uSynergySendClipboard(uSynergyContext *context, const char *text)$/;"	f	typeref:typename:void
uSynergySendFunc	imgui/examples/libs/usynergy/uSynergy.h	/^typedef uSynergyBool (*uSynergySendFunc)(uSynergyCookie cookie, const uint8_t *buffer, int lengt/;"	t	typeref:typename:uSynergyBool (*)(uSynergyCookie cookie,const uint8_t * buffer,int length)
uSynergySleepFunc	imgui/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergySleepFunc)(uSynergyCookie cookie, int timeMs);$/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,int timeMs)
uSynergyTraceFunc	imgui/examples/libs/usynergy/uSynergy.h	/^typedef void		(*uSynergyTraceFunc)(uSynergyCookie cookie, const char *text);$/;"	t	typeref:typename:void (*)(uSynergyCookie cookie,const char * text)
uSynergyUpdate	imgui/examples/libs/usynergy/uSynergy.c	/^void uSynergyUpdate(uSynergyContext *context)$/;"	f	typeref:typename:void
ui notes	notes.md	/^## ui notes$/;"	s
uint64_t	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned __int64 uint64_t;$/;"	t	typeref:typename:unsigned __int64
uint64_t	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned long int uint64_t;$/;"	t	typeref:typename:unsigned long int
uint64_t	imgui/examples/libs/gl3w/GL/glcorearb.h	/^typedef unsigned long long int uint64_t;$/;"	t	typeref:typename:unsigned long long int
undo_char	imgui/imstb_textedit.h	/^   STB_TEXTEDIT_CHARTYPE  undo_char[STB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anon22a5596e0208	typeref:typename:STB_TEXTEDIT_CHARTYPE[]
undo_char_point	imgui/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon22a5596e0208	typeref:typename:int
undo_point	imgui/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon22a5596e0208	typeref:typename:short
undo_rec	imgui/imstb_textedit.h	/^   StbUndoRecord          undo_rec [STB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anon22a5596e0208	typeref:typename:StbUndoRecord[]
undostate	imgui/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anon22a5596e0308	typeref:typename:StbUndoState
updateAndDrawDemoView	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleView
updateIOWithTouchEvent:	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^- (void)updateIOWithTouchEvent:(UIEvent *)event {$/;"	m	implementation:ViewController
use	shader_class.h	/^    void use() $/;"	f	class:Shader	typeref:typename:void
user_allocator_context	imgui/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
userdata	imgui/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo	typeref:typename:void *
uv	imgui/examples/imgui_impl_allegro5.cpp	/^    ImVec2 uv;$/;"	m	struct:ImDrawVertAllegro	typeref:typename:ImVec2	file:
uv	imgui/examples/imgui_impl_dx9.cpp	/^    float    uv[2];$/;"	m	struct:CUSTOMVERTEX	typeref:typename:float[2]	file:
uv	imgui/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
v_oversample	imgui/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anonea0503650508	typeref:typename:unsigned char
v_oversample	imgui/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
va_copy	imgui/imgui.cpp	/^#define va_copy(/;"	d	file:
val_f	imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon1345ae40010a	typeref:typename:float
val_i	imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon1345ae40010a	typeref:typename:int
val_p	imgui/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon1345ae40010a	typeref:typename:void *
value_type	imgui/imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector	typeref:typename:T
version	imgui/examples/libs/gl3w/GL/gl3w.c	/^} version;$/;"	v	typeref:struct:__anon23d609b20108
vertexShaderSource	main.cpp	/^const char *vertexShaderSource = "#version 330 core\\n"$/;"	v	typeref:typename:const char *
viewDidLoad	imgui/examples/example_apple_metal/Shared/ViewController.mm	/^{$/;"	m	implementation:ViewController
vsnprintf	imgui/imgui.cpp	/^#define vsnprintf /;"	d	file:
vsnprintf	imgui/imgui_demo.cpp	/^#define vsnprintf /;"	d	file:
w	imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
w	imgui/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
w	imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
w	imgui/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anonea0503650808	typeref:typename:int
was_packed	imgui/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect	typeref:typename:int
was_packed	imgui/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
where	imgui/imstb_textedit.h	/^   STB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anon22a5596e0108	typeref:typename:STB_TEXTEDIT_POSITIONTYPE
width	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWimage	typeref:typename:int
width	imgui/examples/libs/glfw/include/GLFW/glfw3.h	/^    int width;$/;"	m	struct:GLFWvidmode	typeref:typename:int
width	imgui/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context	typeref:typename:int
width	imgui/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
width	imgui/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anonea0503651108	typeref:typename:int
window	imgui/examples/example_apple_metal/Shared/AppDelegate.h	/^@property (strong, nonatomic) UIWindow *window;$/;"	p	interface:AppDelegate
window	imgui/examples/example_apple_opengl2/main.mm	/^@property (nonatomic, readonly) NSWindow* window;$/;"	p	interface:ImGuiExampleAppDelegate
window	imgui/examples/example_apple_opengl2/main.mm	/^{$/;"	m	implementation:ImGuiExampleAppDelegate
worship-attempt	README.md	/^# worship-attempt$/;"	c
x	imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	imgui/imgui.h	/^    float     x, y;$/;"	m	struct:ImVec2	typeref:typename:float
x	imgui/imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1	typeref:typename:float
x	imgui/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
x	imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anond298c5900308	typeref:typename:int
x	imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
x	imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon22a5596e0508	typeref:typename:float
x	imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonea0503650708	typeref:typename:stbtt_vertex_type
x	imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anonea0503650f08	typeref:typename:float
x	imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anonea0503651008	typeref:typename:float
x	imgui/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
x	imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anonea0503651108	typeref:typename:int
x	imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	imgui/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anonea0503651208	typeref:typename:unsigned char
x0	imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon22a5596e0408	typeref:typename:float
x0	imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x0	imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anonea0503650308	typeref:typename:float
x0	imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonea0503650208	typeref:typename:unsigned short
x0	imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonea0503650408	typeref:typename:unsigned short
x1	imgui/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon22a5596e0408	typeref:typename:float
x1	imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x1	imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anonea0503650308	typeref:typename:float
x1	imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonea0503650208	typeref:typename:unsigned short
x1	imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonea0503650408	typeref:typename:unsigned short
xadvance	imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonea0503650208	typeref:typename:float
xadvance	imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonea0503650408	typeref:typename:float
xoff	imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonea0503650208	typeref:typename:float
xoff	imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonea0503650408	typeref:typename:float
xoff2	imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anonea0503650408	typeref:typename:float
y	imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
y	imgui/imgui.h	/^    float     x, y;$/;"	m	struct:ImVec2	typeref:typename:float
y	imgui/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
y	imgui/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anond298c5900308	typeref:typename:int
y	imgui/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	imgui/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
y	imgui/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon22a5596e0508	typeref:typename:float
y	imgui/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonea0503650708	typeref:typename:stbtt_vertex_type
y	imgui/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anonea0503650f08	typeref:typename:float
y	imgui/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anonea0503651008	typeref:typename:float
y	imgui/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anonea0503651108	typeref:typename:int
y	imgui/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y0	imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y0	imgui/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anonea0503650308	typeref:typename:float
y0	imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonea0503650208	typeref:typename:unsigned short
y0	imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonea0503650408	typeref:typename:unsigned short
y1	imgui/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y1	imgui/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anonea0503650308	typeref:typename:float
y1	imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonea0503650208	typeref:typename:unsigned short
y1	imgui/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonea0503650408	typeref:typename:unsigned short
ymax	imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon22a5596e0408	typeref:typename:float
ymin	imgui/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon22a5596e0408	typeref:typename:float
yoff	imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonea0503650208	typeref:typename:float
yoff	imgui/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonea0503650408	typeref:typename:float
yoff2	imgui/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anonea0503650408	typeref:typename:float
z	imgui/imgui.h	/^    float     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
~ExampleAppConsole	imgui/imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
~FreeTypeFont	imgui/misc/freetype/imgui_freetype.cpp	/^        ~FreeTypeFont()         { CloseFont(); }$/;"	f	struct:__anon76bbacac0111::FreeTypeFont	file:
~ImDrawData	imgui/imgui.h	/^    ~ImDrawData()   { Clear(); }$/;"	f	struct:ImDrawData
~ImDrawList	imgui/imgui.h	/^    ~ImDrawList() { ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImDrawListSplitter	imgui/imgui.h	/^    inline ~ImDrawListSplitter() { ClearFreeMemory(); }$/;"	f	struct:ImDrawListSplitter
~ImFont	imgui/imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	imgui/imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiListClipper	imgui/imgui.h	/^    ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount =/;"	f	struct:ImGuiListClipper
~ImGuiWindow	imgui/imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	imgui/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	imgui/imgui.h	/^    inline ~ImVector()                                      { if (Data) IM_FREE(Data); }$/;"	f	struct:ImVector
